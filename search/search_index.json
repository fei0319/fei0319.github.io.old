{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 feiko.me \u00b6 \u6b22\u8fce\u6765\u5230 feiko.me\uff01\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6211\u5b66\u4e60 OI \u65f6\u7684\u4e00\u4e9b\u60f3\u6cd5\u4e0e\u601d\u8003\uff0c\u6b22\u8fce\u4f60\u524d\u6765\u9605\u8bfb\uff0c\u6216\u662f\u6307\u51fa\u5176\u4e2d\u7684\u9519\u8bef\u3002 \u76ee\u524d\u535a\u5ba2\u7684\u8bc4\u8bba\u7cfb\u7edf\u5df2\u7ecf\u5f00\u901a\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 fei@feiko.me \u8054\u7cfb\u6211\u3002 \u4f7f\u7528\u53f3\u4e0a\u89d2\u7684\u641c\u7d22\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u67e5\u627e\u8fd9\u91cc\u7684\u4efb\u4f55\u7b14\u8bb0\uff0c\u9898\u89e3\u548c\u8bb0\u5f55\uff01","title":"\u6b22\u8fce"},{"location":"#feikome","text":"\u6b22\u8fce\u6765\u5230 feiko.me\uff01\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6211\u5b66\u4e60 OI \u65f6\u7684\u4e00\u4e9b\u60f3\u6cd5\u4e0e\u601d\u8003\uff0c\u6b22\u8fce\u4f60\u524d\u6765\u9605\u8bfb\uff0c\u6216\u662f\u6307\u51fa\u5176\u4e2d\u7684\u9519\u8bef\u3002 \u76ee\u524d\u535a\u5ba2\u7684\u8bc4\u8bba\u7cfb\u7edf\u5df2\u7ecf\u5f00\u901a\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 fei@feiko.me \u8054\u7cfb\u6211\u3002 \u4f7f\u7528\u53f3\u4e0a\u89d2\u7684\u641c\u7d22\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u67e5\u627e\u8fd9\u91cc\u7684\u4efb\u4f55\u7b14\u8bb0\uff0c\u9898\u89e3\u548c\u8bb0\u5f55\uff01","title":"\u6b22\u8fce\u6765\u5230 feiko.me"},{"location":"data_structure/binary_lift_BIT/","text":"\u6811\u72b6\u6570\u7ec4\u500d\u589e \u00b6 \u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u6811\u72b6\u6570\u7ec4\u4e5f\u6709\u81ea\u5df1\u5bf9\u5e94\u7684\u6811\u4e0a\u5bf9\u6570\u7ea7\u67e5\u627e\u7b97\u6cd5\u3002\u8fd9\u79cd\u7b97\u6cd5\u5229\u7528\u4e86\u6811\u72b6\u6570\u7ec4\u72ec\u7279\u7684\u6027\u8d28\uff0c\u88ab\u79f0\u4f5c\u6811\u72b6\u6570\u7ec4\u500d\u589e\u3002 \u5982\u4f55\u500d\u589e\uff1f \u00b6 \u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\u4e3a i i \u7684\u4f4d\u7f6e\u5b58\u50a8\u7740 (i-\\operatorname{lowbit}(i),i] (i-\\operatorname{lowbit}(i),i] \u7684\u4fe1\u606f\u3002 int query ( int x ){ int res ( 0 ); for (; x ; x -= x & - x ) res += tr [ x ]; return res ; } \u8003\u8651\u4ee5\u4e0a\u8fc7\u7a0b\u3002\u4ee5 100101001010 100101001010 \u4e3a\u4f8b\uff0c\u5b83\u7684\u8d21\u732e\u662f\u8fd9\u6837\u8ba1\u7b97\u7684\uff1a T(1001010010\\textbf10)+T(10010100\\textbf{1}000)+T(10010\\textbf1000000)+T(100\\textbf100000000)+T(100000000000) T(1001010010\\textbf10)+T(10010100\\textbf{1}000)+T(10010\\textbf1000000)+T(100\\textbf100000000)+T(100000000000) \u6362\u53e5\u8bdd\u8bb2\uff0c\u5c31\u662f\u9010\u6b21\u53bb\u9664\u6700\u4f4e\u4f4d\u3002 \u8003\u8651\u53cd\u5411\u8ba1\u7b97\u8d21\u732e\uff0c\u5373\u9010\u6b21\u6dfb\u52a0\u6700\u9ad8\u4f4d\u3002\u8fd9\u6837\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u500d\u589e\u3002 \u4f8b\u9898\u9009\u505a \u00b6 \u8054\u5408\u7701\u90092020 AB \u51b0\u706b\u6218\u58eb ZJOI2013 K\u5927\u6570\u67e5\u8be2 CTSC2018 \u6df7\u5408\u679c\u6c41","title":"\u6811\u72b6\u6570\u7ec4\u500d\u589e"},{"location":"data_structure/binary_lift_BIT/#_1","text":"\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u6811\u72b6\u6570\u7ec4\u4e5f\u6709\u81ea\u5df1\u5bf9\u5e94\u7684\u6811\u4e0a\u5bf9\u6570\u7ea7\u67e5\u627e\u7b97\u6cd5\u3002\u8fd9\u79cd\u7b97\u6cd5\u5229\u7528\u4e86\u6811\u72b6\u6570\u7ec4\u72ec\u7279\u7684\u6027\u8d28\uff0c\u88ab\u79f0\u4f5c\u6811\u72b6\u6570\u7ec4\u500d\u589e\u3002","title":"\u6811\u72b6\u6570\u7ec4\u500d\u589e"},{"location":"data_structure/binary_lift_BIT/#_2","text":"\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\u4e3a i i \u7684\u4f4d\u7f6e\u5b58\u50a8\u7740 (i-\\operatorname{lowbit}(i),i] (i-\\operatorname{lowbit}(i),i] \u7684\u4fe1\u606f\u3002 int query ( int x ){ int res ( 0 ); for (; x ; x -= x & - x ) res += tr [ x ]; return res ; } \u8003\u8651\u4ee5\u4e0a\u8fc7\u7a0b\u3002\u4ee5 100101001010 100101001010 \u4e3a\u4f8b\uff0c\u5b83\u7684\u8d21\u732e\u662f\u8fd9\u6837\u8ba1\u7b97\u7684\uff1a T(1001010010\\textbf10)+T(10010100\\textbf{1}000)+T(10010\\textbf1000000)+T(100\\textbf100000000)+T(100000000000) T(1001010010\\textbf10)+T(10010100\\textbf{1}000)+T(10010\\textbf1000000)+T(100\\textbf100000000)+T(100000000000) \u6362\u53e5\u8bdd\u8bb2\uff0c\u5c31\u662f\u9010\u6b21\u53bb\u9664\u6700\u4f4e\u4f4d\u3002 \u8003\u8651\u53cd\u5411\u8ba1\u7b97\u8d21\u732e\uff0c\u5373\u9010\u6b21\u6dfb\u52a0\u6700\u9ad8\u4f4d\u3002\u8fd9\u6837\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u500d\u589e\u3002","title":"\u5982\u4f55\u500d\u589e\uff1f"},{"location":"data_structure/binary_lift_BIT/#_3","text":"\u8054\u5408\u7701\u90092020 AB \u51b0\u706b\u6218\u58eb ZJOI2013 K\u5927\u6570\u67e5\u8be2 CTSC2018 \u6df7\u5408\u679c\u6c41","title":"\u4f8b\u9898\u9009\u505a"},{"location":"data_structure/sgt_merge/","text":"\u7ebf\u6bb5\u6811\u5408\u5e76 \u00b6 \u7ebf\u6bb5\u6811\u5408\u5e76\u662f\u4e00\u79cd\u5e7f\u6cdb\u8fd0\u7528\u7684\u79d1\u6280\uff0c\u662f\u8fd1\u5e74\u6765\u7684\u70ed\u95e8\u8003\u70b9\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5408\u5e76\u4e24\u68f5\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u57fa\u672c\u505a\u6cd5\u53ef\u4ee5\u53c2\u7167 \u96e8\u5929\u7684\u5c3e\u5df4 \uff0c\u5728\u6b64\u4e0d\u505a\u8d58\u8ff0\u3002 \u4e00\u4e9b\u6027\u8d28 \u00b6 \u5728\u6b64\u7b80\u8981\u63d0\u53ca\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u4e00\u4e9b\u8981\u70b9\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u4e3b\u8981\u7528\u4e8e\u6c42\u89e3\u6811\u4e0a\u95ee\u9898\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u53ea\u80fd\u591f\u5408\u5e76\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u4e2d\uff0c\u666e\u901a\u7ebf\u6bb5\u6811\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\u5c06\u7ebf\u6bb5\u6811\u6807\u8bb0\u6c38\u4e45\u5316\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u3002 \u590d\u6742\u5ea6\u8bc1\u660e \u00b6 \u7ea6\u5b9a\uff0c\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u8303\u56f4\u4e3a N N \uff0c\u4fee\u6539\u6b21\u6570\u4e3a M M \u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(M\\log N) O(M\\log N) \u3002\u56e0\u4e3a\u5bf9\u4e8e\u7a7a\u6811\u7684\u5355\u6b21\u4fee\u6539\uff0c\u603b\u4f1a\u589e\u52a0 O(\\log N) O(\\log N) \u4e2a\u8282\u70b9\uff1b\u5bf9\u4e8e\u975e\u7a7a\u6811\u7684\u5355\u6b21\u4fee\u6539\uff0c\u81f3\u591a\u4f1a\u589e\u52a0 O(\\log N) O(\\log N) \u4e2a\u8282\u70b9\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(M\\log N) O(M\\log N) \u3002\u56e0\u4e3a\u5728\u4e00\u6b21\u5408\u5e76\u64cd\u4f5c\u540e\uff0c\u4ea7\u751f\u7684\u65b0\u6811\u603b\u662f\u76f8\u6bd4\u6bd4\u539f\u5148\u4e24\u68f5\u6811\u88ab\u5220\u53bb\u4e86\u4e00\u4e9b\u8282\u70b9\uff1b\u8fd9\u4e9b\u88ab\u5220\u53bb\u7684\u8282\u70b9\u6bcf\u4e2a\u8282\u70b9\u4f1a\u8d21\u732e O(1) O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6574\u4e2a\u5408\u5e76\u8fc7\u7a0b\u81f3\u591a\u5220\u9664\u4e86 O(M\\log N) O(M\\log N) \u4e2a\u8282\u70b9\uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(M\\log N) O(M\\log N) \u3002 \u6280\u5de7 \u00b6 \u5904\u7406\u6811\u4e0a\u95ee\u9898\u65f6\uff0c\u6709\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u5c06\u7a7a\u95f4\u964d\u81f3 O(N) O(N) \u7684 trick\uff0c\u5373\u5783\u573e\u56de\u6536\u3002\u6bcf\u6b21\u5408\u5e76\u4f1a\u5220\u9664\u4e00\u4e9b\u8282\u70b9\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5c06\u8fd9\u4e9b\u5e9f\u5f03\u7684\u7a7a\u95f4\u5b58\u50a8\u4e0b\u6765\uff0c\u5728\u521b\u5efa\u65b0\u8282\u70b9\u65f6\u4f18\u5148\u4f7f\u7528\u8fd9\u4e9b\u5e9f\u5f03\u7a7a\u95f4\u3002 \u9057\u61be\u7684\u662f\uff0c\u8fd9\u79cd\u505a\u6cd5\u662f\u9519\u8bef\u7684\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a O(M\\log N) O(M\\log N) \u3002\u8003\u8651\u4e0b\u56fe\uff1a \u81ea\u7136\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f18\u5148\u641c\u7d22\u91cd\u513f\u5b50\u3002\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u5728 O(N) O(N) \u5de6\u53f3\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u8fd8\u53ef\u4ee5\u5904\u7406 01 Trie\u3001\u4f18\u5316\u6811\u5f62 DP\u3002\u5177\u4f53\u505a\u6cd5\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u9898\u3002 \u4f8b\u9898\u9009\u505a \u00b6 \u8054\u5408\u7701\u9009 2020 \u6811 \u00b6 \u7ed9\u4f60\u4e00\u9897 n n \u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811 T T \uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u6743\u503c v_i v_i \u3002\u5b9a\u4e49 d(i,j) d(i,j) \u4e3a i i \u5230 j j \u7684\u8ddd\u79bb\uff0c val_i=\\bigoplus\\limits_{j\\in tree_i}(v_j+d(i,j)) val_i=\\bigoplus\\limits_{j\\in tree_i}(v_j+d(i,j)) \uff0c\u6c42 \\sum\\limits_{i=1}^nval_i \\sum\\limits_{i=1}^nval_i \u3002 \u9898\u89e3 \u8003\u8651 val_i val_i \u4e0e val_j val_j \uff08 j\\in son_i j\\in son_i \uff09\u7684\u5173\u7cfb\u3002 \u8bbe s_i s_i \u8868\u793a v_j+d(i,j) v_j+d(i,j) \uff08 j\\in tree_i j\\in tree_i \uff09\uff0c\u5219 s_i=\\left(\\bigcup\\limits_{j\\in son_i}\\bigcup\\limits_{k\\in s_j}\\{k+1\\}\\right)\\bigcup\\{v_i\\} s_i=\\left(\\bigcup\\limits_{j\\in son_i}\\bigcup\\limits_{k\\in s_j}\\{k+1\\}\\right)\\bigcup\\{v_i\\} \u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6240\u6709\u513f\u5b50\u4e2d\u7684\u5143\u7d20\u53ea\u589e\u52a0\u4e86 1 1 \u3002 \u5168\u5c40\u52a0 1 1 \u53ef\u4ee5\u65b9\u4fbf\u5730\u7528 01 Trie \u7ef4\u62a4\uff0c\u800c 01 Trie \u548c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5177\u6709\u76f8\u540c\u7684\u6027\u8d28\uff0c\u4e8e\u662f\u5e76\u96c6\u64cd\u4f5c\u53ef\u4ee5\u4eff\u7167\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u5408\u5e76 01 Trie\u3002 NOI2020 \u547d\u8fd0 \u00b6 \u7ed9\u5b9a\u6709\u6839\u6811\u4e0a\u82e5\u5e72\u7ec4\u70b9\u5bf9 (u,v) (u,v) \uff0c\u4e14 u u \u662f v v \u7684\u7956\u5148\u3002\u7ed9\u6bcf\u6761\u8fb9 01 \u67d3\u8272\uff0c\u6c42\u4fdd\u8bc1\u6bcf\u7ec4 u,v u,v \u4e4b\u95f4\u8def\u5f84\u4e0a\u90fd\u5b58\u5728\u81f3\u5c11\u4e00\u6761 1 \u8fb9\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3 \u8bbe dp_{i,j} dp_{i,j} \u8868\u793a\u4ee5\u5728 i i \u7684\u5b50\u6811\u4e2d\uff0c\u6240\u6709\u672a\u88ab\u8986\u76d6\u7684\u70b9\u5bf9\u4e2d u u \u7684\u6df1\u5ea6\u6700\u5927\u503c\u4e3a j j \u65f6\u7684\u65b9\u6848\u6570\u3002\u5219\u65b0\u52a0\u5165\u4e00\u68f5\u5b50\u6811 v v \u65f6\uff0c\u6709\uff1a dp^\\prime_{i,j}=dp_{i,j}\\cdot\\sum\\limits_{k=0}^{dep_i}dp_{v,k}+dp_{i,j}\\cdot\\sum\\limits_{k=0}^jdp_{v,k}+dp_{v,j}\\cdot \\sum\\limits_{k=0}^{j-1}dp_{i,k} dp^\\prime_{i,j}=dp_{i,j}\\cdot\\sum\\limits_{k=0}^{dep_i}dp_{v,k}+dp_{i,j}\\cdot\\sum\\limits_{k=0}^jdp_{v,k}+dp_{v,j}\\cdot \\sum\\limits_{k=0}^{j-1}dp_{i,k} \u76f4\u63a5\u8f6c\u79fb\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u7684\u3002\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u5b58\u50a8 dp dp \u6570\u7ec4\u3002\u5408\u5e76\u65f6\uff0c \\sum\\limits_{k=0}^{dep_i}dp_{v,k} \\sum\\limits_{k=0}^{dep_i}dp_{v,k} \u53ef\u4ee5\u4e8b\u5148\u67e5\u51fa\uff1b\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\u5728\u4e0b\u63a8\u524d\u67e5\u8be2\u5de6\u5b50\u6811\u3002\u4e8e\u662f\u8be5\u9898\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u51b3\u4e86\u3002","title":"\u7ebf\u6bb5\u6811\u5408\u5e76"},{"location":"data_structure/sgt_merge/#_1","text":"\u7ebf\u6bb5\u6811\u5408\u5e76\u662f\u4e00\u79cd\u5e7f\u6cdb\u8fd0\u7528\u7684\u79d1\u6280\uff0c\u662f\u8fd1\u5e74\u6765\u7684\u70ed\u95e8\u8003\u70b9\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5408\u5e76\u4e24\u68f5\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u57fa\u672c\u505a\u6cd5\u53ef\u4ee5\u53c2\u7167 \u96e8\u5929\u7684\u5c3e\u5df4 \uff0c\u5728\u6b64\u4e0d\u505a\u8d58\u8ff0\u3002","title":"\u7ebf\u6bb5\u6811\u5408\u5e76"},{"location":"data_structure/sgt_merge/#_2","text":"\u5728\u6b64\u7b80\u8981\u63d0\u53ca\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u4e00\u4e9b\u8981\u70b9\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u4e3b\u8981\u7528\u4e8e\u6c42\u89e3\u6811\u4e0a\u95ee\u9898\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u53ea\u80fd\u591f\u5408\u5e76\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u4e2d\uff0c\u666e\u901a\u7ebf\u6bb5\u6811\u53ea\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\u5c06\u7ebf\u6bb5\u6811\u6807\u8bb0\u6c38\u4e45\u5316\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u3002","title":"\u4e00\u4e9b\u6027\u8d28"},{"location":"data_structure/sgt_merge/#_3","text":"\u7ea6\u5b9a\uff0c\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u8303\u56f4\u4e3a N N \uff0c\u4fee\u6539\u6b21\u6570\u4e3a M M \u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(M\\log N) O(M\\log N) \u3002\u56e0\u4e3a\u5bf9\u4e8e\u7a7a\u6811\u7684\u5355\u6b21\u4fee\u6539\uff0c\u603b\u4f1a\u589e\u52a0 O(\\log N) O(\\log N) \u4e2a\u8282\u70b9\uff1b\u5bf9\u4e8e\u975e\u7a7a\u6811\u7684\u5355\u6b21\u4fee\u6539\uff0c\u81f3\u591a\u4f1a\u589e\u52a0 O(\\log N) O(\\log N) \u4e2a\u8282\u70b9\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(M\\log N) O(M\\log N) \u3002\u56e0\u4e3a\u5728\u4e00\u6b21\u5408\u5e76\u64cd\u4f5c\u540e\uff0c\u4ea7\u751f\u7684\u65b0\u6811\u603b\u662f\u76f8\u6bd4\u6bd4\u539f\u5148\u4e24\u68f5\u6811\u88ab\u5220\u53bb\u4e86\u4e00\u4e9b\u8282\u70b9\uff1b\u8fd9\u4e9b\u88ab\u5220\u53bb\u7684\u8282\u70b9\u6bcf\u4e2a\u8282\u70b9\u4f1a\u8d21\u732e O(1) O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6574\u4e2a\u5408\u5e76\u8fc7\u7a0b\u81f3\u591a\u5220\u9664\u4e86 O(M\\log N) O(M\\log N) \u4e2a\u8282\u70b9\uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(M\\log N) O(M\\log N) \u3002","title":"\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"data_structure/sgt_merge/#_4","text":"\u5904\u7406\u6811\u4e0a\u95ee\u9898\u65f6\uff0c\u6709\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u5c06\u7a7a\u95f4\u964d\u81f3 O(N) O(N) \u7684 trick\uff0c\u5373\u5783\u573e\u56de\u6536\u3002\u6bcf\u6b21\u5408\u5e76\u4f1a\u5220\u9664\u4e00\u4e9b\u8282\u70b9\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5c06\u8fd9\u4e9b\u5e9f\u5f03\u7684\u7a7a\u95f4\u5b58\u50a8\u4e0b\u6765\uff0c\u5728\u521b\u5efa\u65b0\u8282\u70b9\u65f6\u4f18\u5148\u4f7f\u7528\u8fd9\u4e9b\u5e9f\u5f03\u7a7a\u95f4\u3002 \u9057\u61be\u7684\u662f\uff0c\u8fd9\u79cd\u505a\u6cd5\u662f\u9519\u8bef\u7684\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a O(M\\log N) O(M\\log N) \u3002\u8003\u8651\u4e0b\u56fe\uff1a \u81ea\u7136\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f18\u5148\u641c\u7d22\u91cd\u513f\u5b50\u3002\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u5728 O(N) O(N) \u5de6\u53f3\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u8fd8\u53ef\u4ee5\u5904\u7406 01 Trie\u3001\u4f18\u5316\u6811\u5f62 DP\u3002\u5177\u4f53\u505a\u6cd5\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u9898\u3002","title":"\u6280\u5de7"},{"location":"data_structure/sgt_merge/#_5","text":"","title":"\u4f8b\u9898\u9009\u505a"},{"location":"data_structure/sgt_merge/#2020","text":"\u7ed9\u4f60\u4e00\u9897 n n \u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811 T T \uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u6743\u503c v_i v_i \u3002\u5b9a\u4e49 d(i,j) d(i,j) \u4e3a i i \u5230 j j \u7684\u8ddd\u79bb\uff0c val_i=\\bigoplus\\limits_{j\\in tree_i}(v_j+d(i,j)) val_i=\\bigoplus\\limits_{j\\in tree_i}(v_j+d(i,j)) \uff0c\u6c42 \\sum\\limits_{i=1}^nval_i \\sum\\limits_{i=1}^nval_i \u3002 \u9898\u89e3 \u8003\u8651 val_i val_i \u4e0e val_j val_j \uff08 j\\in son_i j\\in son_i \uff09\u7684\u5173\u7cfb\u3002 \u8bbe s_i s_i \u8868\u793a v_j+d(i,j) v_j+d(i,j) \uff08 j\\in tree_i j\\in tree_i \uff09\uff0c\u5219 s_i=\\left(\\bigcup\\limits_{j\\in son_i}\\bigcup\\limits_{k\\in s_j}\\{k+1\\}\\right)\\bigcup\\{v_i\\} s_i=\\left(\\bigcup\\limits_{j\\in son_i}\\bigcup\\limits_{k\\in s_j}\\{k+1\\}\\right)\\bigcup\\{v_i\\} \u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6240\u6709\u513f\u5b50\u4e2d\u7684\u5143\u7d20\u53ea\u589e\u52a0\u4e86 1 1 \u3002 \u5168\u5c40\u52a0 1 1 \u53ef\u4ee5\u65b9\u4fbf\u5730\u7528 01 Trie \u7ef4\u62a4\uff0c\u800c 01 Trie \u548c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5177\u6709\u76f8\u540c\u7684\u6027\u8d28\uff0c\u4e8e\u662f\u5e76\u96c6\u64cd\u4f5c\u53ef\u4ee5\u4eff\u7167\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u5408\u5e76 01 Trie\u3002","title":"\u8054\u5408\u7701\u9009 2020 \u6811"},{"location":"data_structure/sgt_merge/#noi2020","text":"\u7ed9\u5b9a\u6709\u6839\u6811\u4e0a\u82e5\u5e72\u7ec4\u70b9\u5bf9 (u,v) (u,v) \uff0c\u4e14 u u \u662f v v \u7684\u7956\u5148\u3002\u7ed9\u6bcf\u6761\u8fb9 01 \u67d3\u8272\uff0c\u6c42\u4fdd\u8bc1\u6bcf\u7ec4 u,v u,v \u4e4b\u95f4\u8def\u5f84\u4e0a\u90fd\u5b58\u5728\u81f3\u5c11\u4e00\u6761 1 \u8fb9\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3 \u8bbe dp_{i,j} dp_{i,j} \u8868\u793a\u4ee5\u5728 i i \u7684\u5b50\u6811\u4e2d\uff0c\u6240\u6709\u672a\u88ab\u8986\u76d6\u7684\u70b9\u5bf9\u4e2d u u \u7684\u6df1\u5ea6\u6700\u5927\u503c\u4e3a j j \u65f6\u7684\u65b9\u6848\u6570\u3002\u5219\u65b0\u52a0\u5165\u4e00\u68f5\u5b50\u6811 v v \u65f6\uff0c\u6709\uff1a dp^\\prime_{i,j}=dp_{i,j}\\cdot\\sum\\limits_{k=0}^{dep_i}dp_{v,k}+dp_{i,j}\\cdot\\sum\\limits_{k=0}^jdp_{v,k}+dp_{v,j}\\cdot \\sum\\limits_{k=0}^{j-1}dp_{i,k} dp^\\prime_{i,j}=dp_{i,j}\\cdot\\sum\\limits_{k=0}^{dep_i}dp_{v,k}+dp_{i,j}\\cdot\\sum\\limits_{k=0}^jdp_{v,k}+dp_{v,j}\\cdot \\sum\\limits_{k=0}^{j-1}dp_{i,k} \u76f4\u63a5\u8f6c\u79fb\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u7684\u3002\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u5b58\u50a8 dp dp \u6570\u7ec4\u3002\u5408\u5e76\u65f6\uff0c \\sum\\limits_{k=0}^{dep_i}dp_{v,k} \\sum\\limits_{k=0}^{dep_i}dp_{v,k} \u53ef\u4ee5\u4e8b\u5148\u67e5\u51fa\uff1b\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\u5728\u4e0b\u63a8\u524d\u67e5\u8be2\u5de6\u5b50\u6811\u3002\u4e8e\u662f\u8be5\u9898\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u51b3\u4e86\u3002","title":"NOI2020 \u547d\u8fd0"},{"location":"discrete_mathematics/stirling/","text":"\u65af\u7279\u6797\u6570\u4e0e\u4e0a\u5347\u5e42\u3001\u4e0b\u964d\u5e42 \u00b6 \u65af\u7279\u6797\u6570\u4e0e\u4e8c\u9879\u5f0f\u7cfb\u6570\u5bc6\u5207\u76f8\u5173\uff0c\u662f\u79bb\u6563\u6570\u5b66\u7684\u91cd\u8981\u5185\u5bb9\u3002 \u65af\u7279\u6797\u6570\u5206\u4e3a\u4e24\u7c7b\uff0c\u5206\u522b\u662f\u201c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u201d\u548c\u201c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u201d\u3002\u867d\u7136\u88ab\u79f0\u4f5c\u201c\u7b2c\u4e8c\u7c7b\u201d\uff0c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u5374\u6bd4\u7b2c\u4e00\u7c7b\u7684\u66f4\u5e38\u7528\uff0c\u4e5f\u5728\u65af\u7279\u6797\u7684\u76f8\u5173\u8457\u4f5c\u548c\u5177\u4f53\u6570\u5b66\u4e2d\u88ab\u9996\u5148\u63cf\u8ff0\uff1b\u56e0\u6b64\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\u4eec\u4e5f\u5148\u4ecb\u7ecd\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u3002 \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \u00b6 \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u53c8\u79f0\u4f5c\u65af\u7279\u6797\u5b50\u96c6\u6570\uff0c\u7528 \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \u8868\u793a\uff0c\u8bfb\u4f5c\u201c n n \u5b50\u96c6 m m \u201d\u3002\u5b83\u7684\u7ec4\u5408\u542b\u4e49\u662f\uff0c\u5c06 n n \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u5212\u5206\u4e3a m m \u4e2a\u65e0\u6807\u53f7\u96c6\u5408\u7684\u65b9\u6848\u6570\u3002\u5b66\u4e60 \u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u3001\u6307\u6570\u51fd\u6570\u548c\u6b27\u62c9\u53d8\u6362 \u5e94\u8be5\u6709\u52a9\u4e8e\u80fd\u627e\u5230\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u548c\u6307\u6570\u51fd\u6570\u7684\u76f8\u5173\u6027\uff08\u65af\u7279\u6797\u6570\u9650\u5b9a\u4e86\u5212\u5206\u5b50\u96c6\u7684\u4e2a\u6570\u800c\u6307\u6570\u51fd\u6570\u6ca1\u6709\uff09\u3002 \u53ef\u4ee5\u8ba4\u4e3a\uff0c\u5bf9\u4e8e n<m n<m \uff0c\u6709 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=0 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=0 \u3002 m=0 m=0 \u7684\u60c5\u51b5\u6bd4\u8f83\u7279\u6b8a\u3002\u4e00\u822c\u8ba4\u4e3a\uff0c\u5c06\u7a7a\u96c6\u5212\u5206\u4e3a 0 0 \u4e2a\u975e\u7a7a\u96c6\u5408\u662f\u53ef\u884c\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49 \\begin{Bmatrix}0\\\\0\\end{Bmatrix}=1 \\begin{Bmatrix}0\\\\0\\end{Bmatrix}=1 \uff1b\u800c\u5bf9\u4e8e\u4efb\u610f n>0 n>0 \uff0c\u90fd\u6709 \\begin{Bmatrix}n\\\\0\\end{Bmatrix}=0 \\begin{Bmatrix}n\\\\0\\end{Bmatrix}=0 \u3002 \u548c\u4e8c\u9879\u5f0f\u7cfb\u6570\u7c7b\u4f3c\uff0c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4e5f\u6709\u9012\u63a8\u516c\u5f0f \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix},n>0 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix},n>0 \u540c\u65f6\uff0c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4e5f\u6709\u7b80\u6d01\u7684\u901a\u9879\u516c\u5f0f\uff0c\u5373 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=\\sum\\limits_{i=0}^m\\dfrac{(-1)^{m-i}i^n}{i!(m-i)!} \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=\\sum\\limits_{i=0}^m\\dfrac{(-1)^{m-i}i^n}{i!(m-i)!} \u8003\u8651\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8bc1\u660e\u3002\u8bbe G_i G_i \u8868\u793a n n \u4e2a\u6709\u6807\u53f7\u5143\u7d20\uff0c\u653e\u7f6e\u5230 i i \u4e2a\u6709\u6807\u53f7\u96c6\u5408\u7684\u65b9\u6848\u6570\uff1b F_i F_i \u8868\u793a n n \u4e2a\u6709\u6807\u53f7\u5143\u7d20\uff0c\u653e\u7f6e\u5230 i i \u4e2a\u6709\u6807\u53f7\u975e\u7a7a\u96c6\u5408\u7684\u65b9\u6848\u6570\u3002\u4e0d\u96be\u5f97\u5230 G_i=i^n=\\sum\\limits_{j=0}^i\\binom{i}{j}F_j G_i=i^n=\\sum\\limits_{j=0}^i\\binom{i}{j}F_j \u6839\u636e\u4e8c\u9879\u5f0f\u53cd\u6f14 F_i=\\sum\\limits_{j=0}^{i}(-1)^{i-j}\\binom{i}{j}j^n F_i=\\sum\\limits_{j=0}^{i}(-1)^{i-j}\\binom{i}{j}j^n \u8003\u8651\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4e0e F_i F_i \u7684\u5173\u7cfb \\begin{Bmatrix}n\\\\i\\end{Bmatrix}=\\dfrac{F_i}{i!} \\begin{Bmatrix}n\\\\i\\end{Bmatrix}=\\dfrac{F_i}{i!} \u8054\u7acb\u5f97\u8bc1\u3002 \u540c\u4e00\u884c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97 \u00b6 \u201c\u540c\u4e00\u884c\u201d\u7684\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u6307\u7684\u662f\uff0c\u6709\u7740\u4e0d\u540c\u7684 i i \uff0c\u76f8\u540c\u7684 n n \u7684\u4e00\u7cfb\u5217 \\begin{Bmatrix}n\\\\i\\end{Bmatrix} \\begin{Bmatrix}n\\\\i\\end{Bmatrix} \u3002\u6c42\u51fa\u540c\u4e00\u884c\u7684\u6240\u6709\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u5c31\u662f\u5bf9 i=0..n i=0..n \u6c42\u51fa\u4e86\u5c06 n n \u4e2a\u4e0d\u540c\u5143\u7d20\u5212\u5206\u4e3a i i \u4e2a\u975e\u7a7a\u96c6\u7684\u65b9\u6848\u6570\u3002 \u6839\u636e\u4e0a\u9762\u7ed9\u51fa\u7684\u901a\u9879\u516c\u5f0f\uff0c\u5377\u79ef\u8ba1\u7b97\u5373\u53ef\u3002 int main (){ scanf ( \"%d\" , & n ); fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ 0 ]), ifact [ n ] = ( ifact [ n ] % mod + mod ) % mod ; for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; fstdlib :: poly f ( n + 1 ), g ( n + 1 ); for ( int i = 0 ; i <= n ; ++ i ) g [ i ] = ( i & 1 ? mod - 1l l : 1l l ) * ifact [ i ] % mod , f [ i ] = ( ll ) qpow ( i , n ) * ifact [ i ] % mod ; f *= g , f . resize ( n + 1 ); for ( int i = 0 ; i <= n ; ++ i ) printf ( \"%d \" , f [ i ]); return 0 ; } \u540c\u4e00\u5217\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97 \u00b6 \u5373\u5bf9 i=0..n i=0..n \uff0c\u6c42\u51fa \\begin{Bmatrix}i\\\\k\\end{Bmatrix} \\begin{Bmatrix}i\\\\k\\end{Bmatrix} \u3002\u6709\u4e24\u79cd\u5e38\u7528\u7684\u5feb\u901f\u8ba1\u7b97\u65b9\u6cd5\u3002 \u65b9\u6cd5 1. \u5229\u7528\u9012\u63a8\u516c\u5f0f \u00b6 \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u901a\u9879\u516c\u5f0f\u4e0d\u9002\u5408\u8ba1\u7b97\u5217\uff0c\u6211\u4eec\u8003\u8651\u5229\u7528\u9012\u63a8\u516c\u5f0f\u5199\u51fa\u5b83\u7684\u751f\u6210\u51fd\u6570\u3002\u8bbe F_k(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}i\\\\k\\end{Bmatrix}x^i F_k(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}i\\\\k\\end{Bmatrix}x^i \uff0c\u5219 F_k(x)=kxF_k(x)+xF_{k-1}(x) F_k(x)=kxF_k(x)+xF_{k-1}(x) \u7efc\u5408\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u5b9a\u4e49\u89e3\u5f97 F_k(x)=\\begin{cases}\\dfrac{x}{1-kx}F_{k-1}(x)&\\text{if }k>0\\\\1&\\text{else}\\end{cases} F_k(x)=\\begin{cases}\\dfrac{x}{1-kx}F_{k-1}(x)&\\text{if }k>0\\\\1&\\text{else}\\end{cases} \u5373 F_k(x)=\\prod\\limits_{i=1}^k\\dfrac{x}{1-ix} F_k(x)=\\prod\\limits_{i=1}^k\\dfrac{x}{1-ix} \u5229\u7528\u591a\u9879\u5f0f\u5206\u6cbb\u4e58\u548c\u591a\u9879\u5f0f\u4e58\u6cd5\u9006\u5373\u53ef\u5728 O(k\\log k\\log n) O(k\\log k\\log n) \u7684\u65f6\u95f4\u5185\u89e3\u51fa F_k(x) F_k(x) \u3002 int main (){ scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= k ; ++ i ) mask . emplace_back ( std :: vector < int > { 1 , mod - i }); while (( int ) mask . size () >= 2 ){ while (( int ) mask . size () >= 2 ){ tmp . push_back ( mask [ mask . size () - 1 ] * mask [ mask . size () - 2 ]); mask . pop_back (), mask . pop_back (); } if ( ! mask . empty ()) tmp . push_back ( mask [ 0 ]), mask . pop_back (); std :: swap ( mask , tmp ); } fstdlib :: poly f ( mask [ 0 ]. inv ( n + 1 )); for ( int i = f . size () - 1 ; i >= k ; -- i ) f [ i ] = f [ i - k ]; for ( int i = std :: min ( k , ( int ) f . size ()) - 1 ; i >= 0 ; -- i ) f [ i ] = 0 ; for ( int i = 0 ; i < ( int ) f . size (); ++ i ) printf ( \"%d \" , f [ i ]); return 0 ; } \u65b9\u6cd5 2. \u5229\u7528\u6307\u6570\u578b\u751f\u6210\u51fd\u6570 \u00b6 \u4e00\u4e2a\u76d2\u5b50\u88c5 i i \u4e2a\u7269\u54c1\u7684\u65b9\u6848\u662f \\begin{cases}1&\\text{if }i>0\\\\0&\\text{else}\\end{cases} \\begin{cases}1&\\text{if }i>0\\\\0&\\text{else}\\end{cases} \u3002\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u5b83\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u4e3a F(x)=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i!} F(x)=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i!} \u3002\u7ecf\u8fc7\u4e4b\u524d\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u660e\u767d F^k(x) F^k(x) \u5c31\u662f i i \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u653e\u5230 k k \u4e2a\u6709\u6807\u53f7\u76d2\u5b50\u91cc\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff0c \\exp F(x)=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{F^i(x)}{i!} \\exp F(x)=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{F^i(x)}{i!} \u5c31\u662f i i \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u653e\u5230\u4efb\u610f\u591a\u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u91cc\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08\u6307\u6570\u51fd\u6570\u901a\u8fc7\u6bcf\u9879\u9664\u4ee5\u4e00\u4e2a i! i! \u53bb\u6389\u4e86\u76d2\u5b50\u7684\u6807\u53f7\uff09\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u5f88\u591a\u201c\u6709\u6807\u53f7\u201d\u201c\u65e0\u6807\u53f7\u201d\u7684\u5185\u5bb9\uff0c\u6ce8\u610f\u8fa8\u6790\u3002 \u90a3\u4e48 \\begin{Bmatrix}i\\\\k\\end{Bmatrix}=\\dfrac{\\left[\\dfrac{x^i}{i!}\\right]F^k(x)}{k!} \\begin{Bmatrix}i\\\\k\\end{Bmatrix}=\\dfrac{\\left[\\dfrac{x^i}{i!}\\right]F^k(x)}{k!} \uff0c O(n\\log n) O(n\\log n) \u8ba1\u7b97\u591a\u9879\u5f0f\u5e42\u5373\u53ef\u3002\u5b9e\u9645\u4f7f\u7528\u65f6\u6bd4 O(n\\log^2n) O(n\\log^2n) \u7684\u65b9\u6cd5 1 \u8981\u6162\u3002 int main (){ scanf ( \"%d%d\" , & n , & k ); fstdlib :: poly f ( n + 1 ); fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; for ( int i = 1 ; i <= n ; ++ i ) f [ i ] = qpow ( fact [ i ], mod - 2 ); f = fstdlib :: exp ( fstdlib :: log ( f >> 1 ) * k ) << k , f . resize ( n + 1 ); int inv = qpow ( fact [ k ], mod - 2 ); for ( int i = 0 ; i <= n ; ++ i ) printf ( \"%lld \" , ( ll ) f [ i ] * fact [ i ] % mod * inv % mod ); return 0 ; } \u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570 \u00b6 \u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u53c8\u79f0\u4f5c\u65af\u7279\u6797\u8f6e\u6362\u6570\uff0c\u7528 \\begin{bmatrix}n\\\\m\\end{bmatrix} \\begin{bmatrix}n\\\\m\\end{bmatrix} \u8868\u793a\uff0c\u8bfb\u4f5c\u201c n n \u8f6e\u6362 m m \u201d\u3002\u5b83\u7684\u7ec4\u5408\u542b\u4e49\u662f\uff0c\u5c06 n n \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u5206\u4e3a m m \u4e2a\u65e0\u6807\u53f7\u8f6e\u6362\u7684\u65b9\u6848\u6570\u3002 \u4e00\u4e2a\u8f6e\u6362\u5c31\u662f\u4e00\u4e2a\u9996\u5c3e\u76f8\u63a5\u7684\u73af\u5f62\u6392\u5217\u3002\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u8f6e\u6362 [A,B,C,D] [A,B,C,D] \uff0c\u5e76\u4e14\u6211\u4eec\u8ba4\u4e3a [A,B,C,D]=[B,C,D,A]=[C,D,A,B]=[D,A,B,C] [A,B,C,D]=[B,C,D,A]=[C,D,A,B]=[D,A,B,C] \uff0c\u5373\uff0c\u4e24\u4e2a\u53ef\u4ee5\u901a\u8fc7\u65cb\u8f6c\u800c\u4e92\u76f8\u5f97\u5230\u7684\u8f6e\u6362\u662f\u7b49\u4ef7\u7684\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u8ba4\u4e3a\u4e24\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8f6c\u800c\u76f8\u4e92\u5f97\u5230\u7684\u8f6e\u6362\u7b49\u4ef7\uff0c\u5373 [A,B,C,D]\\neq[D,C,B,A] [A,B,C,D]\\neq[D,C,B,A] \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e n>0 n>0 \u6709 \\begin{bmatrix}n\\\\1\\end{bmatrix}=(n-1)! \\begin{bmatrix}n\\\\1\\end{bmatrix}=(n-1)! \uff1b\u8fdb\u4e00\u6b65\uff0c\u4e5f\u6709 \\begin{bmatrix}n\\\\m\\end{bmatrix}\\geq \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \\begin{bmatrix}n\\\\m\\end{bmatrix}\\geq \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \u3002 \u8f6e\u6362\u548c\u6392\u5217\u4e00\u4e00\u5bf9\u5e94\uff0c\u5982\u679c\u5bf9\u540c\u4e00\u884c\u7684\u6240\u6709\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u6c42\u548c\uff0c\u6211\u4eec\u4e5f\u80fd\u5f97\u5230\u6392\u5217\u7684\u603b\u6570 \\sum\\limits_{i=0}^k\\begin{bmatrix}n\\\\i\\end{bmatrix}=n! \\sum\\limits_{i=0}^k\\begin{bmatrix}n\\\\i\\end{bmatrix}=n! \u3002\u8fd9\u4e00\u70b9\u53ef\u4ee5\u53c2\u8003 \u5177\u4f53\u6570\u5b66 \u3002 \u7c7b\u4f3c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5199\u51fa\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u9012\u63a8\u516c\u5f0f \\begin{bmatrix}n\\\\m\\end{bmatrix}=(n-1)\\begin{bmatrix}n-1\\\\m\\end{bmatrix}+\\begin{bmatrix}n-1\\\\m-1\\end{bmatrix},n>0 \\begin{bmatrix}n\\\\m\\end{bmatrix}=(n-1)\\begin{bmatrix}n-1\\\\m\\end{bmatrix}+\\begin{bmatrix}n-1\\\\m-1\\end{bmatrix},n>0 \u540c\u4e00\u884c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97 \u00b6 \u7c7b\u4f3c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u6211\u4eec\u6784\u9020\u540c\u884c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u751f\u6210\u51fd\u6570\uff0c\u5373 F_n(x)=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i F_n(x)=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i \u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u4e0d\u96be\u5199\u51fa F_n(x)=(n-1)F_{n-1}(x)+xF_{n-1}(x) F_n(x)=(n-1)F_{n-1}(x)+xF_{n-1}(x) \u4e8e\u662f F_n(x)=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!} F_n(x)=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!} \u8fd9\u5176\u5b9e\u662f x x \u7684 n n \u6b21\u4e0a\u5347\u9636\u4e58\u5e42\uff0c\u8bb0\u505a x^{\\overline n} x^{\\overline n} \u3002\u8fd9\u4e2a\u4e1c\u897f\u81ea\u7136\u662f\u53ef\u4ee5\u66b4\u529b\u5206\u6cbb\u4e58 O(n\\log^2n) O(n\\log^2n) \u6c42\u51fa\u7684\uff0c\u4f46\u7528\u4e0a\u5347\u5e42\u76f8\u5173\u505a\u6cd5\u53ef\u4ee5 O(n\\log n) O(n\\log n) \u6c42\u51fa\u3002\u5177\u4f53\u89c1\u4e0b\u9762\u6709\u5173\u9636\u4e58\u5e42\u7684\u90e8\u5206\u3002 \u540c\u4e00\u5217\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97 \u00b6 \u4eff\u7167\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u6ce8\u610f\uff0c\u7531\u4e8e\u9012\u63a8\u516c\u5f0f\u548c\u884c\u6709\u5173\uff0c\u6211\u4eec\u4e0d\u80fd\u5229\u7528\u9012\u63a8\u516c\u5f0f\u8ba1\u7b97\u540c\u5217\u7684\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u3002 \u663e\u7136\uff0c\u5355\u4e2a\u8f6e\u6362\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u4e3a F(x)=\\sum\\limits_{i=1}^n\\dfrac{(i-1)!x^i}{i!}=\\sum\\limits_{i=1}^n\\dfrac{x^i}{i} F(x)=\\sum\\limits_{i=1}^n\\dfrac{(i-1)!x^i}{i!}=\\sum\\limits_{i=1}^n\\dfrac{x^i}{i} \u5b83\u7684 k k \u6b21\u5e42\u5c31\u662f \\begin{bmatrix}i\\\\k\\end{bmatrix} \\begin{bmatrix}i\\\\k\\end{bmatrix} \u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff0c O(n\\log n) O(n\\log n) \u8ba1\u7b97\u5373\u53ef\u3002 int main (){ scanf ( \"%d%d\" , & n , & k ); fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; fstdlib :: poly f ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) f [ i ] = ( ll ) fact [ i - 1 ] * ifact [ i ] % mod ; f = fstdlib :: exp ( fstdlib :: log ( f >> 1 ) * k ) << k , f . resize ( n + 1 ); for ( int i = 0 ; i <= n ; ++ i ) printf ( \"%lld \" , ( ll ) f [ i ] * fact [ i ] % mod * ifact [ k ] % mod ); return 0 ; } \u4e0a\u5347\u9636\u4e58\u5e42\u548c\u4e0b\u964d\u9636\u4e58\u5e42 \u00b6 \u4e4b\u524d\u6211\u4eec\u63d0\u51fa\u4e86\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u548c\u4e0a\u5347\u9636\u4e58\u5e42\u7684\u5173\u7cfb\uff0c\u5373 x x \u7684 n n \u6b21\u4e0a\u5347\u9636\u4e58\u5e42\u6b63\u662f\u7b2c n n \u884c\u7684\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u3002 F_n(x)=x^{\\overline n} F_n(x)=x^{\\overline n} \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ecb\u7ecd\u4e0a\u5347\u9636\u4e58\u5e42\u548c\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u4e0b\u964d\u9636\u4e58\u5e42\u3002 \u4e00\u822c\u7684\uff0c\u6211\u4eec\u5206\u522b\u7528 x^{\\overline n} x^{\\overline n} \u548c x^{\\underline n} x^{\\underline n} \u6765\u8868\u793a x x \u7684 n n \u6b21\u4e0a\u5347\u9636\u4e58\u5e42\u548c\u4e0b\u964d\u9636\u4e58\u5e42\u3002\u5b83\u4eec\u53ef\u4ee5\u88ab\u8fd9\u6837\u63cf\u8ff0 x^{\\overline n}=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!},x^{\\underline n}=\\prod\\limits_{i=0}^{n-1}(x-i)=\\dfrac{x!}{(x-n)!} x^{\\overline n}=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!},x^{\\underline n}=\\prod\\limits_{i=0}^{n-1}(x-i)=\\dfrac{x!}{(x-n)!} \u76f4\u89c2\u4e0a\u770b\uff0c\u4e0a\u5347\u5e42\u548c\u4e0b\u964d\u5e42\u662f\u5bf9\u79f0\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5199\u51fa \\begin{aligned}(-x)^{\\overline n}&=\\prod\\limits_{i=0}^{n-1}(-x+i)\\\\&=(-1)^n\\prod_{i=0}^{n-1}(x-i)\\\\&=(-1)^nx^{\\underline n}\\end{aligned} \\begin{aligned}(-x)^{\\overline n}&=\\prod\\limits_{i=0}^{n-1}(-x+i)\\\\&=(-1)^n\\prod_{i=0}^{n-1}(x-i)\\\\&=(-1)^nx^{\\underline n}\\end{aligned} \u540c\u7406\uff0c (-x)^{\\underline n}=(-1)^nx^{\\overline n} (-x)^{\\underline n}=(-1)^nx^{\\overline n} \u4e5f\u662f\u6210\u7acb\u7684\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u7528\u4e0b\u964d\u9636\u4e58\u5e42\u8868\u793a\u4e8c\u9879\u5f0f\u7cfb\u6570\uff0c\u8fd9\u4f7f\u5f97\u4e0b\u964d\u9636\u4e58\u5e42\u6210\u4e3a\u89e3\u51b3\u5e26\u7ec4\u5408\u6570\u591a\u9879\u5f0f\u7684\u91cd\u8981\u65b9\u6cd5\u3002 \\binom{n}{m}=\\dfrac{n!}{(n-m)!m!}=\\dfrac{n^{\\underline m}}{m!} \\binom{n}{m}=\\dfrac{n!}{(n-m)!m!}=\\dfrac{n^{\\underline m}}{m!} \u9636\u4e58\u5e42\u548c\u4e24\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb \u00b6 \u9636\u4e58\u5e42\u548c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb \u00b6 \u6211\u4eec\u5148\u7814\u7a76\u9636\u4e58\u5e42\u4e0e\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\u5b83\u4eec\u4e4b\u95f4\u6709\u8fd9\u6837\u7684\u5173\u7cfb x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline{i}},n\\geq 0 x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline{i}},n\\geq 0 \u6211\u4eec\u7528\u201c\u751f\u6210\u51fd\u6570\u201d\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\u4ee4 F_n(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline i} F_n(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline i} \u6839\u636e\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u9012\u63a8\u516c\u5f0f \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix} \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix} \u53ef\u4ee5\u5199\u51fa \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=1}^{n}\\begin{Bmatrix}n-1\\\\i-1\\end{Bmatrix}x^{\\underline {i}}\\\\&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline {i+1}}\\\\&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}(i\\cdot x^{\\underline i}+x^{\\underline {i+1}})\\end{aligned} \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=1}^{n}\\begin{Bmatrix}n-1\\\\i-1\\end{Bmatrix}x^{\\underline {i}}\\\\&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline {i+1}}\\\\&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}(i\\cdot x^{\\underline i}+x^{\\underline {i+1}})\\end{aligned} \u7531 x^{\\underline {i+1}}=(x-i)\\cdot x^{\\underline{i}} x^{\\underline {i+1}}=(x-i)\\cdot x^{\\underline{i}} \u77e5 \\begin{aligned}i\\cdot x^{\\underline i}+x^{\\underline {i+1}}&=i\\cdot x^{\\underline{i}}+(x-i)x^{\\underline{i}}\\\\&=x \\cdot x^{\\underline i}\\end{aligned} \\begin{aligned}i\\cdot x^{\\underline i}+x^{\\underline {i+1}}&=i\\cdot x^{\\underline{i}}+(x-i)x^{\\underline{i}}\\\\&=x \\cdot x^{\\underline i}\\end{aligned} \u4ee3\u5165\u539f\u5f0f\u5f97 \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x\\cdot x^{\\underline i}\\\\&=x\\cdot\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}\\\\&=x\\cdot F_{n-1}(x)\\end{aligned} \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x\\cdot x^{\\underline i}\\\\&=x\\cdot\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}\\\\&=x\\cdot F_{n-1}(x)\\end{aligned} \u7531\u4e8e F_0(x)=1 F_0(x)=1 \uff0c\u56e0\u6b64 F_n(x)=x^n F_n(x)=x^n \uff0c\u5f97\u8bc1\u3002 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0a\u5347\u3001\u4e0b\u964d\u9636\u4e58\u5e42\u7684\u5173\u7cfb\uff0c\u5c06\u5176\u4e2d\u7684\u4e0b\u964d\u9636\u4e58\u5e42\u66ff\u6362\u4e3a\u4e0a\u5347\u9636\u4e58\u5e42 (-x)^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{i}x^{\\overline i} (-x)^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{i}x^{\\overline i} \u4e5f\u5c31\u662f x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{n-i}x^{\\overline i} x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{n-i}x^{\\overline i} \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u5efa\u7acb\u4e86\u4e00\u822c\u591a\u9879\u5f0f\u5411\u9636\u4e58\u5e42\u591a\u9879\u5f0f\u8f6c\u5316\u7684\u901a\u9053\u3002\u5b83\u662f\u4e00\u822c\u591a\u9879\u5f0f\u8f6c\u4e0a\u5347\u3001\u4e0b\u964d\u9636\u4e58\u5e42\u591a\u9879\u5f0f\u7684\u6709\u529b\u5de5\u5177\u3002 \u9636\u4e58\u5e42\u548c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb \u00b6 \u901a\u8fc7\u4e4b\u524d\u6784\u9020\u7684\u751f\u6210\u51fd\u6570\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 x^{\\overline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i,n\\ge 0 x^{\\overline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i,n\\ge 0 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210\u4e0b\u964d\u5e42\u7684\u5f62\u5f0f x^{\\underline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}(-1)^{n-i}x^i x^{\\underline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}(-1)^{n-i}x^i \u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u548c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u4f5c\u7528\u6b63\u597d\u76f8\u53cd\uff0c\u7528\u4e8e\u5c06\u4e0a\u5347\u3001\u4e0b\u964d\u5e42\u591a\u9879\u5f0f\u8f6c\u5316\u4e3a\u4e00\u822c\u591a\u9879\u5f0f\u3002 \u4e0b\u964d\u9636\u4e58\u5e42\u5728 OI \u4e2d\u7684\u5e94\u7528 \u00b6 \u4e0a\u5347\u9636\u4e58\u5e42\u5728 OI \u4e2d\u7684\u5e94\u7528\u8f83\u5c11\uff0c\u5728\u6b64\u4e0d\u505a\u4ecb\u7ecd\uff1b\u6211\u4eec\u53ea\u7814\u7a76\u4e0b\u964d\u9636\u4e58\u5e42\u3002 \u591a\u9879\u5f0f\u4e0b\u964d\u9636\u4e58\u5e42\u8868\u793a\u4e0e\u591a\u9879\u5f0f\u70b9\u503c\u8868\u793a\u7684\u5173\u7cfb \u00b6 \u5728\u8fd9\u91cc\uff0c\u591a\u9879\u5f0f\u7684\u4e0b\u964d\u9636\u4e58\u5e42\u8868\u793a\u5c31\u662f\u7528 f(x)=\\sum\\limits_{i=0}^nb_i{x^\\underline i} f(x)=\\sum\\limits_{i=0}^nb_i{x^\\underline i} \u7684\u5f62\u5f0f\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u800c\u70b9\u503c\u8868\u793a\u5c31\u662f\u7528 n+1 n+1 \u4e2a\u70b9 (i,a_i),i=0..n (i,a_i),i=0..n \u6765\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\u3002 \u663e\u7136\uff0c\u4e0b\u964d\u9636\u4e58\u5e42 b b \u548c\u70b9\u503c a a \u95f4\u6ee1\u8db3\u8fd9\u6837\u7684\u5173\u7cfb\uff1a a_k=\\sum\\limits_{i=0}^{n}b_ik^{\\underline i} a_k=\\sum\\limits_{i=0}^{n}b_ik^{\\underline i} \u5373 \\begin{aligned}a_k&=\\sum\\limits_{i=0}^{n}\\dfrac{b_ik!}{(k-i)!}\\\\\\dfrac{a_k}{k!}&=\\sum\\limits_{i=0}^kb_i\\dfrac{1}{(k-i)!}\\end{aligned} \\begin{aligned}a_k&=\\sum\\limits_{i=0}^{n}\\dfrac{b_ik!}{(k-i)!}\\\\\\dfrac{a_k}{k!}&=\\sum\\limits_{i=0}^kb_i\\dfrac{1}{(k-i)!}\\end{aligned} \u8fd9\u663e\u7136\u662f\u4e2a\u5377\u79ef\u5f62\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u70b9\u503c\u548c\u4e0b\u964d\u9636\u4e58\u5e42\u7684\u4e92\u76f8\u8f6c\u5316\u3002","title":"\u65af\u7279\u6797\u6570\u4e0e\u4e0a\u5347\u5e42\u3001\u4e0b\u964d\u5e42"},{"location":"discrete_mathematics/stirling/#_1","text":"\u65af\u7279\u6797\u6570\u4e0e\u4e8c\u9879\u5f0f\u7cfb\u6570\u5bc6\u5207\u76f8\u5173\uff0c\u662f\u79bb\u6563\u6570\u5b66\u7684\u91cd\u8981\u5185\u5bb9\u3002 \u65af\u7279\u6797\u6570\u5206\u4e3a\u4e24\u7c7b\uff0c\u5206\u522b\u662f\u201c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u201d\u548c\u201c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u201d\u3002\u867d\u7136\u88ab\u79f0\u4f5c\u201c\u7b2c\u4e8c\u7c7b\u201d\uff0c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u5374\u6bd4\u7b2c\u4e00\u7c7b\u7684\u66f4\u5e38\u7528\uff0c\u4e5f\u5728\u65af\u7279\u6797\u7684\u76f8\u5173\u8457\u4f5c\u548c\u5177\u4f53\u6570\u5b66\u4e2d\u88ab\u9996\u5148\u63cf\u8ff0\uff1b\u56e0\u6b64\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\u4eec\u4e5f\u5148\u4ecb\u7ecd\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u3002","title":"\u65af\u7279\u6797\u6570\u4e0e\u4e0a\u5347\u5e42\u3001\u4e0b\u964d\u5e42"},{"location":"discrete_mathematics/stirling/#_2","text":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u53c8\u79f0\u4f5c\u65af\u7279\u6797\u5b50\u96c6\u6570\uff0c\u7528 \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \u8868\u793a\uff0c\u8bfb\u4f5c\u201c n n \u5b50\u96c6 m m \u201d\u3002\u5b83\u7684\u7ec4\u5408\u542b\u4e49\u662f\uff0c\u5c06 n n \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u5212\u5206\u4e3a m m \u4e2a\u65e0\u6807\u53f7\u96c6\u5408\u7684\u65b9\u6848\u6570\u3002\u5b66\u4e60 \u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u3001\u6307\u6570\u51fd\u6570\u548c\u6b27\u62c9\u53d8\u6362 \u5e94\u8be5\u6709\u52a9\u4e8e\u80fd\u627e\u5230\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u548c\u6307\u6570\u51fd\u6570\u7684\u76f8\u5173\u6027\uff08\u65af\u7279\u6797\u6570\u9650\u5b9a\u4e86\u5212\u5206\u5b50\u96c6\u7684\u4e2a\u6570\u800c\u6307\u6570\u51fd\u6570\u6ca1\u6709\uff09\u3002 \u53ef\u4ee5\u8ba4\u4e3a\uff0c\u5bf9\u4e8e n<m n<m \uff0c\u6709 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=0 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=0 \u3002 m=0 m=0 \u7684\u60c5\u51b5\u6bd4\u8f83\u7279\u6b8a\u3002\u4e00\u822c\u8ba4\u4e3a\uff0c\u5c06\u7a7a\u96c6\u5212\u5206\u4e3a 0 0 \u4e2a\u975e\u7a7a\u96c6\u5408\u662f\u53ef\u884c\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49 \\begin{Bmatrix}0\\\\0\\end{Bmatrix}=1 \\begin{Bmatrix}0\\\\0\\end{Bmatrix}=1 \uff1b\u800c\u5bf9\u4e8e\u4efb\u610f n>0 n>0 \uff0c\u90fd\u6709 \\begin{Bmatrix}n\\\\0\\end{Bmatrix}=0 \\begin{Bmatrix}n\\\\0\\end{Bmatrix}=0 \u3002 \u548c\u4e8c\u9879\u5f0f\u7cfb\u6570\u7c7b\u4f3c\uff0c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4e5f\u6709\u9012\u63a8\u516c\u5f0f \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix},n>0 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix},n>0 \u540c\u65f6\uff0c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4e5f\u6709\u7b80\u6d01\u7684\u901a\u9879\u516c\u5f0f\uff0c\u5373 \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=\\sum\\limits_{i=0}^m\\dfrac{(-1)^{m-i}i^n}{i!(m-i)!} \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=\\sum\\limits_{i=0}^m\\dfrac{(-1)^{m-i}i^n}{i!(m-i)!} \u8003\u8651\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8bc1\u660e\u3002\u8bbe G_i G_i \u8868\u793a n n \u4e2a\u6709\u6807\u53f7\u5143\u7d20\uff0c\u653e\u7f6e\u5230 i i \u4e2a\u6709\u6807\u53f7\u96c6\u5408\u7684\u65b9\u6848\u6570\uff1b F_i F_i \u8868\u793a n n \u4e2a\u6709\u6807\u53f7\u5143\u7d20\uff0c\u653e\u7f6e\u5230 i i \u4e2a\u6709\u6807\u53f7\u975e\u7a7a\u96c6\u5408\u7684\u65b9\u6848\u6570\u3002\u4e0d\u96be\u5f97\u5230 G_i=i^n=\\sum\\limits_{j=0}^i\\binom{i}{j}F_j G_i=i^n=\\sum\\limits_{j=0}^i\\binom{i}{j}F_j \u6839\u636e\u4e8c\u9879\u5f0f\u53cd\u6f14 F_i=\\sum\\limits_{j=0}^{i}(-1)^{i-j}\\binom{i}{j}j^n F_i=\\sum\\limits_{j=0}^{i}(-1)^{i-j}\\binom{i}{j}j^n \u8003\u8651\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4e0e F_i F_i \u7684\u5173\u7cfb \\begin{Bmatrix}n\\\\i\\end{Bmatrix}=\\dfrac{F_i}{i!} \\begin{Bmatrix}n\\\\i\\end{Bmatrix}=\\dfrac{F_i}{i!} \u8054\u7acb\u5f97\u8bc1\u3002","title":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570"},{"location":"discrete_mathematics/stirling/#_3","text":"\u201c\u540c\u4e00\u884c\u201d\u7684\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u6307\u7684\u662f\uff0c\u6709\u7740\u4e0d\u540c\u7684 i i \uff0c\u76f8\u540c\u7684 n n \u7684\u4e00\u7cfb\u5217 \\begin{Bmatrix}n\\\\i\\end{Bmatrix} \\begin{Bmatrix}n\\\\i\\end{Bmatrix} \u3002\u6c42\u51fa\u540c\u4e00\u884c\u7684\u6240\u6709\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u5c31\u662f\u5bf9 i=0..n i=0..n \u6c42\u51fa\u4e86\u5c06 n n \u4e2a\u4e0d\u540c\u5143\u7d20\u5212\u5206\u4e3a i i \u4e2a\u975e\u7a7a\u96c6\u7684\u65b9\u6848\u6570\u3002 \u6839\u636e\u4e0a\u9762\u7ed9\u51fa\u7684\u901a\u9879\u516c\u5f0f\uff0c\u5377\u79ef\u8ba1\u7b97\u5373\u53ef\u3002 int main (){ scanf ( \"%d\" , & n ); fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ 0 ]), ifact [ n ] = ( ifact [ n ] % mod + mod ) % mod ; for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; fstdlib :: poly f ( n + 1 ), g ( n + 1 ); for ( int i = 0 ; i <= n ; ++ i ) g [ i ] = ( i & 1 ? mod - 1l l : 1l l ) * ifact [ i ] % mod , f [ i ] = ( ll ) qpow ( i , n ) * ifact [ i ] % mod ; f *= g , f . resize ( n + 1 ); for ( int i = 0 ; i <= n ; ++ i ) printf ( \"%d \" , f [ i ]); return 0 ; }","title":"\u540c\u4e00\u884c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97"},{"location":"discrete_mathematics/stirling/#_4","text":"\u5373\u5bf9 i=0..n i=0..n \uff0c\u6c42\u51fa \\begin{Bmatrix}i\\\\k\\end{Bmatrix} \\begin{Bmatrix}i\\\\k\\end{Bmatrix} \u3002\u6709\u4e24\u79cd\u5e38\u7528\u7684\u5feb\u901f\u8ba1\u7b97\u65b9\u6cd5\u3002","title":"\u540c\u4e00\u5217\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97"},{"location":"discrete_mathematics/stirling/#1","text":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u901a\u9879\u516c\u5f0f\u4e0d\u9002\u5408\u8ba1\u7b97\u5217\uff0c\u6211\u4eec\u8003\u8651\u5229\u7528\u9012\u63a8\u516c\u5f0f\u5199\u51fa\u5b83\u7684\u751f\u6210\u51fd\u6570\u3002\u8bbe F_k(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}i\\\\k\\end{Bmatrix}x^i F_k(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}i\\\\k\\end{Bmatrix}x^i \uff0c\u5219 F_k(x)=kxF_k(x)+xF_{k-1}(x) F_k(x)=kxF_k(x)+xF_{k-1}(x) \u7efc\u5408\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u5b9a\u4e49\u89e3\u5f97 F_k(x)=\\begin{cases}\\dfrac{x}{1-kx}F_{k-1}(x)&\\text{if }k>0\\\\1&\\text{else}\\end{cases} F_k(x)=\\begin{cases}\\dfrac{x}{1-kx}F_{k-1}(x)&\\text{if }k>0\\\\1&\\text{else}\\end{cases} \u5373 F_k(x)=\\prod\\limits_{i=1}^k\\dfrac{x}{1-ix} F_k(x)=\\prod\\limits_{i=1}^k\\dfrac{x}{1-ix} \u5229\u7528\u591a\u9879\u5f0f\u5206\u6cbb\u4e58\u548c\u591a\u9879\u5f0f\u4e58\u6cd5\u9006\u5373\u53ef\u5728 O(k\\log k\\log n) O(k\\log k\\log n) \u7684\u65f6\u95f4\u5185\u89e3\u51fa F_k(x) F_k(x) \u3002 int main (){ scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= k ; ++ i ) mask . emplace_back ( std :: vector < int > { 1 , mod - i }); while (( int ) mask . size () >= 2 ){ while (( int ) mask . size () >= 2 ){ tmp . push_back ( mask [ mask . size () - 1 ] * mask [ mask . size () - 2 ]); mask . pop_back (), mask . pop_back (); } if ( ! mask . empty ()) tmp . push_back ( mask [ 0 ]), mask . pop_back (); std :: swap ( mask , tmp ); } fstdlib :: poly f ( mask [ 0 ]. inv ( n + 1 )); for ( int i = f . size () - 1 ; i >= k ; -- i ) f [ i ] = f [ i - k ]; for ( int i = std :: min ( k , ( int ) f . size ()) - 1 ; i >= 0 ; -- i ) f [ i ] = 0 ; for ( int i = 0 ; i < ( int ) f . size (); ++ i ) printf ( \"%d \" , f [ i ]); return 0 ; }","title":"\u65b9\u6cd5 1. \u5229\u7528\u9012\u63a8\u516c\u5f0f"},{"location":"discrete_mathematics/stirling/#2","text":"\u4e00\u4e2a\u76d2\u5b50\u88c5 i i \u4e2a\u7269\u54c1\u7684\u65b9\u6848\u662f \\begin{cases}1&\\text{if }i>0\\\\0&\\text{else}\\end{cases} \\begin{cases}1&\\text{if }i>0\\\\0&\\text{else}\\end{cases} \u3002\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u5b83\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u4e3a F(x)=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i!} F(x)=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i!} \u3002\u7ecf\u8fc7\u4e4b\u524d\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u660e\u767d F^k(x) F^k(x) \u5c31\u662f i i \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u653e\u5230 k k \u4e2a\u6709\u6807\u53f7\u76d2\u5b50\u91cc\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff0c \\exp F(x)=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{F^i(x)}{i!} \\exp F(x)=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{F^i(x)}{i!} \u5c31\u662f i i \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u653e\u5230\u4efb\u610f\u591a\u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u91cc\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08\u6307\u6570\u51fd\u6570\u901a\u8fc7\u6bcf\u9879\u9664\u4ee5\u4e00\u4e2a i! i! \u53bb\u6389\u4e86\u76d2\u5b50\u7684\u6807\u53f7\uff09\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u5f88\u591a\u201c\u6709\u6807\u53f7\u201d\u201c\u65e0\u6807\u53f7\u201d\u7684\u5185\u5bb9\uff0c\u6ce8\u610f\u8fa8\u6790\u3002 \u90a3\u4e48 \\begin{Bmatrix}i\\\\k\\end{Bmatrix}=\\dfrac{\\left[\\dfrac{x^i}{i!}\\right]F^k(x)}{k!} \\begin{Bmatrix}i\\\\k\\end{Bmatrix}=\\dfrac{\\left[\\dfrac{x^i}{i!}\\right]F^k(x)}{k!} \uff0c O(n\\log n) O(n\\log n) \u8ba1\u7b97\u591a\u9879\u5f0f\u5e42\u5373\u53ef\u3002\u5b9e\u9645\u4f7f\u7528\u65f6\u6bd4 O(n\\log^2n) O(n\\log^2n) \u7684\u65b9\u6cd5 1 \u8981\u6162\u3002 int main (){ scanf ( \"%d%d\" , & n , & k ); fstdlib :: poly f ( n + 1 ); fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; for ( int i = 1 ; i <= n ; ++ i ) f [ i ] = qpow ( fact [ i ], mod - 2 ); f = fstdlib :: exp ( fstdlib :: log ( f >> 1 ) * k ) << k , f . resize ( n + 1 ); int inv = qpow ( fact [ k ], mod - 2 ); for ( int i = 0 ; i <= n ; ++ i ) printf ( \"%lld \" , ( ll ) f [ i ] * fact [ i ] % mod * inv % mod ); return 0 ; }","title":"\u65b9\u6cd5 2. \u5229\u7528\u6307\u6570\u578b\u751f\u6210\u51fd\u6570"},{"location":"discrete_mathematics/stirling/#_5","text":"\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u53c8\u79f0\u4f5c\u65af\u7279\u6797\u8f6e\u6362\u6570\uff0c\u7528 \\begin{bmatrix}n\\\\m\\end{bmatrix} \\begin{bmatrix}n\\\\m\\end{bmatrix} \u8868\u793a\uff0c\u8bfb\u4f5c\u201c n n \u8f6e\u6362 m m \u201d\u3002\u5b83\u7684\u7ec4\u5408\u542b\u4e49\u662f\uff0c\u5c06 n n \u4e2a\u6709\u6807\u53f7\u7269\u54c1\u5206\u4e3a m m \u4e2a\u65e0\u6807\u53f7\u8f6e\u6362\u7684\u65b9\u6848\u6570\u3002 \u4e00\u4e2a\u8f6e\u6362\u5c31\u662f\u4e00\u4e2a\u9996\u5c3e\u76f8\u63a5\u7684\u73af\u5f62\u6392\u5217\u3002\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u8f6e\u6362 [A,B,C,D] [A,B,C,D] \uff0c\u5e76\u4e14\u6211\u4eec\u8ba4\u4e3a [A,B,C,D]=[B,C,D,A]=[C,D,A,B]=[D,A,B,C] [A,B,C,D]=[B,C,D,A]=[C,D,A,B]=[D,A,B,C] \uff0c\u5373\uff0c\u4e24\u4e2a\u53ef\u4ee5\u901a\u8fc7\u65cb\u8f6c\u800c\u4e92\u76f8\u5f97\u5230\u7684\u8f6e\u6362\u662f\u7b49\u4ef7\u7684\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u8ba4\u4e3a\u4e24\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8f6c\u800c\u76f8\u4e92\u5f97\u5230\u7684\u8f6e\u6362\u7b49\u4ef7\uff0c\u5373 [A,B,C,D]\\neq[D,C,B,A] [A,B,C,D]\\neq[D,C,B,A] \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e n>0 n>0 \u6709 \\begin{bmatrix}n\\\\1\\end{bmatrix}=(n-1)! \\begin{bmatrix}n\\\\1\\end{bmatrix}=(n-1)! \uff1b\u8fdb\u4e00\u6b65\uff0c\u4e5f\u6709 \\begin{bmatrix}n\\\\m\\end{bmatrix}\\geq \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \\begin{bmatrix}n\\\\m\\end{bmatrix}\\geq \\begin{Bmatrix}n\\\\m\\end{Bmatrix} \u3002 \u8f6e\u6362\u548c\u6392\u5217\u4e00\u4e00\u5bf9\u5e94\uff0c\u5982\u679c\u5bf9\u540c\u4e00\u884c\u7684\u6240\u6709\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u6c42\u548c\uff0c\u6211\u4eec\u4e5f\u80fd\u5f97\u5230\u6392\u5217\u7684\u603b\u6570 \\sum\\limits_{i=0}^k\\begin{bmatrix}n\\\\i\\end{bmatrix}=n! \\sum\\limits_{i=0}^k\\begin{bmatrix}n\\\\i\\end{bmatrix}=n! \u3002\u8fd9\u4e00\u70b9\u53ef\u4ee5\u53c2\u8003 \u5177\u4f53\u6570\u5b66 \u3002 \u7c7b\u4f3c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5199\u51fa\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u9012\u63a8\u516c\u5f0f \\begin{bmatrix}n\\\\m\\end{bmatrix}=(n-1)\\begin{bmatrix}n-1\\\\m\\end{bmatrix}+\\begin{bmatrix}n-1\\\\m-1\\end{bmatrix},n>0 \\begin{bmatrix}n\\\\m\\end{bmatrix}=(n-1)\\begin{bmatrix}n-1\\\\m\\end{bmatrix}+\\begin{bmatrix}n-1\\\\m-1\\end{bmatrix},n>0","title":"\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570"},{"location":"discrete_mathematics/stirling/#_6","text":"\u7c7b\u4f3c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u6211\u4eec\u6784\u9020\u540c\u884c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u751f\u6210\u51fd\u6570\uff0c\u5373 F_n(x)=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i F_n(x)=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i \u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u4e0d\u96be\u5199\u51fa F_n(x)=(n-1)F_{n-1}(x)+xF_{n-1}(x) F_n(x)=(n-1)F_{n-1}(x)+xF_{n-1}(x) \u4e8e\u662f F_n(x)=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!} F_n(x)=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!} \u8fd9\u5176\u5b9e\u662f x x \u7684 n n \u6b21\u4e0a\u5347\u9636\u4e58\u5e42\uff0c\u8bb0\u505a x^{\\overline n} x^{\\overline n} \u3002\u8fd9\u4e2a\u4e1c\u897f\u81ea\u7136\u662f\u53ef\u4ee5\u66b4\u529b\u5206\u6cbb\u4e58 O(n\\log^2n) O(n\\log^2n) \u6c42\u51fa\u7684\uff0c\u4f46\u7528\u4e0a\u5347\u5e42\u76f8\u5173\u505a\u6cd5\u53ef\u4ee5 O(n\\log n) O(n\\log n) \u6c42\u51fa\u3002\u5177\u4f53\u89c1\u4e0b\u9762\u6709\u5173\u9636\u4e58\u5e42\u7684\u90e8\u5206\u3002","title":"\u540c\u4e00\u884c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97"},{"location":"discrete_mathematics/stirling/#_7","text":"\u4eff\u7167\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u6ce8\u610f\uff0c\u7531\u4e8e\u9012\u63a8\u516c\u5f0f\u548c\u884c\u6709\u5173\uff0c\u6211\u4eec\u4e0d\u80fd\u5229\u7528\u9012\u63a8\u516c\u5f0f\u8ba1\u7b97\u540c\u5217\u7684\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u3002 \u663e\u7136\uff0c\u5355\u4e2a\u8f6e\u6362\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u4e3a F(x)=\\sum\\limits_{i=1}^n\\dfrac{(i-1)!x^i}{i!}=\\sum\\limits_{i=1}^n\\dfrac{x^i}{i} F(x)=\\sum\\limits_{i=1}^n\\dfrac{(i-1)!x^i}{i!}=\\sum\\limits_{i=1}^n\\dfrac{x^i}{i} \u5b83\u7684 k k \u6b21\u5e42\u5c31\u662f \\begin{bmatrix}i\\\\k\\end{bmatrix} \\begin{bmatrix}i\\\\k\\end{bmatrix} \u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff0c O(n\\log n) O(n\\log n) \u8ba1\u7b97\u5373\u53ef\u3002 int main (){ scanf ( \"%d%d\" , & n , & k ); fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; fstdlib :: poly f ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) f [ i ] = ( ll ) fact [ i - 1 ] * ifact [ i ] % mod ; f = fstdlib :: exp ( fstdlib :: log ( f >> 1 ) * k ) << k , f . resize ( n + 1 ); for ( int i = 0 ; i <= n ; ++ i ) printf ( \"%lld \" , ( ll ) f [ i ] * fact [ i ] % mod * ifact [ k ] % mod ); return 0 ; }","title":"\u540c\u4e00\u5217\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u8ba1\u7b97"},{"location":"discrete_mathematics/stirling/#_8","text":"\u4e4b\u524d\u6211\u4eec\u63d0\u51fa\u4e86\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u548c\u4e0a\u5347\u9636\u4e58\u5e42\u7684\u5173\u7cfb\uff0c\u5373 x x \u7684 n n \u6b21\u4e0a\u5347\u9636\u4e58\u5e42\u6b63\u662f\u7b2c n n \u884c\u7684\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u3002 F_n(x)=x^{\\overline n} F_n(x)=x^{\\overline n} \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ecb\u7ecd\u4e0a\u5347\u9636\u4e58\u5e42\u548c\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u4e0b\u964d\u9636\u4e58\u5e42\u3002 \u4e00\u822c\u7684\uff0c\u6211\u4eec\u5206\u522b\u7528 x^{\\overline n} x^{\\overline n} \u548c x^{\\underline n} x^{\\underline n} \u6765\u8868\u793a x x \u7684 n n \u6b21\u4e0a\u5347\u9636\u4e58\u5e42\u548c\u4e0b\u964d\u9636\u4e58\u5e42\u3002\u5b83\u4eec\u53ef\u4ee5\u88ab\u8fd9\u6837\u63cf\u8ff0 x^{\\overline n}=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!},x^{\\underline n}=\\prod\\limits_{i=0}^{n-1}(x-i)=\\dfrac{x!}{(x-n)!} x^{\\overline n}=\\prod\\limits_{i=0}^{n-1}(x+i)=\\dfrac{(x+n-1)!}{(x-1)!},x^{\\underline n}=\\prod\\limits_{i=0}^{n-1}(x-i)=\\dfrac{x!}{(x-n)!} \u76f4\u89c2\u4e0a\u770b\uff0c\u4e0a\u5347\u5e42\u548c\u4e0b\u964d\u5e42\u662f\u5bf9\u79f0\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5199\u51fa \\begin{aligned}(-x)^{\\overline n}&=\\prod\\limits_{i=0}^{n-1}(-x+i)\\\\&=(-1)^n\\prod_{i=0}^{n-1}(x-i)\\\\&=(-1)^nx^{\\underline n}\\end{aligned} \\begin{aligned}(-x)^{\\overline n}&=\\prod\\limits_{i=0}^{n-1}(-x+i)\\\\&=(-1)^n\\prod_{i=0}^{n-1}(x-i)\\\\&=(-1)^nx^{\\underline n}\\end{aligned} \u540c\u7406\uff0c (-x)^{\\underline n}=(-1)^nx^{\\overline n} (-x)^{\\underline n}=(-1)^nx^{\\overline n} \u4e5f\u662f\u6210\u7acb\u7684\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u7528\u4e0b\u964d\u9636\u4e58\u5e42\u8868\u793a\u4e8c\u9879\u5f0f\u7cfb\u6570\uff0c\u8fd9\u4f7f\u5f97\u4e0b\u964d\u9636\u4e58\u5e42\u6210\u4e3a\u89e3\u51b3\u5e26\u7ec4\u5408\u6570\u591a\u9879\u5f0f\u7684\u91cd\u8981\u65b9\u6cd5\u3002 \\binom{n}{m}=\\dfrac{n!}{(n-m)!m!}=\\dfrac{n^{\\underline m}}{m!} \\binom{n}{m}=\\dfrac{n!}{(n-m)!m!}=\\dfrac{n^{\\underline m}}{m!}","title":"\u4e0a\u5347\u9636\u4e58\u5e42\u548c\u4e0b\u964d\u9636\u4e58\u5e42"},{"location":"discrete_mathematics/stirling/#_9","text":"","title":"\u9636\u4e58\u5e42\u548c\u4e24\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb"},{"location":"discrete_mathematics/stirling/#_10","text":"\u6211\u4eec\u5148\u7814\u7a76\u9636\u4e58\u5e42\u4e0e\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\u5b83\u4eec\u4e4b\u95f4\u6709\u8fd9\u6837\u7684\u5173\u7cfb x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline{i}},n\\geq 0 x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline{i}},n\\geq 0 \u6211\u4eec\u7528\u201c\u751f\u6210\u51fd\u6570\u201d\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\u4ee4 F_n(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline i} F_n(x)=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline i} \u6839\u636e\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u9012\u63a8\u516c\u5f0f \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix} \\begin{Bmatrix}n\\\\m\\end{Bmatrix}=m\\begin{Bmatrix}n-1\\\\m\\end{Bmatrix}+\\begin{Bmatrix}n-1\\\\m-1\\end{Bmatrix} \u53ef\u4ee5\u5199\u51fa \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=1}^{n}\\begin{Bmatrix}n-1\\\\i-1\\end{Bmatrix}x^{\\underline {i}}\\\\&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline {i+1}}\\\\&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}(i\\cdot x^{\\underline i}+x^{\\underline {i+1}})\\end{aligned} \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=1}^{n}\\begin{Bmatrix}n-1\\\\i-1\\end{Bmatrix}x^{\\underline {i}}\\\\&=\\sum\\limits_{i=0}^{n-1}i\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}+\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline {i+1}}\\\\&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}(i\\cdot x^{\\underline i}+x^{\\underline {i+1}})\\end{aligned} \u7531 x^{\\underline {i+1}}=(x-i)\\cdot x^{\\underline{i}} x^{\\underline {i+1}}=(x-i)\\cdot x^{\\underline{i}} \u77e5 \\begin{aligned}i\\cdot x^{\\underline i}+x^{\\underline {i+1}}&=i\\cdot x^{\\underline{i}}+(x-i)x^{\\underline{i}}\\\\&=x \\cdot x^{\\underline i}\\end{aligned} \\begin{aligned}i\\cdot x^{\\underline i}+x^{\\underline {i+1}}&=i\\cdot x^{\\underline{i}}+(x-i)x^{\\underline{i}}\\\\&=x \\cdot x^{\\underline i}\\end{aligned} \u4ee3\u5165\u539f\u5f0f\u5f97 \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x\\cdot x^{\\underline i}\\\\&=x\\cdot\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}\\\\&=x\\cdot F_{n-1}(x)\\end{aligned} \\begin{aligned}F_n(x)&=\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x\\cdot x^{\\underline i}\\\\&=x\\cdot\\sum\\limits_{i=0}^{n-1}\\begin{Bmatrix}n-1\\\\i\\end{Bmatrix}x^{\\underline i}\\\\&=x\\cdot F_{n-1}(x)\\end{aligned} \u7531\u4e8e F_0(x)=1 F_0(x)=1 \uff0c\u56e0\u6b64 F_n(x)=x^n F_n(x)=x^n \uff0c\u5f97\u8bc1\u3002 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0a\u5347\u3001\u4e0b\u964d\u9636\u4e58\u5e42\u7684\u5173\u7cfb\uff0c\u5c06\u5176\u4e2d\u7684\u4e0b\u964d\u9636\u4e58\u5e42\u66ff\u6362\u4e3a\u4e0a\u5347\u9636\u4e58\u5e42 (-x)^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{i}x^{\\overline i} (-x)^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{i}x^{\\overline i} \u4e5f\u5c31\u662f x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{n-i}x^{\\overline i} x^n=\\sum\\limits_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}(-1)^{n-i}x^{\\overline i} \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u5efa\u7acb\u4e86\u4e00\u822c\u591a\u9879\u5f0f\u5411\u9636\u4e58\u5e42\u591a\u9879\u5f0f\u8f6c\u5316\u7684\u901a\u9053\u3002\u5b83\u662f\u4e00\u822c\u591a\u9879\u5f0f\u8f6c\u4e0a\u5347\u3001\u4e0b\u964d\u9636\u4e58\u5e42\u591a\u9879\u5f0f\u7684\u6709\u529b\u5de5\u5177\u3002","title":"\u9636\u4e58\u5e42\u548c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb"},{"location":"discrete_mathematics/stirling/#_11","text":"\u901a\u8fc7\u4e4b\u524d\u6784\u9020\u7684\u751f\u6210\u51fd\u6570\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 x^{\\overline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i,n\\ge 0 x^{\\overline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i,n\\ge 0 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210\u4e0b\u964d\u5e42\u7684\u5f62\u5f0f x^{\\underline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}(-1)^{n-i}x^i x^{\\underline n}=\\sum\\limits_{i=0}^n\\begin{bmatrix}n\\\\i\\end{bmatrix}(-1)^{n-i}x^i \u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u548c\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u7684\u4f5c\u7528\u6b63\u597d\u76f8\u53cd\uff0c\u7528\u4e8e\u5c06\u4e0a\u5347\u3001\u4e0b\u964d\u5e42\u591a\u9879\u5f0f\u8f6c\u5316\u4e3a\u4e00\u822c\u591a\u9879\u5f0f\u3002","title":"\u9636\u4e58\u5e42\u548c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u5173\u7cfb"},{"location":"discrete_mathematics/stirling/#oi","text":"\u4e0a\u5347\u9636\u4e58\u5e42\u5728 OI \u4e2d\u7684\u5e94\u7528\u8f83\u5c11\uff0c\u5728\u6b64\u4e0d\u505a\u4ecb\u7ecd\uff1b\u6211\u4eec\u53ea\u7814\u7a76\u4e0b\u964d\u9636\u4e58\u5e42\u3002","title":"\u4e0b\u964d\u9636\u4e58\u5e42\u5728 OI \u4e2d\u7684\u5e94\u7528"},{"location":"discrete_mathematics/stirling/#_12","text":"\u5728\u8fd9\u91cc\uff0c\u591a\u9879\u5f0f\u7684\u4e0b\u964d\u9636\u4e58\u5e42\u8868\u793a\u5c31\u662f\u7528 f(x)=\\sum\\limits_{i=0}^nb_i{x^\\underline i} f(x)=\\sum\\limits_{i=0}^nb_i{x^\\underline i} \u7684\u5f62\u5f0f\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u800c\u70b9\u503c\u8868\u793a\u5c31\u662f\u7528 n+1 n+1 \u4e2a\u70b9 (i,a_i),i=0..n (i,a_i),i=0..n \u6765\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\u3002 \u663e\u7136\uff0c\u4e0b\u964d\u9636\u4e58\u5e42 b b \u548c\u70b9\u503c a a \u95f4\u6ee1\u8db3\u8fd9\u6837\u7684\u5173\u7cfb\uff1a a_k=\\sum\\limits_{i=0}^{n}b_ik^{\\underline i} a_k=\\sum\\limits_{i=0}^{n}b_ik^{\\underline i} \u5373 \\begin{aligned}a_k&=\\sum\\limits_{i=0}^{n}\\dfrac{b_ik!}{(k-i)!}\\\\\\dfrac{a_k}{k!}&=\\sum\\limits_{i=0}^kb_i\\dfrac{1}{(k-i)!}\\end{aligned} \\begin{aligned}a_k&=\\sum\\limits_{i=0}^{n}\\dfrac{b_ik!}{(k-i)!}\\\\\\dfrac{a_k}{k!}&=\\sum\\limits_{i=0}^kb_i\\dfrac{1}{(k-i)!}\\end{aligned} \u8fd9\u663e\u7136\u662f\u4e2a\u5377\u79ef\u5f62\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u70b9\u503c\u548c\u4e0b\u964d\u9636\u4e58\u5e42\u7684\u4e92\u76f8\u8f6c\u5316\u3002","title":"\u591a\u9879\u5f0f\u4e0b\u964d\u9636\u4e58\u5e42\u8868\u793a\u4e0e\u591a\u9879\u5f0f\u70b9\u503c\u8868\u793a\u7684\u5173\u7cfb"},{"location":"graph/boruvka/","text":"Bor\u016fvka \u7b97\u6cd5 \u00b6 Bor\u016fvka \u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u8d2a\u5fc3\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002\u5b83\u6bd4 Prim \u7b97\u6cd5\u548c Kruskal \u7b97\u6cd5\u66f4\u52a0\u53e4\u8001\u3002\u5728 Bor\u016fvka \u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u5df2\u7ecf\u53d1\u5c55\u51fa\u4e86 \u7ebf\u6027\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 \u3002 Bor\u016fvka \u7b97\u6cd5\u7684\u601d\u60f3\u662f\uff1a\u6bcf\u6b21\u8fed\u4ee3\uff0c\u9009\u53d6\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u6700\u5c0f\u7684\u8fde\u5411\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u8fb9\uff0c\u5c06\u5176\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u3002\u5176\u8fc7\u7a0b\u5982\u4e0b\u4f2a\u4ee3\u7801\u6240\u793a\uff1a \\begin{array}{ll} 1 & \\textbf{Input.}\\text{ Edge set }E\\text{ and vertex set }V\\text{ of the graph}\\\\ 2 & \\textbf{Output.}\\text{ A minimum spanning tree of the graph}\\\\ 3 & \\textbf{Method.}\\\\ 4 & \\textbf{Function}\\text{ Bor\u016fvka(void)}\\\\ 5 & \\qquad S\\text{ is a graph of vertex set }V\\text{ and empty edge set}\\\\ 6 & \\qquad\\textbf{while}\\text{ the count of connected components in }S>1\\\\ 7 & \\qquad\\qquad T\\text{ is an empty set}\\\\ 8 & \\qquad\\qquad\\textbf{for}\\text{ each connected component }C\\text{ in }S\\\\ 9 & \\qquad\\qquad\\qquad T\\gets T+\\text{the minimum edge connects }C\\text{ and another component}\\\\ 10 & \\qquad\\qquad\\textbf{for}\\text{ each edge }(u,v)\\in T\\\\ 11 & \\qquad\\qquad\\qquad S\\gets S+(u,v)\\\\ 12 & \\qquad\\textbf{return }S\\\\ 13 & \\textbf{End}\\\\ 14 & \\textbf{return }\\text{Bor\u016fvka()} \\end{array} \\begin{array}{ll} 1 & \\textbf{Input.}\\text{ Edge set }E\\text{ and vertex set }V\\text{ of the graph}\\\\ 2 & \\textbf{Output.}\\text{ A minimum spanning tree of the graph}\\\\ 3 & \\textbf{Method.}\\\\ 4 & \\textbf{Function}\\text{ Bor\u016fvka(void)}\\\\ 5 & \\qquad S\\text{ is a graph of vertex set }V\\text{ and empty edge set}\\\\ 6 & \\qquad\\textbf{while}\\text{ the count of connected components in }S>1\\\\ 7 & \\qquad\\qquad T\\text{ is an empty set}\\\\ 8 & \\qquad\\qquad\\textbf{for}\\text{ each connected component }C\\text{ in }S\\\\ 9 & \\qquad\\qquad\\qquad T\\gets T+\\text{the minimum edge connects }C\\text{ and another component}\\\\ 10 & \\qquad\\qquad\\textbf{for}\\text{ each edge }(u,v)\\in T\\\\ 11 & \\qquad\\qquad\\qquad S\\gets S+(u,v)\\\\ 12 & \\qquad\\textbf{return }S\\\\ 13 & \\textbf{End}\\\\ 14 & \\textbf{return }\\text{Bor\u016fvka()} \\end{array} \u5bf9\u4e8e\u6bcf\u6b21\u8fed\u4ee3\uff0c\u8fed\u4ee3\u540e\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8fed\u4ee3\u524d\u7684\u8fde\u901a\u5757\uff0c\u6545\u8fde\u901a\u5757\u603b\u6570\u81f3\u5c11\u51cf\u5c11\u4e00\u534a\uff0c\u8fed\u4ee3\u6b21\u6570\u4e3a\u5bf9\u6570\u7ea7\u522b\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8fed\u4ee3\uff0c T T \u4e2d\u6240\u6709\u8fb9 (\u5728\u53bb\u91cd\u4e4b\u540e) \u4e0d\u4f1a\u5f62\u6210\u4e0d\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u73af\uff1a \u73af\u4e0a\u6240\u6709\u8fb9\u6743\u503c\u76f8\u7b49 \u8fd9\u4e5f\u6b63\u662f Bor\u016fvka \u7b97\u6cd5\u8981\u6c42\u8fb9\u6743\u4e92\u4e0d\u76f8\u7b49\u7684\u539f\u56e0\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u7ed9\u8fb9\u968f\u610f\u5206\u914d\u4e00\u4e2a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6216\u662f\u7528\u5e76\u67e5\u96c6\u6392\u9664\u5f62\u6210\u73af\u7684\u8fb9\u3002\u56e0\u6b64\uff0cBor\u016fvka \u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5b58\u5728\u8fb9\u6743\u76f8\u540c\u7684\u56fe\u3002","title":"Bor\u016fvka \u7b97\u6cd5"},{"location":"graph/boruvka/#boruvka","text":"Bor\u016fvka \u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u8d2a\u5fc3\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002\u5b83\u6bd4 Prim \u7b97\u6cd5\u548c Kruskal \u7b97\u6cd5\u66f4\u52a0\u53e4\u8001\u3002\u5728 Bor\u016fvka \u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u5df2\u7ecf\u53d1\u5c55\u51fa\u4e86 \u7ebf\u6027\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 \u3002 Bor\u016fvka \u7b97\u6cd5\u7684\u601d\u60f3\u662f\uff1a\u6bcf\u6b21\u8fed\u4ee3\uff0c\u9009\u53d6\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u6700\u5c0f\u7684\u8fde\u5411\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u8fb9\uff0c\u5c06\u5176\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u3002\u5176\u8fc7\u7a0b\u5982\u4e0b\u4f2a\u4ee3\u7801\u6240\u793a\uff1a \\begin{array}{ll} 1 & \\textbf{Input.}\\text{ Edge set }E\\text{ and vertex set }V\\text{ of the graph}\\\\ 2 & \\textbf{Output.}\\text{ A minimum spanning tree of the graph}\\\\ 3 & \\textbf{Method.}\\\\ 4 & \\textbf{Function}\\text{ Bor\u016fvka(void)}\\\\ 5 & \\qquad S\\text{ is a graph of vertex set }V\\text{ and empty edge set}\\\\ 6 & \\qquad\\textbf{while}\\text{ the count of connected components in }S>1\\\\ 7 & \\qquad\\qquad T\\text{ is an empty set}\\\\ 8 & \\qquad\\qquad\\textbf{for}\\text{ each connected component }C\\text{ in }S\\\\ 9 & \\qquad\\qquad\\qquad T\\gets T+\\text{the minimum edge connects }C\\text{ and another component}\\\\ 10 & \\qquad\\qquad\\textbf{for}\\text{ each edge }(u,v)\\in T\\\\ 11 & \\qquad\\qquad\\qquad S\\gets S+(u,v)\\\\ 12 & \\qquad\\textbf{return }S\\\\ 13 & \\textbf{End}\\\\ 14 & \\textbf{return }\\text{Bor\u016fvka()} \\end{array} \\begin{array}{ll} 1 & \\textbf{Input.}\\text{ Edge set }E\\text{ and vertex set }V\\text{ of the graph}\\\\ 2 & \\textbf{Output.}\\text{ A minimum spanning tree of the graph}\\\\ 3 & \\textbf{Method.}\\\\ 4 & \\textbf{Function}\\text{ Bor\u016fvka(void)}\\\\ 5 & \\qquad S\\text{ is a graph of vertex set }V\\text{ and empty edge set}\\\\ 6 & \\qquad\\textbf{while}\\text{ the count of connected components in }S>1\\\\ 7 & \\qquad\\qquad T\\text{ is an empty set}\\\\ 8 & \\qquad\\qquad\\textbf{for}\\text{ each connected component }C\\text{ in }S\\\\ 9 & \\qquad\\qquad\\qquad T\\gets T+\\text{the minimum edge connects }C\\text{ and another component}\\\\ 10 & \\qquad\\qquad\\textbf{for}\\text{ each edge }(u,v)\\in T\\\\ 11 & \\qquad\\qquad\\qquad S\\gets S+(u,v)\\\\ 12 & \\qquad\\textbf{return }S\\\\ 13 & \\textbf{End}\\\\ 14 & \\textbf{return }\\text{Bor\u016fvka()} \\end{array} \u5bf9\u4e8e\u6bcf\u6b21\u8fed\u4ee3\uff0c\u8fed\u4ee3\u540e\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8fed\u4ee3\u524d\u7684\u8fde\u901a\u5757\uff0c\u6545\u8fde\u901a\u5757\u603b\u6570\u81f3\u5c11\u51cf\u5c11\u4e00\u534a\uff0c\u8fed\u4ee3\u6b21\u6570\u4e3a\u5bf9\u6570\u7ea7\u522b\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8fed\u4ee3\uff0c T T \u4e2d\u6240\u6709\u8fb9 (\u5728\u53bb\u91cd\u4e4b\u540e) \u4e0d\u4f1a\u5f62\u6210\u4e0d\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u73af\uff1a \u73af\u4e0a\u6240\u6709\u8fb9\u6743\u503c\u76f8\u7b49 \u8fd9\u4e5f\u6b63\u662f Bor\u016fvka \u7b97\u6cd5\u8981\u6c42\u8fb9\u6743\u4e92\u4e0d\u76f8\u7b49\u7684\u539f\u56e0\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u7ed9\u8fb9\u968f\u610f\u5206\u914d\u4e00\u4e2a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6216\u662f\u7528\u5e76\u67e5\u96c6\u6392\u9664\u5f62\u6210\u73af\u7684\u8fb9\u3002\u56e0\u6b64\uff0cBor\u016fvka \u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5b58\u5728\u8fb9\u6743\u76f8\u540c\u7684\u56fe\u3002","title":"Bor\u016fvka \u7b97\u6cd5"},{"location":"graph/dsu_on_tree/","text":"\u9759\u6001\u94fe\u5206\u6cbb\u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u9759\u6001\u94fe\u5206\u6cbb (DSU on Tree) \u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 (Heuristic Merge on Tree) \u662f\u7b80\u6d01\u6709\u529b\u7684\u5904\u7406\u6811\u4e0a\u95ee\u9898\u7684\u5de5\u5177\uff0c\u800c\u4ee3\u4ef7\u4ec5\u4e3a\u5c06\u590d\u6742\u5ea6\u4e58\u4e0a O(\\log n) O(\\log n) \u3002\u5728\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u8981\u6c42\u8be2\u95ee\u79bb\u7ebf\u3002 \u5f88\u591a\u4eba\u628a\u9759\u6001\u94fe\u5206\u6cbb\u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u6df7\u4e3a\u4e00\u8c08\uff0c\u4f46\u5b83\u4eec\u5176\u5b9e\u662f\u622a\u7136\u4e0d\u540c\u7684\u7b97\u6cd5\u3002\u5927\u5bb6\u5e38\u89c1\u5e76\u79f0\u4e4b\u4e3a\u201c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u201d\u7684\u7b97\u6cd5\u5176\u5b9e\u662f\u9759\u6001\u94fe\u5206\u6cbb\u3002 \u9759\u6001\u94fe\u5206\u6cbb \u00b6 \u4f8b\u9898 \u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6709\u4e00\u79cd\u989c\u8272\u3002\u56de\u7b54\u6240\u6709\u5b50\u6811\u4e2d\u4e0d\u540c\u989c\u8272\u7684\u4e2a\u6570\u3002 \u8fd9\u662f\u4e00\u9053\u8001\u751f\u5e38\u8c08\u7684\u7ecf\u5178\u9898\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76 (\u590d\u6742\u5ea6 O(n\\log n) O(n\\log n) ) \u548c\u6811\u5206\u5757 (\u590d\u6742\u5ea6 O(n\\sqrt n) O(n\\sqrt n) \uff0c\u53c8\u79f0 \u6811\u4e0a\u83ab\u961f ) \u7b49\u65b9\u6cd5\u89e3\u51b3\u3002\u4f46\u9759\u6001\u94fe\u5206\u6cbb\u4e5f\u53ef\u4ee5\u89e3\u51b3\u6b64\u9898\uff0c\u800c\u4e14\u5e38\u6570\u8f83\u5c0f (\u6211\u81ea\u5df1\u5199\u7684\u9759\u6001\u94fe\u5206\u6cbb\u6bd4\u7ebf\u6bb5\u6811\u5408\u5e76\u6162)\u3002 \u5229\u7528\u4e00\u4e2a\u6570\u7ec4 \\text{cnt} \\text{cnt} \u6765\u8bb0\u5f55\u6bcf\u79cd\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5bf9\u6811\u8fdb\u884c\u91cd\u94fe\u5256\u5206\uff0c\u5904\u7406\u8282\u70b9 i i \u65f6\uff1a \u5148\u5904\u7406\u6240\u6709\u8f7b\u513f\u5b50\uff0c\u5f97\u5230\u8f7b\u513f\u5b50\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u7b54\u6848\uff0c\u5e76\u5728\u5904\u7406\u5b8c\u6bcf\u4e2a\u8f7b\u513f\u5b50\u540e\u6e05\u7a7a \\text{cnt} \\text{cnt} \u3002 \u7136\u540e\u5904\u7406\u91cd\u513f\u5b50\uff0c\u5f97\u5230\u91cd\u513f\u5b50\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u7b54\u6848\u3002\u5904\u7406\u5b8c\u540e\u4e0d\u6e05\u7a7a \\text{cnt} \\text{cnt} \u3002 \u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u3002\u81f3\u6b64 i i \u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u8ba1\u5165\u4e86 \\text{cnt} \\text{cnt} \uff0c\u6211\u4eec\u5f97\u5230\u4e86 i i \u7684\u7b54\u6848\u3002 \u590d\u6742\u5ea6\u8bc1\u660e \u00b6 \u9759\u6001\u94fe\u5206\u6cbb\u4e2d\u6709\u56db\u4e2a\u4ea7\u751f\u590d\u6742\u5ea6\u7684\u8fc7\u7a0b\uff1a\u5904\u7406\u8f7b\u513f\u5b50\u3001\u6e05\u7a7a\u8f7b\u513f\u5b50\u3001\u5904\u7406\u91cd\u513f\u5b50\u3001\u904d\u5386\u8f7b\u513f\u5b50 (\u548c\u672c\u8eab)\u3002 \u5176\u4e2d\uff0c\u6e05\u7a7a\u8f7b\u513f\u5b50\u548c\u904d\u5386\u8f7b\u513f\u5b50\u7684\u590d\u6742\u5ea6\u663e\u7136\u90fd\u662f O(n\\log n) O(n\\log n) \uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5230\u6839\u7ecf\u8fc7\u7684\u8f7b\u8fb9\u6570\u90fd\u662f O(\\log n) O(\\log n) \u7ea7\u7684\u3002 \u5269\u4e0b\u7684\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002 \u4f8b\u9898 \u00b6 Lomsat gelral \u5feb\u4e50\u6e38\u620f\u9e21 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 \u00b6 \u4f8b\u9898 \u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u5b9a\u4e49 d(u,v) d(u,v) \u4e3a\u4ece u u \u5230 v v \u7684\u7b80\u5355\u8def\u5f84\u5305\u542b\u7684\u8fb9\u6570\u3002\u4ee4 a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) \uff0c\u6c42\u6ee1\u8db3 f(u,v)=i f(u,v)=i \u7684\u6570\u5bf9 (u,v) (u,v) \u4e2a\u6570\u3002 \u8fd9\u662f\u4e00\u9053 UOJ \u4e0a\u7684\u9898 \u6811\u4e0a GCD \uff0c\u6807\u7b97\u4e3a O(n\\sqrt n) O(n\\sqrt n) \u7684\u70b9\u5206\u6cbb\u3002\u4f46\u6b64\u9898\u4e5f\u53ef\u4ee5\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u505a\u5230\u51e0\u4e4e\u540c\u6837\u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e14\u5e38\u6570\u5947\u5c0f\uff0c\u4ee3\u7801\u5065\u5eb7\u3002 \u6211\u4eec\u53ea\u8981\u6c42\u51fa\u6ee1\u8db3 d\\mid f(u,v) d\\mid f(u,v) \u7684 (u,v) (u,v) \u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bb9\u65a5\u6216\u8005\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u5f97\u5230\u7b54\u6848\u3002\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a\u5206\u6cbb\u754c\u9650 B B \uff0c\u5bf9\u4e8e d\\in[1,B] d\\in[1,B] \uff0c\u7528\u52a8\u6001\u89c4\u5212\u6c42\u51fa\u6ee1\u8db3 i\\mid f(u,v) i\\mid f(u,v) \u7684\u70b9\u5bf9\u6570\uff0c\u590d\u6742\u5ea6\u4e3a O(nB) O(nB) \u3002 \u5bf9\u4e8e d\\in [B+1,n] d\\in [B+1,n] \uff0c\u4f7f\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u8bbe dp_{i,j} dp_{i,j} \u8868\u793a\u4ee5 i i \u8282\u70b9\u4e3a\u94fe\u9876\uff0c\u4e14\u957f\u5ea6\u4e3a j j \u7684\u94fe\u7684\u4e2a\u6570\u3002\u6bcf\u6b21\u5c06 i i \u7684\u4e00\u4e2a\u513f\u5b50\u7684\u7b54\u6848\u4e0e i i \u7684\u7b54\u6848\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6b63\u5e38\u5730\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002 dp [ i ]. push_back ( 1 ); // (i,fa[i]) \u4e5f\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u94fe\u3002\u8fd9\u91cc dp \u6570\u7ec4\u662f\u5012\u7740\u7684\uff0cdp[i][dp.size()-j] \u8868\u793a\u957f\u5ea6\u4e3a j \u7684\u94fe\u7684\u4e2a\u6570 if ( dp [ fa [ i ]]. size () < dp [ i ]. size ()) std :: swap ( dp [ fa [ i ]], dp [ i ]); //\u5728 C++11 \u4ee5\u4e0b\u7684\u6807\u51c6\u4e2d\uff0cstd::swap \u4e0d\u662f O(1) \u7684\uff0c\u5fc5\u987b\u4f7f\u7528 dp[fa[i]].swap(dp[i]) \u6765\u4fdd\u8bc1\u590d\u6742\u5ea6 for ( int j = 0 ; j < ( int ) dp [ i ]. size (); ++ j ) dp [ fa [ i ]][ dp [ fa [ i ]]. size () - j ] += dp [ i ][ dp [ i ]. size () - j ]; \u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002 \u9664\u4e86\u5408\u5e76\u513f\u5b50\u4e0e\u7236\u4eb2\u7684 dp dp \u6570\u7ec4\uff0c\u6211\u4eec\u8fd8\u8981\u7edf\u8ba1\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff1a dp [ i ]. push_back ( 1 ); if ( dp [ fa [ i ]]. size () < dp [ i ]. size ()) std :: swap ( dp [ fa [ i ]], dp [ i ]); int sz1 = dp [ i ]. size (), sz2 = dp [ fa [ i ]]. size (); for ( int d = B + 1 ; d <= sz1 ; ++ d ){ long long int cnt1 = 0l l , cnt2 = 0l l ; for ( int j = d ; j <= sz1 ; j += d ) cnt1 += dp [ i ][ sz1 - j ]; for ( int j = d ; j <= sz2 ; j += d ) cnt2 += dp [ fa [ i ]][ sz2 - j ]; ans [ d ] += cnt1 * cnt2 ; // ans[d] \u8868\u793a\u6ee1\u8db3 d | f(u,v) \u7684 (u,v) \u7684\u4e2a\u6570 } for ( int j = 0 ; j < sz1 ; ++ j ) dp [ fa [ i ]][ sz2 - j ] += dp [ i ][ sz1 - j ]; \u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u8f83\u96be\u5206\u6790\u3002\u53ea\u6709\u5927\u4e8e B B \u7684 \\text{sz1} \\text{sz1} \u624d\u4f1a\u5bf9\u65f6\u95f4\u4ea7\u751f O(\\text{sz2}\\log\\text{sz1})=O(n\\log\\text{sz1}) O(\\text{sz2}\\log\\text{sz1})=O(n\\log\\text{sz1}) \u7684\u8d21\u732e\uff0c\u800c\u8fd9\u79cd\u4e24\u4e2a dp dp \u6570\u7ec4\u7684\u5927\u5c0f\u90fd\u5927\u4e8e B B \u7684\u5408\u5e76\u81f3\u591a\u51fa\u73b0 \\dfrac{n}{B} \\dfrac{n}{B} \u6b21\uff0c\u6545\u590d\u6742\u5ea6\u4e3a O\\left(\\dfrac{n^2\\log n}{B}\\right) O\\left(\\dfrac{n^2\\log n}{B}\\right) \u3002 \u53d6 B=\\sqrt{n\\log n} B=\\sqrt{n\\log n} \u5373\u53ef\u5f97\u5230\u7406\u8bba\u6700\u4f18\u590d\u6742\u5ea6 O(n\\sqrt{n\\log n}) O(n\\sqrt{n\\log n}) \u3002\u5b9e\u9645\u4e0a\u53d6 B=10 B=10 \u6700\u5feb\uff0c\u800c\u4e14\u7531\u4e8e\u5e38\u6570\u7279\u522b\u5c0f\u5361\u4e0d\u6389\u3002 \u4ece\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u672c\u8d28\u4e0a\u5c31\u662f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u4f18\u5316\u6811\u5f62 DP\uff0c\u662f\u4e00\u79cd\u5e38\u6570\u975e\u5e38\u5c0f\u7684\u4f18\u79c0\u7b97\u6cd5\uff0c\u975e\u5e38\u9002\u5408\u4ee3\u66ff\u6709\u6839\u6811\u4e0a\u7684\u70b9\u5206\u6cbb\u3002\u5b83\u7684\u7f3a\u9677\u5c31\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u53ea\u80fd\u4f18\u5316\u8f6c\u79fb\u65b9\u7a0b\u5f88\u7b80\u5355\u7684\u6811\u5f62 DP\uff0c\u4e0d\u5982\u7ebf\u6bb5\u6811\u5408\u5e76\u7528\u5904\u5e7f\u6cdb\u3002 \u9898\u5916\u8bdd \u8bf4\u5230\u6709\u6839\u6811\u70b9\u5206\u6cbb\uff0c\u4e0d\u80fd\u4e0d\u8ba9\u4eba\u60f3\u8d77 \u8d2d\u7968 \u3002\u4e0d\u8fc7\u8d2d\u7968\u7684\u6240\u8c13\u201c\u5206\u6cbb\u201d\u5176\u5b9e\u662f CDQ \u5206\u6cbb\uff0c\u8981\u6c42\u8ba1\u7b97\u7684\u5e76\u975e\u6811\u4e0a\u8def\u5f84\uff0c\u56e0\u800c\u6ca1\u6cd5\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4e86\u3002","title":"\u9759\u6001\u94fe\u5206\u6cbb\u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"graph/dsu_on_tree/#_1","text":"\u9759\u6001\u94fe\u5206\u6cbb (DSU on Tree) \u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 (Heuristic Merge on Tree) \u662f\u7b80\u6d01\u6709\u529b\u7684\u5904\u7406\u6811\u4e0a\u95ee\u9898\u7684\u5de5\u5177\uff0c\u800c\u4ee3\u4ef7\u4ec5\u4e3a\u5c06\u590d\u6742\u5ea6\u4e58\u4e0a O(\\log n) O(\\log n) \u3002\u5728\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u8981\u6c42\u8be2\u95ee\u79bb\u7ebf\u3002 \u5f88\u591a\u4eba\u628a\u9759\u6001\u94fe\u5206\u6cbb\u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u6df7\u4e3a\u4e00\u8c08\uff0c\u4f46\u5b83\u4eec\u5176\u5b9e\u662f\u622a\u7136\u4e0d\u540c\u7684\u7b97\u6cd5\u3002\u5927\u5bb6\u5e38\u89c1\u5e76\u79f0\u4e4b\u4e3a\u201c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u201d\u7684\u7b97\u6cd5\u5176\u5b9e\u662f\u9759\u6001\u94fe\u5206\u6cbb\u3002","title":"\u9759\u6001\u94fe\u5206\u6cbb\u548c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"graph/dsu_on_tree/#_2","text":"\u4f8b\u9898 \u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6709\u4e00\u79cd\u989c\u8272\u3002\u56de\u7b54\u6240\u6709\u5b50\u6811\u4e2d\u4e0d\u540c\u989c\u8272\u7684\u4e2a\u6570\u3002 \u8fd9\u662f\u4e00\u9053\u8001\u751f\u5e38\u8c08\u7684\u7ecf\u5178\u9898\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76 (\u590d\u6742\u5ea6 O(n\\log n) O(n\\log n) ) \u548c\u6811\u5206\u5757 (\u590d\u6742\u5ea6 O(n\\sqrt n) O(n\\sqrt n) \uff0c\u53c8\u79f0 \u6811\u4e0a\u83ab\u961f ) \u7b49\u65b9\u6cd5\u89e3\u51b3\u3002\u4f46\u9759\u6001\u94fe\u5206\u6cbb\u4e5f\u53ef\u4ee5\u89e3\u51b3\u6b64\u9898\uff0c\u800c\u4e14\u5e38\u6570\u8f83\u5c0f (\u6211\u81ea\u5df1\u5199\u7684\u9759\u6001\u94fe\u5206\u6cbb\u6bd4\u7ebf\u6bb5\u6811\u5408\u5e76\u6162)\u3002 \u5229\u7528\u4e00\u4e2a\u6570\u7ec4 \\text{cnt} \\text{cnt} \u6765\u8bb0\u5f55\u6bcf\u79cd\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5bf9\u6811\u8fdb\u884c\u91cd\u94fe\u5256\u5206\uff0c\u5904\u7406\u8282\u70b9 i i \u65f6\uff1a \u5148\u5904\u7406\u6240\u6709\u8f7b\u513f\u5b50\uff0c\u5f97\u5230\u8f7b\u513f\u5b50\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u7b54\u6848\uff0c\u5e76\u5728\u5904\u7406\u5b8c\u6bcf\u4e2a\u8f7b\u513f\u5b50\u540e\u6e05\u7a7a \\text{cnt} \\text{cnt} \u3002 \u7136\u540e\u5904\u7406\u91cd\u513f\u5b50\uff0c\u5f97\u5230\u91cd\u513f\u5b50\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u7b54\u6848\u3002\u5904\u7406\u5b8c\u540e\u4e0d\u6e05\u7a7a \\text{cnt} \\text{cnt} \u3002 \u6700\u540e\u518d\u904d\u5386\u8f7b\u513f\u5b50\u3002\u81f3\u6b64 i i \u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u8ba1\u5165\u4e86 \\text{cnt} \\text{cnt} \uff0c\u6211\u4eec\u5f97\u5230\u4e86 i i \u7684\u7b54\u6848\u3002","title":"\u9759\u6001\u94fe\u5206\u6cbb"},{"location":"graph/dsu_on_tree/#_3","text":"\u9759\u6001\u94fe\u5206\u6cbb\u4e2d\u6709\u56db\u4e2a\u4ea7\u751f\u590d\u6742\u5ea6\u7684\u8fc7\u7a0b\uff1a\u5904\u7406\u8f7b\u513f\u5b50\u3001\u6e05\u7a7a\u8f7b\u513f\u5b50\u3001\u5904\u7406\u91cd\u513f\u5b50\u3001\u904d\u5386\u8f7b\u513f\u5b50 (\u548c\u672c\u8eab)\u3002 \u5176\u4e2d\uff0c\u6e05\u7a7a\u8f7b\u513f\u5b50\u548c\u904d\u5386\u8f7b\u513f\u5b50\u7684\u590d\u6742\u5ea6\u663e\u7136\u90fd\u662f O(n\\log n) O(n\\log n) \uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5230\u6839\u7ecf\u8fc7\u7684\u8f7b\u8fb9\u6570\u90fd\u662f O(\\log n) O(\\log n) \u7ea7\u7684\u3002 \u5269\u4e0b\u7684\u8fc7\u7a0b\u7684\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u3002\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002","title":"\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"graph/dsu_on_tree/#_4","text":"Lomsat gelral \u5feb\u4e50\u6e38\u620f\u9e21","title":"\u4f8b\u9898"},{"location":"graph/dsu_on_tree/#_5","text":"\u4f8b\u9898 \u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u5b9a\u4e49 d(u,v) d(u,v) \u4e3a\u4ece u u \u5230 v v \u7684\u7b80\u5355\u8def\u5f84\u5305\u542b\u7684\u8fb9\u6570\u3002\u4ee4 a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) \uff0c\u6c42\u6ee1\u8db3 f(u,v)=i f(u,v)=i \u7684\u6570\u5bf9 (u,v) (u,v) \u4e2a\u6570\u3002 \u8fd9\u662f\u4e00\u9053 UOJ \u4e0a\u7684\u9898 \u6811\u4e0a GCD \uff0c\u6807\u7b97\u4e3a O(n\\sqrt n) O(n\\sqrt n) \u7684\u70b9\u5206\u6cbb\u3002\u4f46\u6b64\u9898\u4e5f\u53ef\u4ee5\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u505a\u5230\u51e0\u4e4e\u540c\u6837\u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e14\u5e38\u6570\u5947\u5c0f\uff0c\u4ee3\u7801\u5065\u5eb7\u3002 \u6211\u4eec\u53ea\u8981\u6c42\u51fa\u6ee1\u8db3 d\\mid f(u,v) d\\mid f(u,v) \u7684 (u,v) (u,v) \u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bb9\u65a5\u6216\u8005\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u5f97\u5230\u7b54\u6848\u3002\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a\u5206\u6cbb\u754c\u9650 B B \uff0c\u5bf9\u4e8e d\\in[1,B] d\\in[1,B] \uff0c\u7528\u52a8\u6001\u89c4\u5212\u6c42\u51fa\u6ee1\u8db3 i\\mid f(u,v) i\\mid f(u,v) \u7684\u70b9\u5bf9\u6570\uff0c\u590d\u6742\u5ea6\u4e3a O(nB) O(nB) \u3002 \u5bf9\u4e8e d\\in [B+1,n] d\\in [B+1,n] \uff0c\u4f7f\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u8bbe dp_{i,j} dp_{i,j} \u8868\u793a\u4ee5 i i \u8282\u70b9\u4e3a\u94fe\u9876\uff0c\u4e14\u957f\u5ea6\u4e3a j j \u7684\u94fe\u7684\u4e2a\u6570\u3002\u6bcf\u6b21\u5c06 i i \u7684\u4e00\u4e2a\u513f\u5b50\u7684\u7b54\u6848\u4e0e i i \u7684\u7b54\u6848\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6b63\u5e38\u5730\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002 dp [ i ]. push_back ( 1 ); // (i,fa[i]) \u4e5f\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u94fe\u3002\u8fd9\u91cc dp \u6570\u7ec4\u662f\u5012\u7740\u7684\uff0cdp[i][dp.size()-j] \u8868\u793a\u957f\u5ea6\u4e3a j \u7684\u94fe\u7684\u4e2a\u6570 if ( dp [ fa [ i ]]. size () < dp [ i ]. size ()) std :: swap ( dp [ fa [ i ]], dp [ i ]); //\u5728 C++11 \u4ee5\u4e0b\u7684\u6807\u51c6\u4e2d\uff0cstd::swap \u4e0d\u662f O(1) \u7684\uff0c\u5fc5\u987b\u4f7f\u7528 dp[fa[i]].swap(dp[i]) \u6765\u4fdd\u8bc1\u590d\u6742\u5ea6 for ( int j = 0 ; j < ( int ) dp [ i ]. size (); ++ j ) dp [ fa [ i ]][ dp [ fa [ i ]]. size () - j ] += dp [ i ][ dp [ i ]. size () - j ]; \u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002 \u9664\u4e86\u5408\u5e76\u513f\u5b50\u4e0e\u7236\u4eb2\u7684 dp dp \u6570\u7ec4\uff0c\u6211\u4eec\u8fd8\u8981\u7edf\u8ba1\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff1a dp [ i ]. push_back ( 1 ); if ( dp [ fa [ i ]]. size () < dp [ i ]. size ()) std :: swap ( dp [ fa [ i ]], dp [ i ]); int sz1 = dp [ i ]. size (), sz2 = dp [ fa [ i ]]. size (); for ( int d = B + 1 ; d <= sz1 ; ++ d ){ long long int cnt1 = 0l l , cnt2 = 0l l ; for ( int j = d ; j <= sz1 ; j += d ) cnt1 += dp [ i ][ sz1 - j ]; for ( int j = d ; j <= sz2 ; j += d ) cnt2 += dp [ fa [ i ]][ sz2 - j ]; ans [ d ] += cnt1 * cnt2 ; // ans[d] \u8868\u793a\u6ee1\u8db3 d | f(u,v) \u7684 (u,v) \u7684\u4e2a\u6570 } for ( int j = 0 ; j < sz1 ; ++ j ) dp [ fa [ i ]][ sz2 - j ] += dp [ i ][ sz1 - j ]; \u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u8f83\u96be\u5206\u6790\u3002\u53ea\u6709\u5927\u4e8e B B \u7684 \\text{sz1} \\text{sz1} \u624d\u4f1a\u5bf9\u65f6\u95f4\u4ea7\u751f O(\\text{sz2}\\log\\text{sz1})=O(n\\log\\text{sz1}) O(\\text{sz2}\\log\\text{sz1})=O(n\\log\\text{sz1}) \u7684\u8d21\u732e\uff0c\u800c\u8fd9\u79cd\u4e24\u4e2a dp dp \u6570\u7ec4\u7684\u5927\u5c0f\u90fd\u5927\u4e8e B B \u7684\u5408\u5e76\u81f3\u591a\u51fa\u73b0 \\dfrac{n}{B} \\dfrac{n}{B} \u6b21\uff0c\u6545\u590d\u6742\u5ea6\u4e3a O\\left(\\dfrac{n^2\\log n}{B}\\right) O\\left(\\dfrac{n^2\\log n}{B}\\right) \u3002 \u53d6 B=\\sqrt{n\\log n} B=\\sqrt{n\\log n} \u5373\u53ef\u5f97\u5230\u7406\u8bba\u6700\u4f18\u590d\u6742\u5ea6 O(n\\sqrt{n\\log n}) O(n\\sqrt{n\\log n}) \u3002\u5b9e\u9645\u4e0a\u53d6 B=10 B=10 \u6700\u5feb\uff0c\u800c\u4e14\u7531\u4e8e\u5e38\u6570\u7279\u522b\u5c0f\u5361\u4e0d\u6389\u3002 \u4ece\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u672c\u8d28\u4e0a\u5c31\u662f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u6765\u4f18\u5316\u6811\u5f62 DP\uff0c\u662f\u4e00\u79cd\u5e38\u6570\u975e\u5e38\u5c0f\u7684\u4f18\u79c0\u7b97\u6cd5\uff0c\u975e\u5e38\u9002\u5408\u4ee3\u66ff\u6709\u6839\u6811\u4e0a\u7684\u70b9\u5206\u6cbb\u3002\u5b83\u7684\u7f3a\u9677\u5c31\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u53ea\u80fd\u4f18\u5316\u8f6c\u79fb\u65b9\u7a0b\u5f88\u7b80\u5355\u7684\u6811\u5f62 DP\uff0c\u4e0d\u5982\u7ebf\u6bb5\u6811\u5408\u5e76\u7528\u5904\u5e7f\u6cdb\u3002 \u9898\u5916\u8bdd \u8bf4\u5230\u6709\u6839\u6811\u70b9\u5206\u6cbb\uff0c\u4e0d\u80fd\u4e0d\u8ba9\u4eba\u60f3\u8d77 \u8d2d\u7968 \u3002\u4e0d\u8fc7\u8d2d\u7968\u7684\u6240\u8c13\u201c\u5206\u6cbb\u201d\u5176\u5b9e\u662f CDQ \u5206\u6cbb\uff0c\u8981\u6c42\u8ba1\u7b97\u7684\u5e76\u975e\u6811\u4e0a\u8def\u5f84\uff0c\u56e0\u800c\u6ca1\u6cd5\u7528\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u4e86\u3002","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"linear_algebra/cross_product/","text":"\u6d45\u8c08\u5411\u91cf\u79ef \u00b6 \u5411\u91cf\u79ef\uff08Cross Product\uff09\uff0c\u53c8\u79f0\u53c9\u79ef\u3001\u5916\u79ef\uff0c\u662f\u5411\u91cf\u7684\u4e00\u79cd\u91cd\u8981\u8fd0\u7b97\u3002\u8fd9\u79cd\u8fd0\u7b97\u5728\u9ad8\u4e2d\u7269\u7406\u4e2d\u6781\u4e3a\u5e38\u7528\uff0c\u4f46\u4e0d\u8bba\u662f\u9ad8\u4e2d\u6570\u5b66\u8fd8\u662f\u9ad8\u4e2d\u7269\u7406\u6559\u6750\u5bf9\u6b64\u51e0\u4e4e\u90fd\u6ca1\u6709\u63d0\u53ca\u3002 \u5927\u5c0f\u4e0e\u65b9\u5411 \u00b6 \u5411\u91cf\u79ef\u4ec5\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6709\u5b9a\u4e49\u3002\u8bbe\u4e24\u4e2a\u5411\u91cf \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \uff0c\u5219\u5b83\u4eec\u7684\u5411\u91cf\u79ef \\boldsymbol a\\times \\boldsymbol b \\boldsymbol a\\times \\boldsymbol b \u662f\u4e00\u4e2a\u6a21\u957f\u4e3a |\\boldsymbol a||\\boldsymbol b|\\sin{\\langle \\boldsymbol a, \\boldsymbol b\\rangle} |\\boldsymbol a||\\boldsymbol b|\\sin{\\langle \\boldsymbol a, \\boldsymbol b\\rangle} \uff0c\u65b9\u5411\u4e0e \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \u90fd\u5782\u76f4\u7684\u5411\u91cf\u3002\u6839\u636e\u4e09\u89d2\u5f62\u9762\u79ef\u516c\u5f0f S=\\dfrac{1}{2}|\\boldsymbol a||\\boldsymbol b| \\sin\\langle\\boldsymbol a, \\boldsymbol b\\rangle S=\\dfrac{1}{2}|\\boldsymbol a||\\boldsymbol b| \\sin\\langle\\boldsymbol a, \\boldsymbol b\\rangle \uff0c \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684\u6a21\u957f\u6070\u7b49\u4e8e\u4ee5 \\boldsymbol a,\\boldsymbol b \\boldsymbol a,\\boldsymbol b \u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u9762\u79ef\u3002 \u7531\u8fd9\u4e2a\u5b9a\u4e49\u53ef\u77e5\uff0c\u5982\u679c \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \u5171\u7ebf\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u4e3a\u4e00\u4e2a\u96f6\u5411\u91cf\uff1b\u5982\u679c \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \u4e0d\u5171\u7ebf\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u6240\u5728\u7684\u76f4\u7ebf\u552f\u4e00\u786e\u5b9a\u3002 \\boldsymbol a\\times \\boldsymbol b \\boldsymbol a\\times \\boldsymbol b \u7684\u65b9\u5411\u7a76\u7adf\u6cbf\u8fd9\u6761\u76f4\u7ebf\u7684\u54ea\u4e00\u8fb9\u5462\uff1f \u6211\u4eec\u7528\u53f3\u624b\u5b9a\u5219\u5224\u5b9a\u53f3\u624b\u5750\u6807\u7cfb\u4e2d\u5411\u91cf\u7684\u65b9\u5411\u3002\u53f3\u624b\u98df\u6307\u6307 \\boldsymbol a \\boldsymbol a \u65b9\u5411\uff0c\u638c\u5fc3\u671d \\boldsymbol b \\boldsymbol b \u7684\u53cd\u65b9\u5411\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684\u65b9\u5411\u5c31\u662f\u5927\u62c7\u6307\u6307\u5411\u7684\u65b9\u5411\u3002\u8fd9\u4e00\u70b9\u4e0e\u9ad8\u4e2d\u7269\u7406\u8bb2\u89e3\u7684\u5de6\u624b\u5b9a\u5219\u76f8\u4f3c\u3002 \u8fd9\u6837\u770b\u6765\uff0c \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u4e0e \\boldsymbol b \\times \\boldsymbol a \\boldsymbol b \\times \\boldsymbol a \u6b63\u597d\u4e92\u4e3a\u76f8\u53cd\u5411\u91cf\u3002\u5728\u53f3\u624b\u5750\u6807\u7cfb\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u5782\u76f4\u4e8e z z \u8f74\u7684\u5411\u91cf \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \uff0c\u5982\u679c \\boldsymbol b \\boldsymbol b \u5728 \\boldsymbol a \\boldsymbol a \u7684\u987a\u65f6\u9488\u65b9\u5411\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684 z z \u5750\u6807\u4e3a\u8d1f\u503c\uff1b\u5982\u679c \\boldsymbol b \\boldsymbol b \u5728 \\boldsymbol a \\boldsymbol a \u7684\u9006\u65f6\u9488\u65b9\u5411\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684 z z \u5750\u6807\u4e3a\u8d1f\u503c\uff0c\u7b80\u79f0\u201c\u987a\u8d1f\u9006\u6b63\u201d\u3002 \u5750\u6807\u8868\u793a \u00b6 \u8bbe \\boldsymbol a = (x_a, y_a, 0), \\boldsymbol b = (x_b, y_b, 0) \\boldsymbol a = (x_a, y_a, 0), \\boldsymbol b = (x_b, y_b, 0) \uff0c\u5219 \\boldsymbol a\\times \\boldsymbol b=(0,0,x_a\\cdot y_b-x_b\\cdot y_a) \\boldsymbol a\\times \\boldsymbol b=(0,0,x_a\\cdot y_b-x_b\\cdot y_a) \u3002 \u4f2a\u5411\u91cf \u00b6 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u628a\u5176\u4e2d\u4e00\u4e2a\u57fa\u5411\u91cf\u7684\u76f8\u53cd\u5411\u91cf\u66ff\u4ee3\uff0c\u53ef\u4ee5\u5f97\u5230 \\boldsymbol a = (-x_a, y_a, 0), \\boldsymbol b = (-x_b, y_b, 0),\\boldsymbol a\\times \\boldsymbol b=(0,0,-x_a\\cdot y_b+x_b\\cdot y_a) \\boldsymbol a = (-x_a, y_a, 0), \\boldsymbol b = (-x_b, y_b, 0),\\boldsymbol a\\times \\boldsymbol b=(0,0,-x_a\\cdot y_b+x_b\\cdot y_a) \u3002 \u6211\u4eec\u60ca\u5947\u5730\u53d1\u73b0 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684\u65b9\u5411\u53d8\u5316\u4e86\u3002\u6211\u4eec\u4ec5\u4ec5\u53ea\u662f\u53d6\u4e86\u4e0d\u540c\u7684\u57fa\u5411\u91cf\u800c\u5df2\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5411\u91cf\u79ef\u662f\u4f2a\u5411\u91cf\uff0c\u5b83\u5728\u5de6\u624b\u5750\u6807\u7cfb\u548c\u53f3\u624b\u5750\u6807\u7cfb\u4e0b\u662f\u4e0d\u540c\u7684\u3002\u6211\u4eec\u5728\u4e0a\u9762\u6240\u6709\u7684\u63a8\u5bfc\u53ea\u5728\u53f3\u624b\u5750\u6807\u7cfb\u4e0b\u6210\u7acb\uff0c\u5728\u5de6\u624b\u5750\u6807\u7cfb\u4e0b\uff0c\u5411\u91cf\u79ef\u9002\u7528\u201c\u5de6\u624b\u5b9a\u5219\u201d\u548c\u201c\u987a\u6b63\u9006\u8d1f\u201d\u3002 \u82e5\u7ebf\u5708\u7684\u4f4d\u7f6e\u548c\u7535\u6d41\u90fd\u5bf9\u5e94\u70b9\u7ebf\u955c\u9762\u53cd\u5c04\uff0c\u5176\u4ea7\u751f\u7684\u78c1\u573a\u4e0d\u4f1a\u662f\u539f\u78c1\u573a\u7684\u955c\u9762\u53cd\u5c04\uff0c\u4f1a\u662f\u539f\u78c1\u573a\u53cd\u5c04\u540e\uff0c\u518d\u52a0\u4ee5\u53cd\u5411\u3002 \u9ad8\u4e2d\u7269\u7406\u6d89\u53ca\u7684\u6709\u65b9\u5411\u7684\u7269\u7406\u91cf\u5f88\u591a\u4e0e\u5411\u91cf\u79ef\u6709\u5173\uff0c\u5927\u591a\u662f\u4f2a\u5411\u91cf\u3002\u6b64\u5904\u4e0d\u505a\u6df1\u7a76\u3002 \u4f8b\u9898 \u00b6 Codeforces 1254C Point Ordering","title":"\u6d45\u8c08\u5411\u91cf\u79ef"},{"location":"linear_algebra/cross_product/#_1","text":"\u5411\u91cf\u79ef\uff08Cross Product\uff09\uff0c\u53c8\u79f0\u53c9\u79ef\u3001\u5916\u79ef\uff0c\u662f\u5411\u91cf\u7684\u4e00\u79cd\u91cd\u8981\u8fd0\u7b97\u3002\u8fd9\u79cd\u8fd0\u7b97\u5728\u9ad8\u4e2d\u7269\u7406\u4e2d\u6781\u4e3a\u5e38\u7528\uff0c\u4f46\u4e0d\u8bba\u662f\u9ad8\u4e2d\u6570\u5b66\u8fd8\u662f\u9ad8\u4e2d\u7269\u7406\u6559\u6750\u5bf9\u6b64\u51e0\u4e4e\u90fd\u6ca1\u6709\u63d0\u53ca\u3002","title":"\u6d45\u8c08\u5411\u91cf\u79ef"},{"location":"linear_algebra/cross_product/#_2","text":"\u5411\u91cf\u79ef\u4ec5\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6709\u5b9a\u4e49\u3002\u8bbe\u4e24\u4e2a\u5411\u91cf \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \uff0c\u5219\u5b83\u4eec\u7684\u5411\u91cf\u79ef \\boldsymbol a\\times \\boldsymbol b \\boldsymbol a\\times \\boldsymbol b \u662f\u4e00\u4e2a\u6a21\u957f\u4e3a |\\boldsymbol a||\\boldsymbol b|\\sin{\\langle \\boldsymbol a, \\boldsymbol b\\rangle} |\\boldsymbol a||\\boldsymbol b|\\sin{\\langle \\boldsymbol a, \\boldsymbol b\\rangle} \uff0c\u65b9\u5411\u4e0e \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \u90fd\u5782\u76f4\u7684\u5411\u91cf\u3002\u6839\u636e\u4e09\u89d2\u5f62\u9762\u79ef\u516c\u5f0f S=\\dfrac{1}{2}|\\boldsymbol a||\\boldsymbol b| \\sin\\langle\\boldsymbol a, \\boldsymbol b\\rangle S=\\dfrac{1}{2}|\\boldsymbol a||\\boldsymbol b| \\sin\\langle\\boldsymbol a, \\boldsymbol b\\rangle \uff0c \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684\u6a21\u957f\u6070\u7b49\u4e8e\u4ee5 \\boldsymbol a,\\boldsymbol b \\boldsymbol a,\\boldsymbol b \u4e3a\u90bb\u8fb9\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u9762\u79ef\u3002 \u7531\u8fd9\u4e2a\u5b9a\u4e49\u53ef\u77e5\uff0c\u5982\u679c \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \u5171\u7ebf\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u4e3a\u4e00\u4e2a\u96f6\u5411\u91cf\uff1b\u5982\u679c \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \u4e0d\u5171\u7ebf\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u6240\u5728\u7684\u76f4\u7ebf\u552f\u4e00\u786e\u5b9a\u3002 \\boldsymbol a\\times \\boldsymbol b \\boldsymbol a\\times \\boldsymbol b \u7684\u65b9\u5411\u7a76\u7adf\u6cbf\u8fd9\u6761\u76f4\u7ebf\u7684\u54ea\u4e00\u8fb9\u5462\uff1f \u6211\u4eec\u7528\u53f3\u624b\u5b9a\u5219\u5224\u5b9a\u53f3\u624b\u5750\u6807\u7cfb\u4e2d\u5411\u91cf\u7684\u65b9\u5411\u3002\u53f3\u624b\u98df\u6307\u6307 \\boldsymbol a \\boldsymbol a \u65b9\u5411\uff0c\u638c\u5fc3\u671d \\boldsymbol b \\boldsymbol b \u7684\u53cd\u65b9\u5411\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684\u65b9\u5411\u5c31\u662f\u5927\u62c7\u6307\u6307\u5411\u7684\u65b9\u5411\u3002\u8fd9\u4e00\u70b9\u4e0e\u9ad8\u4e2d\u7269\u7406\u8bb2\u89e3\u7684\u5de6\u624b\u5b9a\u5219\u76f8\u4f3c\u3002 \u8fd9\u6837\u770b\u6765\uff0c \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u4e0e \\boldsymbol b \\times \\boldsymbol a \\boldsymbol b \\times \\boldsymbol a \u6b63\u597d\u4e92\u4e3a\u76f8\u53cd\u5411\u91cf\u3002\u5728\u53f3\u624b\u5750\u6807\u7cfb\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u5782\u76f4\u4e8e z z \u8f74\u7684\u5411\u91cf \\boldsymbol a, \\boldsymbol b \\boldsymbol a, \\boldsymbol b \uff0c\u5982\u679c \\boldsymbol b \\boldsymbol b \u5728 \\boldsymbol a \\boldsymbol a \u7684\u987a\u65f6\u9488\u65b9\u5411\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684 z z \u5750\u6807\u4e3a\u8d1f\u503c\uff1b\u5982\u679c \\boldsymbol b \\boldsymbol b \u5728 \\boldsymbol a \\boldsymbol a \u7684\u9006\u65f6\u9488\u65b9\u5411\uff0c\u5219 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684 z z \u5750\u6807\u4e3a\u8d1f\u503c\uff0c\u7b80\u79f0\u201c\u987a\u8d1f\u9006\u6b63\u201d\u3002","title":"\u5927\u5c0f\u4e0e\u65b9\u5411"},{"location":"linear_algebra/cross_product/#_3","text":"\u8bbe \\boldsymbol a = (x_a, y_a, 0), \\boldsymbol b = (x_b, y_b, 0) \\boldsymbol a = (x_a, y_a, 0), \\boldsymbol b = (x_b, y_b, 0) \uff0c\u5219 \\boldsymbol a\\times \\boldsymbol b=(0,0,x_a\\cdot y_b-x_b\\cdot y_a) \\boldsymbol a\\times \\boldsymbol b=(0,0,x_a\\cdot y_b-x_b\\cdot y_a) \u3002","title":"\u5750\u6807\u8868\u793a"},{"location":"linear_algebra/cross_product/#_4","text":"\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u628a\u5176\u4e2d\u4e00\u4e2a\u57fa\u5411\u91cf\u7684\u76f8\u53cd\u5411\u91cf\u66ff\u4ee3\uff0c\u53ef\u4ee5\u5f97\u5230 \\boldsymbol a = (-x_a, y_a, 0), \\boldsymbol b = (-x_b, y_b, 0),\\boldsymbol a\\times \\boldsymbol b=(0,0,-x_a\\cdot y_b+x_b\\cdot y_a) \\boldsymbol a = (-x_a, y_a, 0), \\boldsymbol b = (-x_b, y_b, 0),\\boldsymbol a\\times \\boldsymbol b=(0,0,-x_a\\cdot y_b+x_b\\cdot y_a) \u3002 \u6211\u4eec\u60ca\u5947\u5730\u53d1\u73b0 \\boldsymbol a \\times \\boldsymbol b \\boldsymbol a \\times \\boldsymbol b \u7684\u65b9\u5411\u53d8\u5316\u4e86\u3002\u6211\u4eec\u4ec5\u4ec5\u53ea\u662f\u53d6\u4e86\u4e0d\u540c\u7684\u57fa\u5411\u91cf\u800c\u5df2\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5411\u91cf\u79ef\u662f\u4f2a\u5411\u91cf\uff0c\u5b83\u5728\u5de6\u624b\u5750\u6807\u7cfb\u548c\u53f3\u624b\u5750\u6807\u7cfb\u4e0b\u662f\u4e0d\u540c\u7684\u3002\u6211\u4eec\u5728\u4e0a\u9762\u6240\u6709\u7684\u63a8\u5bfc\u53ea\u5728\u53f3\u624b\u5750\u6807\u7cfb\u4e0b\u6210\u7acb\uff0c\u5728\u5de6\u624b\u5750\u6807\u7cfb\u4e0b\uff0c\u5411\u91cf\u79ef\u9002\u7528\u201c\u5de6\u624b\u5b9a\u5219\u201d\u548c\u201c\u987a\u6b63\u9006\u8d1f\u201d\u3002 \u82e5\u7ebf\u5708\u7684\u4f4d\u7f6e\u548c\u7535\u6d41\u90fd\u5bf9\u5e94\u70b9\u7ebf\u955c\u9762\u53cd\u5c04\uff0c\u5176\u4ea7\u751f\u7684\u78c1\u573a\u4e0d\u4f1a\u662f\u539f\u78c1\u573a\u7684\u955c\u9762\u53cd\u5c04\uff0c\u4f1a\u662f\u539f\u78c1\u573a\u53cd\u5c04\u540e\uff0c\u518d\u52a0\u4ee5\u53cd\u5411\u3002 \u9ad8\u4e2d\u7269\u7406\u6d89\u53ca\u7684\u6709\u65b9\u5411\u7684\u7269\u7406\u91cf\u5f88\u591a\u4e0e\u5411\u91cf\u79ef\u6709\u5173\uff0c\u5927\u591a\u662f\u4f2a\u5411\u91cf\u3002\u6b64\u5904\u4e0d\u505a\u6df1\u7a76\u3002","title":"\u4f2a\u5411\u91cf"},{"location":"linear_algebra/cross_product/#_5","text":"Codeforces 1254C Point Ordering","title":"\u4f8b\u9898"},{"location":"linear_algebra/det/","text":"\u77e9\u9635\u7684\u884c\u5217\u5f0f\u5728\u8bf8\u591a\u9886\u57df\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5176\u6700\u5e7f\u4e3a\u4eba\u77e5\u7684\u5e94\u7528\u4fbf\u662f\u5728 Matrix-Tree \u5b9a\u7406\u4e2d\u6c42\u57fa\u5c14\u970d\u592b\u77e9\u9635\u7684\u4ee3\u6570\u4f59\u5b50\u5f0f\u3002 \u6839\u636e\u884c\u5217\u5f0f\u7684\u5b9a\u4e49\uff0c\u6c42\u5176\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe O(n\\cdot n!) O(n\\cdot n!) \u3002\u4e8b\u5b9e\u4e0a\uff0c\u76ee\u524d\u5df2\u7ecf\u5b58\u5728\u80fd\u591f\u4ee5\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u884c\u5217\u5f0f\u7684\u7b97\u6cd5\u3002 \u4e00\u4e9b\u7ea6\u5b9a \u00b6 \u7528 A_{i, j} A_{i, j} \u8868\u793a\u4e00\u4e2a\u77e9\u9635 A A \u7b2c i i \u884c\u7b2c j j \u5217\u7684\u503c\uff1b \u7528 |A| |A| \u8868\u793a\u5173\u4e8e n n \u9636\u65b9\u9635 A A \u7684\u884c\u5217\u5f0f\uff1b \u884c\u5217\u5f0f\u7684\u4e00\u822c\u5b9a\u4e49 \u00b6 n n \u9636\u884c\u5217\u5f0f\u662f\u5173\u4e8e\u4e00\u4e2a n n \u9636\u65b9\u9635\u7684\u51fd\u6570\uff0c\u5199\u4f5c |A| |A| \u6216 \\text{det}(A) \\text{det}(A) \u3002 \u8bbe P P \u4e3a 1 1 ~ n n \u7684\u4e00\u4e2a\u6392\u5217\uff0c \\alpha(P) \\alpha(P) \u4e3a\u6392\u5217 P P \u4e2d\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u6709 |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217 }}(-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217 }}(-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} \u77e9\u9635\u53d8\u6362\u4e0e\u884c\u5217\u5f0f\u503c\u7684\u6539\u53d8 \u00b6 \u7531\u884c\u5217\u5f0f\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u679a\u4e3e\u6240\u6709\u7684 n! n! \u79cd\u6392\u5217\u624d\u80fd\u591f\u5f97\u5230\u884c\u5217\u5f0f\u7684\u503c\u3002\u4e3a\u4e86\u6539\u53d8\u6211\u4eec\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5c31\u5fc5\u987b\u5bf9\u77e9\u9635\u8fdb\u884c\u4e00\u5b9a\u7684\u53d8\u6362\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u5f15\u7406\uff1a \u5f15\u7406 1. \u4ea4\u6362\u77e9\u9635\u7684\u4e24\u884c\uff0c\u884c\u5217\u5f0f\u503c\u53d8\u4e3a\u76f8\u53cd\u6570 \u5b9a\u4e49 \\omega(A, P) = (-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} \\omega(A, P) = (-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} \uff0c\u90a3\u4e48 |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P) |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P) \u3002 \u4ea4\u6362\u77e9\u9635\u7684\u4e24\u884c i, j i, j \u5f97\u5230\u77e9\u9635 A' A' \u3002\u8bbe\u540c\u6837\u4ea4\u6362 P P \u7684\u4e24\u4e2a\u5143\u7d20 i, j i, j \u5f97\u5230 P' P' \uff0c\u663e\u7136\u6709 \\alpha(P') = \\alpha(P) \\pm 1 \\alpha(P') = \\alpha(P) \\pm 1 \uff0c\u5373 (-1) ^ {\\alpha(P`)} = -(-1) ^ {\\alpha(P)} (-1) ^ {\\alpha(P`)} = -(-1) ^ {\\alpha(P)} \u3002 \u6839\u636e\u6211\u4eec\u5bf9 A' A' \u548c P' P' \u7684\u5b9a\u4e49\uff0c\u663e\u7136\u6709 \\omega(A, P) = \\omega(A', P') \\omega(A, P) = \\omega(A', P') \u3002 \u90a3\u4e48 \\begin{aligned}|A'| &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A', P')\\\\ &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P)\\\\ &= -|A|\\end{aligned} \\begin{aligned}|A'| &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A', P')\\\\ &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P)\\\\ &= -|A|\\end{aligned} \u5f15\u7406 2. \u6709\u4e24\u884c\u5b8c\u5168\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u884c\u5217\u5f0f\u4e3a 0 0 \u7531 \u5f15\u7406 1 \u53ef\u77e5\uff0c\u4ea4\u6362\u8be5\u77e9\u9635\u7684\u4efb\u610f\u4e24\u884c\uff0c\u5176\u884c\u5217\u5f0f\u53d8\u4e3a\u76f8\u53cd\u6570\u3002\u82e5\u4ea4\u6362\u8be5\u77e9\u9635\u76f8\u540c\u7684\u90a3\u4e24\u884c\uff0c\u5176\u77e9\u9635\u4e0d\u53d8\uff0c\u884c\u5217\u5f0f\u53d8\u4e3a\u76f8\u53cd\u6570\uff0c\u5373 |A| = -|A| |A| = -|A| \u3002\u6545 |A| = 0 |A| = 0 \u3002 \u5f15\u7406 3. \u5c06\u77e9\u9635\u7684\u67d0\u4e00\u884c\u4e58\u4ee5\u4e00\u4e2a\u5b9e\u6570 k k \uff0c\u5176\u884c\u5217\u5f0f\u53d8\u4e3a\u539f\u6765\u7684 k k \u500d \u6613\u8bc1\u3002 \u5f15\u7406 4. \u82e5\u4e24\u77e9\u9635\u9664\u4e86\u4e00\u884c\u4e4b\u5916\u5b8c\u5168\u76f8\u540c\uff0c\u5c06\u4e24\u77e9\u9635\u76f8\u52a0\u5e76\u51cf\u53bb\u76f8\u540c\u90e8\u5206\u5f97\u5230\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e3a\u8be5\u4e24\u77e9\u9635\u884c\u5217\u5f0f\u4e4b\u548c \u5373 \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+Y_{1} & \\dots & X_{n-1}+Y_{n-1} & X_{n}+Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+Y_{1} & \\dots & X_{n-1}+Y_{n-1} & X_{n}+Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \u6613\u8bc1\u3002 \u5f15\u7406 5. \u77e9\u9635\u7684\u67d0\u4e00\u884c\u52a0\u4e0a\u53e6\u4e00\u884c\u7684\u500d\u6570\uff0c\u5176\u884c\u5217\u5f0f\u4e0d\u53d8 \u5373 \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u5f15\u7528 \u5f15\u7406 2, 3, 4 \u8bc1\u660e\uff1a \\begin{aligned}&\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\k\\cdot Y_{1} & \\dots & k\\cdot Y_{n-1} & k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+k\\cdot\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\end{aligned} \\begin{aligned}&\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\k\\cdot Y_{1} & \\dots & k\\cdot Y_{n-1} & k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+k\\cdot\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\end{aligned} \u5bf9\u4e8e\u4efb\u610f\u77e9\u9635\uff0c\u4ea4\u6362\u5176\u4efb\u610f\u4e24\u884c\uff0c\u5176\u884c\u5217\u5f0f\u53d8\u4e3a\u76f8\u53cd\u6570\uff1b\u5bf9\u4e8e\u4efb\u610f\u77e9\u9635\uff0c\u5176\u4e2d\u4efb\u610f\u4e00\u884c\u52a0\u4e0a\u4efb\u610f\u53e6\u4e00\u884c\u7684\u500d\u6570\uff0c\u5176\u884c\u5217\u5f0f\u4e0d\u53d8\u3002 \u7279\u6b8a\u77e9\u9635\u7684\u884c\u5217\u5f0f \u00b6 \u5bf9\u4e8e\u4e00\u4e2a n n \u9636\u65b9\u9635\uff0c\u6216\u662f n n \u9636\u884c\u5217\u5f0f\uff0c\u5176\u4ece\u5de6\u4e0a\u89d2\u81f3\u53f3\u4e0b\u89d2\u8fde\u7eed n n \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\uff0c\u79f0\u4e3a\u5b83\u7684\u4e3b\u5bf9\u89d2\u7ebf\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u65b9\u9635\uff0c\u82e5\u5176\u4e3b\u5bf9\u89d2\u7ebf\u4ee5\u4e0b\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e3a 0 0 \uff0c\u5219\u79f0\u4e4b\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\uff1b\u82e5\u5176\u4e3b\u5bf9\u89d2\u7ebf\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u4e3a 0 0 \uff0c\u5219\u79f0\u4e4b\u4e3a\u4e0b\u4e09\u89d2\u77e9\u9635\u3002 \u7531\u884c\u5217\u5f0f\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c\u82e5 A A \u662f\u4e0a\u4e09\u89d2\u77e9\u9635\u6216\u4e0b\u4e09\u89d2\u77e9\u9635\uff0c |A| = \\prod\\limits_{i=1}^nA_{i,i} |A| = \\prod\\limits_{i=1}^nA_{i,i} \u3002 \u6c42\u884c\u5217\u5f0f \u00b6 \u53ea\u8981\u8fd0\u7528 \u5f15\u7406 1 \u548c \u5f15\u7406 5 \uff0c\u7528\u7c7b\u4f3c\u9ad8\u65af\u6d88\u5143\u7684\u65b9\u6cd5\u5c06\u77e9\u9635\u8f6c\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 O(n^3) O(n^3) \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e86\u3002","title":"\u5173\u4e8e\u884c\u5217\u5f0f\u8ba1\u7b97\u7684\u8be6\u7ec6\u8bc1\u660e"},{"location":"linear_algebra/det/#_1","text":"\u7528 A_{i, j} A_{i, j} \u8868\u793a\u4e00\u4e2a\u77e9\u9635 A A \u7b2c i i \u884c\u7b2c j j \u5217\u7684\u503c\uff1b \u7528 |A| |A| \u8868\u793a\u5173\u4e8e n n \u9636\u65b9\u9635 A A \u7684\u884c\u5217\u5f0f\uff1b","title":"\u4e00\u4e9b\u7ea6\u5b9a"},{"location":"linear_algebra/det/#_2","text":"n n \u9636\u884c\u5217\u5f0f\u662f\u5173\u4e8e\u4e00\u4e2a n n \u9636\u65b9\u9635\u7684\u51fd\u6570\uff0c\u5199\u4f5c |A| |A| \u6216 \\text{det}(A) \\text{det}(A) \u3002 \u8bbe P P \u4e3a 1 1 ~ n n \u7684\u4e00\u4e2a\u6392\u5217\uff0c \\alpha(P) \\alpha(P) \u4e3a\u6392\u5217 P P \u4e2d\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u6709 |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217 }}(-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217 }}(-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i}","title":"\u884c\u5217\u5f0f\u7684\u4e00\u822c\u5b9a\u4e49"},{"location":"linear_algebra/det/#_3","text":"\u7531\u884c\u5217\u5f0f\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u679a\u4e3e\u6240\u6709\u7684 n! n! \u79cd\u6392\u5217\u624d\u80fd\u591f\u5f97\u5230\u884c\u5217\u5f0f\u7684\u503c\u3002\u4e3a\u4e86\u6539\u53d8\u6211\u4eec\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5c31\u5fc5\u987b\u5bf9\u77e9\u9635\u8fdb\u884c\u4e00\u5b9a\u7684\u53d8\u6362\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u5f15\u7406\uff1a \u5f15\u7406 1. \u4ea4\u6362\u77e9\u9635\u7684\u4e24\u884c\uff0c\u884c\u5217\u5f0f\u503c\u53d8\u4e3a\u76f8\u53cd\u6570 \u5b9a\u4e49 \\omega(A, P) = (-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} \\omega(A, P) = (-1)^{\\alpha(P)}\\cdot\\prod_{i=1}^nA_{i, P_i} \uff0c\u90a3\u4e48 |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P) |A| = \\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P) \u3002 \u4ea4\u6362\u77e9\u9635\u7684\u4e24\u884c i, j i, j \u5f97\u5230\u77e9\u9635 A' A' \u3002\u8bbe\u540c\u6837\u4ea4\u6362 P P \u7684\u4e24\u4e2a\u5143\u7d20 i, j i, j \u5f97\u5230 P' P' \uff0c\u663e\u7136\u6709 \\alpha(P') = \\alpha(P) \\pm 1 \\alpha(P') = \\alpha(P) \\pm 1 \uff0c\u5373 (-1) ^ {\\alpha(P`)} = -(-1) ^ {\\alpha(P)} (-1) ^ {\\alpha(P`)} = -(-1) ^ {\\alpha(P)} \u3002 \u6839\u636e\u6211\u4eec\u5bf9 A' A' \u548c P' P' \u7684\u5b9a\u4e49\uff0c\u663e\u7136\u6709 \\omega(A, P) = \\omega(A', P') \\omega(A, P) = \\omega(A', P') \u3002 \u90a3\u4e48 \\begin{aligned}|A'| &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A', P')\\\\ &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P)\\\\ &= -|A|\\end{aligned} \\begin{aligned}|A'| &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A', P')\\\\ &= -\\sum\\limits_{P \\text{ \u662f } 1 \\text{ \u81f3 } n \\text{ \u7684\u4e00\u4e2a\u6392\u5217}}\\omega(A, P)\\\\ &= -|A|\\end{aligned} \u5f15\u7406 2. \u6709\u4e24\u884c\u5b8c\u5168\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u884c\u5217\u5f0f\u4e3a 0 0 \u7531 \u5f15\u7406 1 \u53ef\u77e5\uff0c\u4ea4\u6362\u8be5\u77e9\u9635\u7684\u4efb\u610f\u4e24\u884c\uff0c\u5176\u884c\u5217\u5f0f\u53d8\u4e3a\u76f8\u53cd\u6570\u3002\u82e5\u4ea4\u6362\u8be5\u77e9\u9635\u76f8\u540c\u7684\u90a3\u4e24\u884c\uff0c\u5176\u77e9\u9635\u4e0d\u53d8\uff0c\u884c\u5217\u5f0f\u53d8\u4e3a\u76f8\u53cd\u6570\uff0c\u5373 |A| = -|A| |A| = -|A| \u3002\u6545 |A| = 0 |A| = 0 \u3002 \u5f15\u7406 3. \u5c06\u77e9\u9635\u7684\u67d0\u4e00\u884c\u4e58\u4ee5\u4e00\u4e2a\u5b9e\u6570 k k \uff0c\u5176\u884c\u5217\u5f0f\u53d8\u4e3a\u539f\u6765\u7684 k k \u500d \u6613\u8bc1\u3002 \u5f15\u7406 4. \u82e5\u4e24\u77e9\u9635\u9664\u4e86\u4e00\u884c\u4e4b\u5916\u5b8c\u5168\u76f8\u540c\uff0c\u5c06\u4e24\u77e9\u9635\u76f8\u52a0\u5e76\u51cf\u53bb\u76f8\u540c\u90e8\u5206\u5f97\u5230\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e3a\u8be5\u4e24\u77e9\u9635\u884c\u5217\u5f0f\u4e4b\u548c \u5373 \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+Y_{1} & \\dots & X_{n-1}+Y_{n-1} & X_{n}+Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+Y_{1} & \\dots & X_{n-1}+Y_{n-1} & X_{n}+Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \u6613\u8bc1\u3002 \u5f15\u7406 5. \u77e9\u9635\u7684\u67d0\u4e00\u884c\u52a0\u4e0a\u53e6\u4e00\u884c\u7684\u500d\u6570\uff0c\u5176\u884c\u5217\u5f0f\u4e0d\u53d8 \u5373 \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\ \\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right| \u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u5f15\u7528 \u5f15\u7406 2, 3, 4 \u8bc1\u660e\uff1a \\begin{aligned}&\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\k\\cdot Y_{1} & \\dots & k\\cdot Y_{n-1} & k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+k\\cdot\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\end{aligned} \\begin{aligned}&\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1}+k\\cdot Y_{1} & \\dots & X_{n-1}+k\\cdot Y_{n-1} & X_{n}+k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\k\\cdot Y_{1} & \\dots & k\\cdot Y_{n-1} & k\\cdot Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|+k\\cdot\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\\\&=\\left|\\begin{array}{ccc} A_{1,1} & \\dots & A_{1,n-1} & A_{1,n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\X_{1} & \\dots & X_{n-1} & X_{n}\\\\Y_{1} & \\dots & Y_{n-1} & Y_{n}\\\\\\cdots & \\cdots & \\cdots & \\cdots\\\\A_{n,1} & \\cdots & A_{n,n-1} & A_{n,n}\\end{array}\\right|\\end{aligned} \u5bf9\u4e8e\u4efb\u610f\u77e9\u9635\uff0c\u4ea4\u6362\u5176\u4efb\u610f\u4e24\u884c\uff0c\u5176\u884c\u5217\u5f0f\u53d8\u4e3a\u76f8\u53cd\u6570\uff1b\u5bf9\u4e8e\u4efb\u610f\u77e9\u9635\uff0c\u5176\u4e2d\u4efb\u610f\u4e00\u884c\u52a0\u4e0a\u4efb\u610f\u53e6\u4e00\u884c\u7684\u500d\u6570\uff0c\u5176\u884c\u5217\u5f0f\u4e0d\u53d8\u3002","title":"\u77e9\u9635\u53d8\u6362\u4e0e\u884c\u5217\u5f0f\u503c\u7684\u6539\u53d8"},{"location":"linear_algebra/det/#_4","text":"\u5bf9\u4e8e\u4e00\u4e2a n n \u9636\u65b9\u9635\uff0c\u6216\u662f n n \u9636\u884c\u5217\u5f0f\uff0c\u5176\u4ece\u5de6\u4e0a\u89d2\u81f3\u53f3\u4e0b\u89d2\u8fde\u7eed n n \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\uff0c\u79f0\u4e3a\u5b83\u7684\u4e3b\u5bf9\u89d2\u7ebf\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u65b9\u9635\uff0c\u82e5\u5176\u4e3b\u5bf9\u89d2\u7ebf\u4ee5\u4e0b\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e3a 0 0 \uff0c\u5219\u79f0\u4e4b\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\uff1b\u82e5\u5176\u4e3b\u5bf9\u89d2\u7ebf\u4ee5\u4e0a\u7684\u6240\u6709\u5143\u7d20\u4e3a 0 0 \uff0c\u5219\u79f0\u4e4b\u4e3a\u4e0b\u4e09\u89d2\u77e9\u9635\u3002 \u7531\u884c\u5217\u5f0f\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c\u82e5 A A \u662f\u4e0a\u4e09\u89d2\u77e9\u9635\u6216\u4e0b\u4e09\u89d2\u77e9\u9635\uff0c |A| = \\prod\\limits_{i=1}^nA_{i,i} |A| = \\prod\\limits_{i=1}^nA_{i,i} \u3002","title":"\u7279\u6b8a\u77e9\u9635\u7684\u884c\u5217\u5f0f"},{"location":"linear_algebra/det/#_5","text":"\u53ea\u8981\u8fd0\u7528 \u5f15\u7406 1 \u548c \u5f15\u7406 5 \uff0c\u7528\u7c7b\u4f3c\u9ad8\u65af\u6d88\u5143\u7684\u65b9\u6cd5\u5c06\u77e9\u9635\u8f6c\u4e3a\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 O(n^3) O(n^3) \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u77e9\u9635\u7684\u884c\u5217\u5f0f\u4e86\u3002","title":"\u6c42\u884c\u5217\u5f0f"},{"location":"number_theory/euler/","text":"\u6b27\u62c9\u51fd\u6570\u548c\u6b27\u62c9\u5b9a\u7406 \u00b6 \u6b27\u62c9\u51fd\u6570\u662f\u4e00\u79cd\u5b9a\u4e49\u5728\u6b63\u6574\u6570\u57df\u7684\u6570\u8bba\u51fd\u6570\uff0c\u5728\u5269\u4f59\u7cfb\u7684\u8fd0\u7b97\u4e2d\u6709\u91cd\u8981\u4f5c\u7528\u3002 \u5b9a\u4e49 \u00b6 \u6b27\u62c9\u51fd\u6570\u7684\u7b26\u53f7\u662f \\varphi \\varphi \uff0c\u8bfb\u4f5c phi\u3002 \\varphi(n) \\varphi(n) \u8868\u793a\u5728\u4e0d\u5927\u4e8e n n \u7684\u6240\u6709\u6b63\u6574\u6570\u4e2d\uff0c\u4e0e n n \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6309\u7167\u8fd9\u4e2a\u5b9a\u4e49\uff0c \\varphi(1)=1 \\varphi(1)=1 \u3002 \u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff0c\u5bf9\u4e8e\u4efb\u610f\u6ee1\u8db3 (a,b)=1 (a,b)=1 \u7684 a,b a,b \uff0c\u90fd\u6709 \\varphi(a\\cdot b)=\\varphi(a)\\cdot\\varphi(b) \\varphi(a\\cdot b)=\\varphi(a)\\cdot\\varphi(b) \u3002 \u4e00\u4e9b\u57fa\u672c\u516c\u5f0f\u3001\u7ed3\u8bba \u00b6 \u663e\u7136\uff0c\u5bf9\u4e8e\u4efb\u610f\u8d28\u6570 p p \uff0c\u5b83\u7684\u6b27\u62c9\u51fd\u6570\u503c \\varphi(p) \\varphi(p) \u90fd\u7b49\u4e8e p-1 p-1 \uff0c\u56e0\u4e3a\u4efb\u610f\u5c0f\u4e8e p p \u7684\u6570\u90fd\u4e0e p p \u4e92\u8d28\u3002\u4e0d\u663e\u7136\u5730\uff0c\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 i i \uff0c\u8bbe\u5176\u6240\u6709\u8d28\u56e0\u6570\u5206\u522b\u4e3a p_1,p_2,...,p_s p_1,p_2,...,p_s \uff0c\u90a3 i i \u7684\u6b27\u62c9\u51fd\u6570\u503c \\varphi(i)=i\\cdot\\prod\\limits_{j=1}^s\\dfrac{p_j-1}{p_j} \\varphi(i)=i\\cdot\\prod\\limits_{j=1}^s\\dfrac{p_j-1}{p_j} \u3002 \u5f15\u7406 1. \u82e5 p p \u4e3a\u8d28\u6570\uff0c k k \u4e3a\u6b63\u6574\u6570\uff0c\u5219 \\varphi(p^k)=p^k-p^{k-1} \\varphi(p^k)=p^k-p^{k-1} \u4e00\u4e2a\u6570 i i \u4e0d\u4e0e p^k p^k \u4e92\u8d28\u5f53\u4e14\u4ec5\u5f53 p\\mid i p\\mid i \uff0c\u800c\u5728 \\left[1,p^k\\right] \\left[1,p^k\\right] \u4e2d\u8fd9\u6837\u7684 i i \u4e00\u5171\u6709 \\dfrac{p^k}{p}=p^{k-1} \\dfrac{p^k}{p}=p^{k-1} \u4e2a\uff0c\u6240\u4ee5 \\varphi(p^k)=p^k-p^{k-1} \\varphi(p^k)=p^k-p^{k-1} \u3002 \u5f15\u7406 2. \u6839\u636e\u552f\u4e00\u5206\u89e3\u5b9a\u7406\u5c06 n n \u5206\u89e3\u4e3a \\prod\\limits_{i=1}^s{p_i}^{k_i} \\prod\\limits_{i=1}^s{p_i}^{k_i} \uff0c\u5219 \\varphi(n)=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i} \\varphi(n)=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i} \u7531\u4e8e\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570 \\begin{aligned}\\varphi(n)&=\\prod\\limits_{i=1}^s\\varphi({p_i}^{k_i})\\\\&=\\prod\\limits_{i=1}^s({p_i}^{k_i}-{p_i}^{k_i-1})\\\\&=\\prod\\limits_{i=1}^s\\left({p_i-1}\\right)\\cdot{p_i}^{k_i-1}\\\\&=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i}\\end{aligned} \\begin{aligned}\\varphi(n)&=\\prod\\limits_{i=1}^s\\varphi({p_i}^{k_i})\\\\&=\\prod\\limits_{i=1}^s({p_i}^{k_i}-{p_i}^{k_i-1})\\\\&=\\prod\\limits_{i=1}^s\\left({p_i-1}\\right)\\cdot{p_i}^{k_i-1}\\\\&=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i}\\end{aligned} \u5f15\u7406 2 \u662f\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570\u6700\u4e00\u822c\u7684\u516c\u5f0f\uff0c\u6839\u636e\u5b83\u53ef\u4ee5 O\\left(\\sqrt{n}\\right) O\\left(\\sqrt{n}\\right) \u5730\u6c42\u51fa \\varphi(n) \\varphi(n) \u3002 \u7ebf\u6027\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \u6839\u636e\u6b27\u62c9\u51fd\u6570\u7684\u79ef\u6027\u548c \u5f15\u7406 2 \uff0c\u53ef\u5f97\u5bf9\u4e8e\u4efb\u610f\u8d28\u6570 p p \u6709 \\varphi(n\\cdot p)=\\begin{cases}\\varphi(n)\\cdot(p-1)&\\text{if }(n,p)=1\\\\\\varphi(n)\\cdot p&\\text{if }(n,p)\\neq 1\\end{cases} \\varphi(n\\cdot p)=\\begin{cases}\\varphi(n)\\cdot(p-1)&\\text{if }(n,p)=1\\\\\\varphi(n)\\cdot p&\\text{if }(n,p)\\neq 1\\end{cases} \u5728\u7b5b\u7d20\u6570\u7684\u540c\u65f6\u53ef\u4ee5\u6c42\u51fa\u6b27\u62c9\u51fd\u6570\u3002 phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ){ if ( ! vist [ i ]) prime [ ++ cnt ] = i ; for ( int j = 1 ; j <= cnt ; ++ j ){ if ( i % prime [ j ]) phi [ i * prime [ j ]] = phi [ i ] * ( prime [ j ] - 1 ); else { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } } } \u6b27\u62c9\u5b9a\u7406 \u00b6 \u5bf9\u4e8e\u4efb\u610f a,p a,p \u6ee1\u8db3 (a,p)=1 (a,p)=1 \uff0c a^{\\varphi(p)}\\equiv 1\\pmod p a^{\\varphi(p)}\\equiv 1\\pmod p \u3002 \u8fd9\u4e00\u70b9\u53ef\u4ee5\u6784\u9020\u8bc1\u660e\u3002\u8bbe \\varphi(p) \\varphi(p) \u4e2a\u6b63\u6574\u6570 m_1,m_2,\\ldots,m_{\\varphi(p)} m_1,m_2,\\ldots,m_{\\varphi(p)} \u6784\u6210 p p \u7684\u4e00\u4e2a\u65e2\u7ea6\u5269\u4f59\u7cfb\uff0c\u6839\u636e\u65e2\u7ea6\u5269\u4f59\u7cfb\u7684\u5b9a\u4e49\u53ef\u4ee5\u5f97\u5230 (m_i,p)=1 (m_i,p)=1 \u3002 \u5bf9\u4e8e\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u6570 m_i,m_j m_i,m_j \uff0c\u7531\u4e8e (a,p)=1 (a,p)=1 \uff0c a\\cdot (m_i-m_j)\\nmid p a\\cdot (m_i-m_j)\\nmid p \u3002\u6362\u8a00\u4e4b a\\cdot m_i a\\cdot m_i \u4e0e a\\cdot m_j a\\cdot m_j \u5728\u6a21 p p \u610f\u4e49\u4e0b\u4e0d\u540c\u4f59\u3002 \u7531\u4e8e\u5176\u4e2d\u7684\u6570\u4e24\u4e24\u4e0d\u540c\u4f59\uff0c a\\cdot m_1,a\\cdot m_2,\\ldots,a\\cdot m_{\\varphi(p)} a\\cdot m_1,a\\cdot m_2,\\ldots,a\\cdot m_{\\varphi(p)} \u4e5f\u6784\u6210 p p \u7684\u4e00\u4e2a\u65e2\u7ea6\u5269\u4f59\u7cfb\u3002\u4e8e\u662f \\prod(a\\cdot m_i)\\equiv\\prod m_i\\pmod p \\prod(a\\cdot m_i)\\equiv\\prod m_i\\pmod p \uff0c\u5373 a^{\\varphi(p)}\\equiv 1\\pmod p a^{\\varphi(p)}\\equiv 1\\pmod p \u3002 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u00b6 \u5bf9\u4e8e\u4efb\u610f a a \u548c\u4efb\u610f\u8d28\u6570 p p \u6ee1\u8db3 p \\nmid a p \\nmid a \uff0c a^{p}\\equiv a\\pmod p a^{p}\\equiv a\\pmod p \u3002 \u8d39\u9a6c\u5c0f\u5b9a\u7406\u662f\u6b27\u62c9\u5b9a\u7406\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u66f4\u7b80\u6d01\u7684\u6570\u5b66\u5f52\u7eb3\u6cd5\u6765\u8bc1\u660e\u5b83\uff1a \u663e\u7136 1^{p}\\equiv 1\\pmod p 1^{p}\\equiv 1\\pmod p \u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e a^{p}\\equiv a\\pmod{p} a^{p}\\equiv a\\pmod{p} \uff0c\u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406 (a+1)^{p}=\\sum\\limits_{i=0}^{p}\\binom{p}{i}\\cdot a^i (a+1)^{p}=\\sum\\limits_{i=0}^{p}\\binom{p}{i}\\cdot a^i \u5176\u4e2d\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570 \\binom{p}{i} \\binom{p}{i} \uff0c\u7531\u4e8e p p \u4e0e\u4efb\u610f\u53ef\u80fd\u7684 i i \u4e92\u8d28\uff08\u9664\u4e86 i=0 i=0 \u548c i=p i=p \uff09\uff0c\u56e0\u6b64 \\forall i\\neq 0 \\text{ \u4e14 } i\\neq p,\\binom{p}{i}\\equiv 0\\pmod{p} \\forall i\\neq 0 \\text{ \u4e14 } i\\neq p,\\binom{p}{i}\\equiv 0\\pmod{p} \uff0c\u800c\u5bf9\u4e8e i=0 i=0 \u548c i=p i=p \uff0c\u663e\u7136 \\binom{p}{i}=1 \\binom{p}{i}=1 \u3002\u4e8e\u662f\u53ef\u4ee5\u5c06\u539f\u5f0f\u5199\u4f5c (a+1)^p\\equiv a^{p}+1\\pmod{p} (a+1)^p\\equiv a^{p}+1\\pmod{p} \u5373 (a+1)^p\\equiv a+1\\pmod p (a+1)^p\\equiv a+1\\pmod p \u5f97\u8bc1\u3002 \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 \u00b6 \u5bf9\u4e8e\u4efb\u610f a,b,p a,b,p \uff0c a^{b}\\equiv\\begin{cases}a^b&\\text{if }b<\\varphi(p)\\\\a^{b\\bmod \\varphi(p)+\\varphi(p)}&\\text{if }b\\ge\\varphi(p)\\end{cases}\\pmod{p} a^{b}\\equiv\\begin{cases}a^b&\\text{if }b<\\varphi(p)\\\\a^{b\\bmod \\varphi(p)+\\varphi(p)}&\\text{if }b\\ge\\varphi(p)\\end{cases}\\pmod{p} \u8bc1\u660e\u7565\u3002 \u5d4c\u5957\u5e42 \u00b6 \u6c42 n^{n^{n^{\\ldots}}}\\bmod p n^{n^{n^{\\ldots}}}\\bmod p \u3002 \u6839\u636e\u6269\u5c55\u6b27\u62c9\u5b9a\u7406 n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(p)+\\varphi(p)}\\pmod p n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(p)+\\varphi(p)}\\pmod p \u800c n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(\\varphi(p))+\\varphi(\\varphi(p))}\\pmod {\\varphi(p)} n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(\\varphi(p))+\\varphi(\\varphi(p))}\\pmod {\\varphi(p)} \u6bcf\u8fed\u4ee3\u4e00\u6b21\uff0c\u6a21\u6570\u5c31\u53d8\u4e3a\u5176\u6b27\u62c9\u51fd\u6570\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728 O(\\log p) O(\\log p) \u7ea7\u522b\u6b21\u8fed\u4ee3\u5185\uff0c\u6a21\u6570\u53ef\u4ee5\u964d\u81f3 1 1 \uff0c\u6b64\u65f6\u5f0f\u5b50\u503c\u6052\u4e3a 0 0 \u3002 int solve ( int n , int p ){ if ( p == 1 ) return 0 ; return qpow ( n , solve ( n , phi [ p ]) + phi [ p ]) % p ; } \u7531\u4e8e\u4f7f\u7528\u4e86\u5feb\u901f\u5e42\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log^2 p) O(n\\log^2 p) \u3002\u7c7b\u4f3c\u7684\u5f0f\u5b50\u90fd\u53ef\u4ee5\u5957\u7528\u8fd9\u79cd\u65b9\u6cd5\u8ba1\u7b97\u3002 \u4f8b\u9898 \u00b6 \u4e0a\u5e1d\u4e0e\u96c6\u5408\u7684\u6b63\u786e\u7528\u6cd5 \u70b8\u8116\u9f99I \u76f8\u9022\u662f\u95ee\u5019","title":"\u6b27\u62c9\u51fd\u6570\u548c\u6b27\u62c9\u5b9a\u7406"},{"location":"number_theory/euler/#_1","text":"\u6b27\u62c9\u51fd\u6570\u662f\u4e00\u79cd\u5b9a\u4e49\u5728\u6b63\u6574\u6570\u57df\u7684\u6570\u8bba\u51fd\u6570\uff0c\u5728\u5269\u4f59\u7cfb\u7684\u8fd0\u7b97\u4e2d\u6709\u91cd\u8981\u4f5c\u7528\u3002","title":"\u6b27\u62c9\u51fd\u6570\u548c\u6b27\u62c9\u5b9a\u7406"},{"location":"number_theory/euler/#_2","text":"\u6b27\u62c9\u51fd\u6570\u7684\u7b26\u53f7\u662f \\varphi \\varphi \uff0c\u8bfb\u4f5c phi\u3002 \\varphi(n) \\varphi(n) \u8868\u793a\u5728\u4e0d\u5927\u4e8e n n \u7684\u6240\u6709\u6b63\u6574\u6570\u4e2d\uff0c\u4e0e n n \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6309\u7167\u8fd9\u4e2a\u5b9a\u4e49\uff0c \\varphi(1)=1 \\varphi(1)=1 \u3002 \u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff0c\u5bf9\u4e8e\u4efb\u610f\u6ee1\u8db3 (a,b)=1 (a,b)=1 \u7684 a,b a,b \uff0c\u90fd\u6709 \\varphi(a\\cdot b)=\\varphi(a)\\cdot\\varphi(b) \\varphi(a\\cdot b)=\\varphi(a)\\cdot\\varphi(b) \u3002","title":"\u5b9a\u4e49"},{"location":"number_theory/euler/#_3","text":"\u663e\u7136\uff0c\u5bf9\u4e8e\u4efb\u610f\u8d28\u6570 p p \uff0c\u5b83\u7684\u6b27\u62c9\u51fd\u6570\u503c \\varphi(p) \\varphi(p) \u90fd\u7b49\u4e8e p-1 p-1 \uff0c\u56e0\u4e3a\u4efb\u610f\u5c0f\u4e8e p p \u7684\u6570\u90fd\u4e0e p p \u4e92\u8d28\u3002\u4e0d\u663e\u7136\u5730\uff0c\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 i i \uff0c\u8bbe\u5176\u6240\u6709\u8d28\u56e0\u6570\u5206\u522b\u4e3a p_1,p_2,...,p_s p_1,p_2,...,p_s \uff0c\u90a3 i i \u7684\u6b27\u62c9\u51fd\u6570\u503c \\varphi(i)=i\\cdot\\prod\\limits_{j=1}^s\\dfrac{p_j-1}{p_j} \\varphi(i)=i\\cdot\\prod\\limits_{j=1}^s\\dfrac{p_j-1}{p_j} \u3002 \u5f15\u7406 1. \u82e5 p p \u4e3a\u8d28\u6570\uff0c k k \u4e3a\u6b63\u6574\u6570\uff0c\u5219 \\varphi(p^k)=p^k-p^{k-1} \\varphi(p^k)=p^k-p^{k-1} \u4e00\u4e2a\u6570 i i \u4e0d\u4e0e p^k p^k \u4e92\u8d28\u5f53\u4e14\u4ec5\u5f53 p\\mid i p\\mid i \uff0c\u800c\u5728 \\left[1,p^k\\right] \\left[1,p^k\\right] \u4e2d\u8fd9\u6837\u7684 i i \u4e00\u5171\u6709 \\dfrac{p^k}{p}=p^{k-1} \\dfrac{p^k}{p}=p^{k-1} \u4e2a\uff0c\u6240\u4ee5 \\varphi(p^k)=p^k-p^{k-1} \\varphi(p^k)=p^k-p^{k-1} \u3002 \u5f15\u7406 2. \u6839\u636e\u552f\u4e00\u5206\u89e3\u5b9a\u7406\u5c06 n n \u5206\u89e3\u4e3a \\prod\\limits_{i=1}^s{p_i}^{k_i} \\prod\\limits_{i=1}^s{p_i}^{k_i} \uff0c\u5219 \\varphi(n)=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i} \\varphi(n)=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i} \u7531\u4e8e\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570 \\begin{aligned}\\varphi(n)&=\\prod\\limits_{i=1}^s\\varphi({p_i}^{k_i})\\\\&=\\prod\\limits_{i=1}^s({p_i}^{k_i}-{p_i}^{k_i-1})\\\\&=\\prod\\limits_{i=1}^s\\left({p_i-1}\\right)\\cdot{p_i}^{k_i-1}\\\\&=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i}\\end{aligned} \\begin{aligned}\\varphi(n)&=\\prod\\limits_{i=1}^s\\varphi({p_i}^{k_i})\\\\&=\\prod\\limits_{i=1}^s({p_i}^{k_i}-{p_i}^{k_i-1})\\\\&=\\prod\\limits_{i=1}^s\\left({p_i-1}\\right)\\cdot{p_i}^{k_i-1}\\\\&=n\\cdot\\prod\\limits_{i=1}^s\\dfrac{p_i-1}{p_i}\\end{aligned} \u5f15\u7406 2 \u662f\u8ba1\u7b97\u6b27\u62c9\u51fd\u6570\u6700\u4e00\u822c\u7684\u516c\u5f0f\uff0c\u6839\u636e\u5b83\u53ef\u4ee5 O\\left(\\sqrt{n}\\right) O\\left(\\sqrt{n}\\right) \u5730\u6c42\u51fa \\varphi(n) \\varphi(n) \u3002","title":"\u4e00\u4e9b\u57fa\u672c\u516c\u5f0f\u3001\u7ed3\u8bba"},{"location":"number_theory/euler/#_4","text":"\u6839\u636e\u6b27\u62c9\u51fd\u6570\u7684\u79ef\u6027\u548c \u5f15\u7406 2 \uff0c\u53ef\u5f97\u5bf9\u4e8e\u4efb\u610f\u8d28\u6570 p p \u6709 \\varphi(n\\cdot p)=\\begin{cases}\\varphi(n)\\cdot(p-1)&\\text{if }(n,p)=1\\\\\\varphi(n)\\cdot p&\\text{if }(n,p)\\neq 1\\end{cases} \\varphi(n\\cdot p)=\\begin{cases}\\varphi(n)\\cdot(p-1)&\\text{if }(n,p)=1\\\\\\varphi(n)\\cdot p&\\text{if }(n,p)\\neq 1\\end{cases} \u5728\u7b5b\u7d20\u6570\u7684\u540c\u65f6\u53ef\u4ee5\u6c42\u51fa\u6b27\u62c9\u51fd\u6570\u3002 phi [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ){ if ( ! vist [ i ]) prime [ ++ cnt ] = i ; for ( int j = 1 ; j <= cnt ; ++ j ){ if ( i % prime [ j ]) phi [ i * prime [ j ]] = phi [ i ] * ( prime [ j ] - 1 ); else { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } } }","title":"\u7ebf\u6027\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"number_theory/euler/#_5","text":"\u5bf9\u4e8e\u4efb\u610f a,p a,p \u6ee1\u8db3 (a,p)=1 (a,p)=1 \uff0c a^{\\varphi(p)}\\equiv 1\\pmod p a^{\\varphi(p)}\\equiv 1\\pmod p \u3002 \u8fd9\u4e00\u70b9\u53ef\u4ee5\u6784\u9020\u8bc1\u660e\u3002\u8bbe \\varphi(p) \\varphi(p) \u4e2a\u6b63\u6574\u6570 m_1,m_2,\\ldots,m_{\\varphi(p)} m_1,m_2,\\ldots,m_{\\varphi(p)} \u6784\u6210 p p \u7684\u4e00\u4e2a\u65e2\u7ea6\u5269\u4f59\u7cfb\uff0c\u6839\u636e\u65e2\u7ea6\u5269\u4f59\u7cfb\u7684\u5b9a\u4e49\u53ef\u4ee5\u5f97\u5230 (m_i,p)=1 (m_i,p)=1 \u3002 \u5bf9\u4e8e\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u6570 m_i,m_j m_i,m_j \uff0c\u7531\u4e8e (a,p)=1 (a,p)=1 \uff0c a\\cdot (m_i-m_j)\\nmid p a\\cdot (m_i-m_j)\\nmid p \u3002\u6362\u8a00\u4e4b a\\cdot m_i a\\cdot m_i \u4e0e a\\cdot m_j a\\cdot m_j \u5728\u6a21 p p \u610f\u4e49\u4e0b\u4e0d\u540c\u4f59\u3002 \u7531\u4e8e\u5176\u4e2d\u7684\u6570\u4e24\u4e24\u4e0d\u540c\u4f59\uff0c a\\cdot m_1,a\\cdot m_2,\\ldots,a\\cdot m_{\\varphi(p)} a\\cdot m_1,a\\cdot m_2,\\ldots,a\\cdot m_{\\varphi(p)} \u4e5f\u6784\u6210 p p \u7684\u4e00\u4e2a\u65e2\u7ea6\u5269\u4f59\u7cfb\u3002\u4e8e\u662f \\prod(a\\cdot m_i)\\equiv\\prod m_i\\pmod p \\prod(a\\cdot m_i)\\equiv\\prod m_i\\pmod p \uff0c\u5373 a^{\\varphi(p)}\\equiv 1\\pmod p a^{\\varphi(p)}\\equiv 1\\pmod p \u3002","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"number_theory/euler/#_6","text":"\u5bf9\u4e8e\u4efb\u610f a a \u548c\u4efb\u610f\u8d28\u6570 p p \u6ee1\u8db3 p \\nmid a p \\nmid a \uff0c a^{p}\\equiv a\\pmod p a^{p}\\equiv a\\pmod p \u3002 \u8d39\u9a6c\u5c0f\u5b9a\u7406\u662f\u6b27\u62c9\u5b9a\u7406\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u66f4\u7b80\u6d01\u7684\u6570\u5b66\u5f52\u7eb3\u6cd5\u6765\u8bc1\u660e\u5b83\uff1a \u663e\u7136 1^{p}\\equiv 1\\pmod p 1^{p}\\equiv 1\\pmod p \u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e a^{p}\\equiv a\\pmod{p} a^{p}\\equiv a\\pmod{p} \uff0c\u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406 (a+1)^{p}=\\sum\\limits_{i=0}^{p}\\binom{p}{i}\\cdot a^i (a+1)^{p}=\\sum\\limits_{i=0}^{p}\\binom{p}{i}\\cdot a^i \u5176\u4e2d\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570 \\binom{p}{i} \\binom{p}{i} \uff0c\u7531\u4e8e p p \u4e0e\u4efb\u610f\u53ef\u80fd\u7684 i i \u4e92\u8d28\uff08\u9664\u4e86 i=0 i=0 \u548c i=p i=p \uff09\uff0c\u56e0\u6b64 \\forall i\\neq 0 \\text{ \u4e14 } i\\neq p,\\binom{p}{i}\\equiv 0\\pmod{p} \\forall i\\neq 0 \\text{ \u4e14 } i\\neq p,\\binom{p}{i}\\equiv 0\\pmod{p} \uff0c\u800c\u5bf9\u4e8e i=0 i=0 \u548c i=p i=p \uff0c\u663e\u7136 \\binom{p}{i}=1 \\binom{p}{i}=1 \u3002\u4e8e\u662f\u53ef\u4ee5\u5c06\u539f\u5f0f\u5199\u4f5c (a+1)^p\\equiv a^{p}+1\\pmod{p} (a+1)^p\\equiv a^{p}+1\\pmod{p} \u5373 (a+1)^p\\equiv a+1\\pmod p (a+1)^p\\equiv a+1\\pmod p \u5f97\u8bc1\u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"number_theory/euler/#_7","text":"\u5bf9\u4e8e\u4efb\u610f a,b,p a,b,p \uff0c a^{b}\\equiv\\begin{cases}a^b&\\text{if }b<\\varphi(p)\\\\a^{b\\bmod \\varphi(p)+\\varphi(p)}&\\text{if }b\\ge\\varphi(p)\\end{cases}\\pmod{p} a^{b}\\equiv\\begin{cases}a^b&\\text{if }b<\\varphi(p)\\\\a^{b\\bmod \\varphi(p)+\\varphi(p)}&\\text{if }b\\ge\\varphi(p)\\end{cases}\\pmod{p} \u8bc1\u660e\u7565\u3002","title":"\u6269\u5c55\u6b27\u62c9\u5b9a\u7406"},{"location":"number_theory/euler/#_8","text":"\u6c42 n^{n^{n^{\\ldots}}}\\bmod p n^{n^{n^{\\ldots}}}\\bmod p \u3002 \u6839\u636e\u6269\u5c55\u6b27\u62c9\u5b9a\u7406 n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(p)+\\varphi(p)}\\pmod p n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(p)+\\varphi(p)}\\pmod p \u800c n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(\\varphi(p))+\\varphi(\\varphi(p))}\\pmod {\\varphi(p)} n^{n^{n^{\\ldots}}}\\equiv n^{n^{n^{\\ldots}}\\bmod \\varphi(\\varphi(p))+\\varphi(\\varphi(p))}\\pmod {\\varphi(p)} \u6bcf\u8fed\u4ee3\u4e00\u6b21\uff0c\u6a21\u6570\u5c31\u53d8\u4e3a\u5176\u6b27\u62c9\u51fd\u6570\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728 O(\\log p) O(\\log p) \u7ea7\u522b\u6b21\u8fed\u4ee3\u5185\uff0c\u6a21\u6570\u53ef\u4ee5\u964d\u81f3 1 1 \uff0c\u6b64\u65f6\u5f0f\u5b50\u503c\u6052\u4e3a 0 0 \u3002 int solve ( int n , int p ){ if ( p == 1 ) return 0 ; return qpow ( n , solve ( n , phi [ p ]) + phi [ p ]) % p ; } \u7531\u4e8e\u4f7f\u7528\u4e86\u5feb\u901f\u5e42\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log^2 p) O(n\\log^2 p) \u3002\u7c7b\u4f3c\u7684\u5f0f\u5b50\u90fd\u53ef\u4ee5\u5957\u7528\u8fd9\u79cd\u65b9\u6cd5\u8ba1\u7b97\u3002","title":"\u5d4c\u5957\u5e42"},{"location":"number_theory/euler/#_9","text":"\u4e0a\u5e1d\u4e0e\u96c6\u5408\u7684\u6b63\u786e\u7528\u6cd5 \u70b8\u8116\u9f99I \u76f8\u9022\u662f\u95ee\u5019","title":"\u4f8b\u9898"},{"location":"number_theory/exgcd/","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5f97\u51fa\u7684\u89e3\u7684\u7edd\u5bf9\u503c\u4e0a\u754c \u00b6 \u4f17\u6240\u5468\u77e5\uff0c\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u662f\u7528\u4e8e\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b ax+by=(a,b) ax+by=(a,b) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3\u7684\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5bf9\u6570\u7ea7\u3002 void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } \u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u4e58\u6cd5\u3002 x x \u548c y y \u662f\u5426\u6709\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\u5462\uff1f \u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86 b=0 b=0 \u7684\u60c5\u51b5\uff0c\u5728\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7684\u8fc7\u7a0b\u4e2d\u603b\u662f\u6709 |x|\\le b,|y|\\le a |x|\\le b,|y|\\le a \uff0c\u4e0d\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\u3002\u8fd9\u91cc\u7ed9\u51fa\u7b80\u8981\u8bc1\u660e\uff1a \u8bb0 S=(a,b,x,y) S=(a,b,x,y) \u4e3a\u4e00\u4e2a\u540c\u4f59\u65b9\u7a0b ax+by=(a,b) ax+by=(a,b) \u3002\u4e2d\u6b62\u72b6\u6001\u89e3\u7684\u540c\u4f59\u65b9\u7a0b\u4e3a S_1=(\\gcd(a,b),0,1,0) S_1=(\\gcd(a,b),0,1,0) \u3002 \u8003\u8651\u7ec8\u6b62\u72b6\u6001\u7684\u524d\u4e00\u4e2a\u72b6\u6001 S_2=(a_2,b_2,x_2,y_2) S_2=(a_2,b_2,x_2,y_2) \u3002\u6b64\u65f6\u4e00\u5b9a\u6709 b_2\\mid a_2 b_2\\mid a_2 \u3002\u6839\u636e\u516c\u5f0f \\begin{cases}x_2=y_1\\\\y_2=x_1-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_1\\end{cases} \\begin{cases}x_2=y_1\\\\y_2=x_1-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_1\\end{cases} \u89e3\u5f97 x_2=0,y_2=1 x_2=0,y_2=1 \u3002\u7531\u4e8e b_2\\neq 0 b_2\\neq 0 \u4e14 b_2\\mid a_2 b_2\\mid a_2 \uff0c\u5219\u8be5\u72b6\u6001\u6ee1\u8db3 |x_2|\\le b_2,|y_2|\\le a_2 |x_2|\\le b_2,|y_2|\\le a_2 \u3002 \u5f52\u7eb3\u8bc1\u660e\u540e\u9762\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u540e\u9762\u7684\u4efb\u4f55\u4e00\u4e2a\u72b6\u6001 S_i S_i ( i>2 i>2 )\uff0c\u6211\u4eec\u6709 x_i=y_{i-1},y_i=x_{i-1}-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_{i-1} x_i=y_{i-1},y_i=x_{i-1}-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_{i-1} \u3002\u5c06 |x_{i-1}|\\le b_{i-1}=a_i\\bmod b_i,|y_{i-1}|\\le a_{i-1}=b_i |x_{i-1}|\\le b_{i-1}=a_i\\bmod b_i,|y_{i-1}|\\le a_{i-1}=b_i \u4ee3\u5165\u5f97\u5230 |x_i|\\le b_i,|y_i|\\le a_i |x_i|\\le b_i,|y_i|\\le a_i \u3002","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5f97\u51fa\u7684\u89e3\u7684\u7edd\u5bf9\u503c\u4e0a\u754c"},{"location":"number_theory/exgcd/#_1","text":"\u4f17\u6240\u5468\u77e5\uff0c\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u662f\u7528\u4e8e\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b ax+by=(a,b) ax+by=(a,b) \u7684\u4e00\u7ec4\u53ef\u884c\u89e3\u7684\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5bf9\u6570\u7ea7\u3002 void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } \u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u4e58\u6cd5\u3002 x x \u548c y y \u662f\u5426\u6709\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\u5462\uff1f \u4e8b\u5b9e\u4e0a\uff0c\u9664\u4e86 b=0 b=0 \u7684\u60c5\u51b5\uff0c\u5728\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7684\u8fc7\u7a0b\u4e2d\u603b\u662f\u6709 |x|\\le b,|y|\\le a |x|\\le b,|y|\\le a \uff0c\u4e0d\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\u3002\u8fd9\u91cc\u7ed9\u51fa\u7b80\u8981\u8bc1\u660e\uff1a \u8bb0 S=(a,b,x,y) S=(a,b,x,y) \u4e3a\u4e00\u4e2a\u540c\u4f59\u65b9\u7a0b ax+by=(a,b) ax+by=(a,b) \u3002\u4e2d\u6b62\u72b6\u6001\u89e3\u7684\u540c\u4f59\u65b9\u7a0b\u4e3a S_1=(\\gcd(a,b),0,1,0) S_1=(\\gcd(a,b),0,1,0) \u3002 \u8003\u8651\u7ec8\u6b62\u72b6\u6001\u7684\u524d\u4e00\u4e2a\u72b6\u6001 S_2=(a_2,b_2,x_2,y_2) S_2=(a_2,b_2,x_2,y_2) \u3002\u6b64\u65f6\u4e00\u5b9a\u6709 b_2\\mid a_2 b_2\\mid a_2 \u3002\u6839\u636e\u516c\u5f0f \\begin{cases}x_2=y_1\\\\y_2=x_1-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_1\\end{cases} \\begin{cases}x_2=y_1\\\\y_2=x_1-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_1\\end{cases} \u89e3\u5f97 x_2=0,y_2=1 x_2=0,y_2=1 \u3002\u7531\u4e8e b_2\\neq 0 b_2\\neq 0 \u4e14 b_2\\mid a_2 b_2\\mid a_2 \uff0c\u5219\u8be5\u72b6\u6001\u6ee1\u8db3 |x_2|\\le b_2,|y_2|\\le a_2 |x_2|\\le b_2,|y_2|\\le a_2 \u3002 \u5f52\u7eb3\u8bc1\u660e\u540e\u9762\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u540e\u9762\u7684\u4efb\u4f55\u4e00\u4e2a\u72b6\u6001 S_i S_i ( i>2 i>2 )\uff0c\u6211\u4eec\u6709 x_i=y_{i-1},y_i=x_{i-1}-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_{i-1} x_i=y_{i-1},y_i=x_{i-1}-\\left\\lfloor\\dfrac{a}{b}\\right\\rfloor y_{i-1} \u3002\u5c06 |x_{i-1}|\\le b_{i-1}=a_i\\bmod b_i,|y_{i-1}|\\le a_{i-1}=b_i |x_{i-1}|\\le b_{i-1}=a_i\\bmod b_i,|y_{i-1}|\\le a_{i-1}=b_i \u4ee3\u5165\u5f97\u5230 |x_i|\\le b_i,|y_i|\\le a_i |x_i|\\le b_i,|y_i|\\le a_i \u3002","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5f97\u51fa\u7684\u89e3\u7684\u7edd\u5bf9\u503c\u4e0a\u754c"},{"location":"number_theory/number_theoretic_function/","text":"\u4e00\u4e9b\u6570\u8bba\u51fd\u6570\u53ca\u5176\u8fd0\u7b97 \u00b6 \u6570\u8bba\u51fd\u6570\u662f\u4e00\u79cd\u4ee5\u6b63\u6574\u6570\u4e3a\u5b9a\u4e49\u57df\u7684\u51fd\u6570\uff0c\u662f\u6570\u8bba\u7684\u91cd\u8981\u5de5\u5177\u3002 \u6570\u8bba\u51fd\u6570 \u00b6 \u6570\u8bba\u51fd\u6570\u7684\u5b9a\u4e49\u57df\u662f \\mathbb{N}^{+} \\mathbb{N}^{+} \uff0c\u4e0d\u662f\u8fde\u7eed\u51fd\u6570\u3002\u5e38\u89c1\u7684\u6570\u8bba\u51fd\u6570\u6709\uff1a \u5355\u4f4d\u51fd\u6570 \\epsilon(n)=[n=1] \\epsilon(n)=[n=1] \u6b27\u62c9\u51fd\u6570 \\varphi(n)=\\sum\\limits_{i=1}^n[(i,n)=1] \\varphi(n)=\\sum\\limits_{i=1}^n[(i,n)=1] \u6052\u7b49\u51fd\u6570 \\operatorname{id}(n)=n \\operatorname{id}(n)=n \u5e38\u503c\u51fd\u6570 1(n)=1 1(n)=1 \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \\mu(n)=\\begin{cases}1&\\text{if }n=1\\\\0&\\text{if }p\\text{ contains square prime divisor}\\\\(-1)^{\\omega(n)}&\\text{otherwise}\\end{cases} \\mu(n)=\\begin{cases}1&\\text{if }n=1\\\\0&\\text{if }p\\text{ contains square prime divisor}\\\\(-1)^{\\omega(n)}&\\text{otherwise}\\end{cases} \uff0c\u5176\u4e2d \\omega(n) \\omega(n) \u4ee3\u8868 n n \u7684\u8d28\u56e0\u5b50\u4e2a\u6570\u3002 \u8fd9\u4e9b\u51fd\u6570\u90fd\u662f\u79ef\u6027\u51fd\u6570\u3002 \u9664\u4e86\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u8fc7\u7684\u4e0e\u6b27\u62c9\u5b9a\u7406\u6709\u5173\u7684\u6b27\u62c9\u51fd\u6570\uff0c\u5176\u4ed6\u7684\u51fd\u6570\u4f3c\u4e4e\u90fd\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e9b\u6570\u8bba\u51fd\u6570\u4e4b\u95f4\u6709\u7740\u5343\u4e1d\u4e07\u7f15\u7684\u8054\u7cfb\u3002 \u72c4\u5229\u514b\u96f7\u5377\u79ef \u00b6 \u5b9a\u4e49\u4e24\u4e2a\u6570\u8bba\u51fd\u6570 f(n) f(n) \u548c g(n) g(n) \u7684\u72c4\u5229\u514b\u96f7\u5377\u79ef (f*g)(n) (f*g)(n) \u4e3a (f*g)(n)=\\sum\\limits_{d\\mid n}f(d)g\\left(\\dfrac{n}{d}\\right) (f*g)(n)=\\sum\\limits_{d\\mid n}f(d)g\\left(\\dfrac{n}{d}\\right) \u4e8b\u5148\u4e86\u89e3\u751f\u6210\u51fd\u6570\uff08\u7279\u522b\u662f\u72c4\u5229\u514b\u96f7\u578b\u751f\u6210\u51fd\u6570\uff09\u6709\u52a9\u4e8e\u7406\u89e3\u72c4\u5229\u514b\u96f7\u5377\u79ef\u3002 \u72c4\u5229\u514b\u96f7\u5377\u79ef\u6709\u975e\u5e38\u4f18\u5f02\u7684\u6027\u8d28\u3002\u5b83\u662f\u79bb\u6563\u5377\u79ef\u7684\u4e00\u79cd\uff0c\u6ee1\u8db3\u4e09\u79cd\u4e3b\u8981\u8fd0\u7b97\u5f8b\uff1a \u4ea4\u6362\u5f8b f*g=g*f f*g=g*f \u7ed3\u5408\u5f8b (f*g)*h=f*(g*h) (f*g)*h=f*(g*h) \u5206\u914d\u5f8b f*(g+h)=f*g+f*h f*(g+h)=f*g+f*h \u6b63\u5982 1 1 \u662f\u4e58\u6cd5\u7684\u5355\u4f4d\u5143\uff08 x\\times 1=x x\\times 1=x \uff09\uff0c\u5355\u4f4d\u51fd\u6570 \\epsilon \\epsilon \u662f\u72c4\u5229\u514b\u96f7\u5377\u79ef\u7684\u5355\u4f4d\u5143\uff08 f*\\epsilon=f f*\\epsilon=f \uff09\uff0c\u4efb\u4f55\u6570\u8bba\u51fd\u6570 f f \u4e0e \\epsilon \\epsilon \u7684\u72c4\u5229\u514b\u96f7\u5377\u79ef\u90fd\u662f\u5176\u672c\u8eab\u3002 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u00b7 \u5176\u4e00 \u00b6 \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u6709\u4e24\u4e2a\u5f62\u5f0f\uff0c\u5728\u6b64\u5148\u4ecb\u7ecd\u5176\u7b2c\u4e00\u4e2a\u5f62\u5f0f\uff0c\u5373 f(n)=\\sum\\limits_{d\\mid n}g(n)\\iff g(n)=\\sum\\limits_{d\\mid n}\\mu\\left(\\dfrac{n}{d}\\right)f(d) f(n)=\\sum\\limits_{d\\mid n}g(n)\\iff g(n)=\\sum\\limits_{d\\mid n}\\mu\\left(\\dfrac{n}{d}\\right)f(d) \u7528\u72c4\u5229\u514b\u96f7\u5377\u79ef\u7684\u5f62\u5f0f\u8868\u8fbe\u5c31\u662f f=1*g\\iff g=\\mu * f f=1*g\\iff g=\\mu * f \u6211\u4eec\u5f53\u5373\u53d1\u73b0\uff0c\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \\mu \\mu \u4e0e\u5355\u4f4d\u51fd\u6570 1 1 \u4e4b\u95f4\u4f3c\u4e4e\u6709\u975e\u5e38\u7d27\u5bc6\u7684\u5173\u7cfb\uff0c \\mu \\mu \u4f3c\u4e4e\u53ef\u4ee5\u88ab\u89c6\u4f5c\u662f 1 1 \u7684\u9006\u5143\u3002\u6362\u53e5\u8bdd\u8bb2 1*\\mu=\\epsilon 1*\\mu=\\epsilon \\sum\\limits_{d\\mid n}\\mu(d)=[n=1] \\sum\\limits_{d\\mid n}\\mu(d)=[n=1] \u8bc1\u660e \u00b6 \u7531\u4e8e\u542b\u6709\u5e73\u65b9\u8d28\u56e0\u5b50\u7684\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a 0 0 \uff0c\u8bbe n=\\prod {p_i}^{k_i},n^\\prime=\\prod p_i n=\\prod {p_i}^{k_i},n^\\prime=\\prod p_i \uff0c\u6ee1\u8db3 (1*\\varphi)(n)=(1*\\varphi)(n^\\prime) (1*\\varphi)(n)=(1*\\varphi)(n^\\prime) \u3002 \u4e8e\u662f (1*\\varphi)(n)=(1*\\varphi)(n^\\prime)=\\sum\\binom{\\omega(n^\\prime)}{i}\\cdot (-1)^i=0^{\\omega(n^\\prime)} (1*\\varphi)(n)=(1*\\varphi)(n^\\prime)=\\sum\\binom{\\omega(n^\\prime)}{i}\\cdot (-1)^i=0^{\\omega(n^\\prime)} \u53ea\u6709\u5f53 n^\\prime n^\\prime \u7684\u8d28\u56e0\u5b50\u6570\u4e3a 0 0 \uff0c\u5373 n=n^\\prime=1 n=n^\\prime=1 \u65f6\uff0c\u624d\u6709 (1*\\varphi)(n)=1 (1*\\varphi)(n)=1 \u3002 \u5f53\u7136\uff0c\u7531\u4e8e 1*\\varphi=\\epsilon 1*\\varphi=\\epsilon \u548c\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7684\u7b2c\u4e00\u79cd\u5f62\u5f0f\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u540c\u65f6\u4e5f\u8bc1\u660e\u4e86\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7684\u7b2c\u4e00\u79cd\u5f62\u5f0f\u3002 \u6b27\u62c9\u53cd\u6f14 \u00b6 n=\\sum\\limits_{d\\mid n}\\varphi(d) n=\\sum\\limits_{d\\mid n}\\varphi(d) \u7528\u72c4\u5229\u514b\u96f7\u5377\u79ef\u7684\u5f62\u5f0f\u8868\u8fbe\u5c31\u662f \\operatorname{id}=\\varphi*1 \\operatorname{id}=\\varphi*1","title":"\u4e00\u4e9b\u6570\u8bba\u51fd\u6570\u53ca\u5176\u8fd0\u7b97"},{"location":"number_theory/number_theoretic_function/#_1","text":"\u6570\u8bba\u51fd\u6570\u662f\u4e00\u79cd\u4ee5\u6b63\u6574\u6570\u4e3a\u5b9a\u4e49\u57df\u7684\u51fd\u6570\uff0c\u662f\u6570\u8bba\u7684\u91cd\u8981\u5de5\u5177\u3002","title":"\u4e00\u4e9b\u6570\u8bba\u51fd\u6570\u53ca\u5176\u8fd0\u7b97"},{"location":"number_theory/number_theoretic_function/#_2","text":"\u6570\u8bba\u51fd\u6570\u7684\u5b9a\u4e49\u57df\u662f \\mathbb{N}^{+} \\mathbb{N}^{+} \uff0c\u4e0d\u662f\u8fde\u7eed\u51fd\u6570\u3002\u5e38\u89c1\u7684\u6570\u8bba\u51fd\u6570\u6709\uff1a \u5355\u4f4d\u51fd\u6570 \\epsilon(n)=[n=1] \\epsilon(n)=[n=1] \u6b27\u62c9\u51fd\u6570 \\varphi(n)=\\sum\\limits_{i=1}^n[(i,n)=1] \\varphi(n)=\\sum\\limits_{i=1}^n[(i,n)=1] \u6052\u7b49\u51fd\u6570 \\operatorname{id}(n)=n \\operatorname{id}(n)=n \u5e38\u503c\u51fd\u6570 1(n)=1 1(n)=1 \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \\mu(n)=\\begin{cases}1&\\text{if }n=1\\\\0&\\text{if }p\\text{ contains square prime divisor}\\\\(-1)^{\\omega(n)}&\\text{otherwise}\\end{cases} \\mu(n)=\\begin{cases}1&\\text{if }n=1\\\\0&\\text{if }p\\text{ contains square prime divisor}\\\\(-1)^{\\omega(n)}&\\text{otherwise}\\end{cases} \uff0c\u5176\u4e2d \\omega(n) \\omega(n) \u4ee3\u8868 n n \u7684\u8d28\u56e0\u5b50\u4e2a\u6570\u3002 \u8fd9\u4e9b\u51fd\u6570\u90fd\u662f\u79ef\u6027\u51fd\u6570\u3002 \u9664\u4e86\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u8fc7\u7684\u4e0e\u6b27\u62c9\u5b9a\u7406\u6709\u5173\u7684\u6b27\u62c9\u51fd\u6570\uff0c\u5176\u4ed6\u7684\u51fd\u6570\u4f3c\u4e4e\u90fd\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e9b\u6570\u8bba\u51fd\u6570\u4e4b\u95f4\u6709\u7740\u5343\u4e1d\u4e07\u7f15\u7684\u8054\u7cfb\u3002","title":"\u6570\u8bba\u51fd\u6570"},{"location":"number_theory/number_theoretic_function/#_3","text":"\u5b9a\u4e49\u4e24\u4e2a\u6570\u8bba\u51fd\u6570 f(n) f(n) \u548c g(n) g(n) \u7684\u72c4\u5229\u514b\u96f7\u5377\u79ef (f*g)(n) (f*g)(n) \u4e3a (f*g)(n)=\\sum\\limits_{d\\mid n}f(d)g\\left(\\dfrac{n}{d}\\right) (f*g)(n)=\\sum\\limits_{d\\mid n}f(d)g\\left(\\dfrac{n}{d}\\right) \u4e8b\u5148\u4e86\u89e3\u751f\u6210\u51fd\u6570\uff08\u7279\u522b\u662f\u72c4\u5229\u514b\u96f7\u578b\u751f\u6210\u51fd\u6570\uff09\u6709\u52a9\u4e8e\u7406\u89e3\u72c4\u5229\u514b\u96f7\u5377\u79ef\u3002 \u72c4\u5229\u514b\u96f7\u5377\u79ef\u6709\u975e\u5e38\u4f18\u5f02\u7684\u6027\u8d28\u3002\u5b83\u662f\u79bb\u6563\u5377\u79ef\u7684\u4e00\u79cd\uff0c\u6ee1\u8db3\u4e09\u79cd\u4e3b\u8981\u8fd0\u7b97\u5f8b\uff1a \u4ea4\u6362\u5f8b f*g=g*f f*g=g*f \u7ed3\u5408\u5f8b (f*g)*h=f*(g*h) (f*g)*h=f*(g*h) \u5206\u914d\u5f8b f*(g+h)=f*g+f*h f*(g+h)=f*g+f*h \u6b63\u5982 1 1 \u662f\u4e58\u6cd5\u7684\u5355\u4f4d\u5143\uff08 x\\times 1=x x\\times 1=x \uff09\uff0c\u5355\u4f4d\u51fd\u6570 \\epsilon \\epsilon \u662f\u72c4\u5229\u514b\u96f7\u5377\u79ef\u7684\u5355\u4f4d\u5143\uff08 f*\\epsilon=f f*\\epsilon=f \uff09\uff0c\u4efb\u4f55\u6570\u8bba\u51fd\u6570 f f \u4e0e \\epsilon \\epsilon \u7684\u72c4\u5229\u514b\u96f7\u5377\u79ef\u90fd\u662f\u5176\u672c\u8eab\u3002","title":"\u72c4\u5229\u514b\u96f7\u5377\u79ef"},{"location":"number_theory/number_theoretic_function/#_4","text":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u6709\u4e24\u4e2a\u5f62\u5f0f\uff0c\u5728\u6b64\u5148\u4ecb\u7ecd\u5176\u7b2c\u4e00\u4e2a\u5f62\u5f0f\uff0c\u5373 f(n)=\\sum\\limits_{d\\mid n}g(n)\\iff g(n)=\\sum\\limits_{d\\mid n}\\mu\\left(\\dfrac{n}{d}\\right)f(d) f(n)=\\sum\\limits_{d\\mid n}g(n)\\iff g(n)=\\sum\\limits_{d\\mid n}\\mu\\left(\\dfrac{n}{d}\\right)f(d) \u7528\u72c4\u5229\u514b\u96f7\u5377\u79ef\u7684\u5f62\u5f0f\u8868\u8fbe\u5c31\u662f f=1*g\\iff g=\\mu * f f=1*g\\iff g=\\mu * f \u6211\u4eec\u5f53\u5373\u53d1\u73b0\uff0c\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \\mu \\mu \u4e0e\u5355\u4f4d\u51fd\u6570 1 1 \u4e4b\u95f4\u4f3c\u4e4e\u6709\u975e\u5e38\u7d27\u5bc6\u7684\u5173\u7cfb\uff0c \\mu \\mu \u4f3c\u4e4e\u53ef\u4ee5\u88ab\u89c6\u4f5c\u662f 1 1 \u7684\u9006\u5143\u3002\u6362\u53e5\u8bdd\u8bb2 1*\\mu=\\epsilon 1*\\mu=\\epsilon \\sum\\limits_{d\\mid n}\\mu(d)=[n=1] \\sum\\limits_{d\\mid n}\\mu(d)=[n=1]","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u00b7 \u5176\u4e00"},{"location":"number_theory/number_theoretic_function/#_5","text":"\u7531\u4e8e\u542b\u6709\u5e73\u65b9\u8d28\u56e0\u5b50\u7684\u6570\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u503c\u4e3a 0 0 \uff0c\u8bbe n=\\prod {p_i}^{k_i},n^\\prime=\\prod p_i n=\\prod {p_i}^{k_i},n^\\prime=\\prod p_i \uff0c\u6ee1\u8db3 (1*\\varphi)(n)=(1*\\varphi)(n^\\prime) (1*\\varphi)(n)=(1*\\varphi)(n^\\prime) \u3002 \u4e8e\u662f (1*\\varphi)(n)=(1*\\varphi)(n^\\prime)=\\sum\\binom{\\omega(n^\\prime)}{i}\\cdot (-1)^i=0^{\\omega(n^\\prime)} (1*\\varphi)(n)=(1*\\varphi)(n^\\prime)=\\sum\\binom{\\omega(n^\\prime)}{i}\\cdot (-1)^i=0^{\\omega(n^\\prime)} \u53ea\u6709\u5f53 n^\\prime n^\\prime \u7684\u8d28\u56e0\u5b50\u6570\u4e3a 0 0 \uff0c\u5373 n=n^\\prime=1 n=n^\\prime=1 \u65f6\uff0c\u624d\u6709 (1*\\varphi)(n)=1 (1*\\varphi)(n)=1 \u3002 \u5f53\u7136\uff0c\u7531\u4e8e 1*\\varphi=\\epsilon 1*\\varphi=\\epsilon \u548c\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7684\u7b2c\u4e00\u79cd\u5f62\u5f0f\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u540c\u65f6\u4e5f\u8bc1\u660e\u4e86\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u7684\u7b2c\u4e00\u79cd\u5f62\u5f0f\u3002","title":"\u8bc1\u660e"},{"location":"number_theory/number_theoretic_function/#_6","text":"n=\\sum\\limits_{d\\mid n}\\varphi(d) n=\\sum\\limits_{d\\mid n}\\varphi(d) \u7528\u72c4\u5229\u514b\u96f7\u5377\u79ef\u7684\u5f62\u5f0f\u8868\u8fbe\u5c31\u662f \\operatorname{id}=\\varphi*1 \\operatorname{id}=\\varphi*1","title":"\u6b27\u62c9\u53cd\u6f14"},{"location":"polynomial/arbitrary_modulo/","text":"\u4efb\u610f\u6a21\u6570\u591a\u9879\u5f0f\u4e58\u6cd5 \u00b6 \u7531\u4e8e NTT \u7684\u6570\u5b66\u539f\u7406\uff0c\u5b83\u53ea\u80fd\u7528\u4e8e\u8ba1\u7b97\u6a21\u7279\u5b9a\u6a21\u6570\u610f\u4e49\u4e0b\u7684\u591a\u9879\u5f0f\u4e58\u6cd5\u3002\u5982\u4f55\u8ba1\u7b97\u4efb\u610f\u6a21\u6570\u7684\u591a\u9879\u5f0f\u4e58\u6cd5\u5462\uff1f \u4e00\u79cd\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u5229\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u3002\u4e00\u822c\u6211\u4eec\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u5728 10^5 10^5 \u7ea7\u522b\u3001\u7cfb\u6570\u5728 10^9 10^9 \u7ea7\u522b\u7684\u591a\u9879\u5f0f\u7684\u5377\u79ef\uff0c\u5176\u7ed3\u679c\u7684\u7cfb\u6570\u4e0d\u4f1a\u8d85\u8fc7 10^{23} 10^{23} \u7ea7\u522b\u3002\u53ea\u8981\u9009\u53d6\u4e09\u4e2a\u4e58\u79ef\u8d85\u8fc7 10^{23} 10^{23} \u7684 NTT \u6a21\u6570\uff0c\u5206\u522b\u4e58\u4e00\u6b21\uff0c\u518d\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u5408\u5e76\u7b54\u6848\u5373\u53ef\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e38\u6570\u6781\u5927\u3002 \u800c\u6211\u4eec\u8981\u4ecb\u7ecd\u7684\u505a\u6cd5\u662f\u62c6\u7cfb\u6570 FFT\u3002\u5408\u7406\u7684\u62c6\u7cfb\u6570 FFT \u5b9e\u73b0\u6d88\u8017\u7684\u65f6\u95f4\u4ec5\u4ec5\u662f\u666e\u901a\u591a\u9879\u5f0f\u4e58\u6cd5\u7684\u56db\u500d\u5de6\u53f3\uff0c\u662f\u4e00\u79cd\u5f88\u4f18\u79c0\u7684\u4efb\u610f\u6a21\u6570\u591a\u9879\u5f0f\u4e58\u6cd5\u8ba1\u7b97\u65b9\u6cd5\u3002 \u62c6\u7cfb\u6570 FFT \u00b6 \u5047\u5b9a\u6211\u4eec\u5377\u79ef\u7684\u6a21\u6570\u4e3a p p \uff0c\u9009\u53d6\u4e00\u4e2a \\sqrt{p} \\sqrt{p} \u7ea7\u522b\u7684\u6570 d d \u3002\u5728 OI \u4e2d\uff0c p p \u4e00\u822c\u81f3\u591a\u4e3a 2^{30} 2^{30} \u7ea7\u522b\u7684\u6570\u3002 \u628a\u591a\u9879\u5f0f F F \u6bcf\u4e00\u9879\u7684\u7cfb\u6570 F_i F_i \u5206\u89e3\u4e3a F_i=d\\cdot G_i+H_i F_i=d\\cdot G_i+H_i \uff0c\u5f97\u5230 F=d\\cdot G+H F=d\\cdot G+H \u3002\u7531\u4e8e d d \u662f \\sqrt{p} \\sqrt{p} \u7ea7\u522b\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1 G G \u548c H H \u7684\u7cfb\u6570\u4e5f\u662f \\sqrt{p} \\sqrt{p} \u7ea7\u522b\u7684\uff0c\u76f8\u4e58\u4e0d\u4f1a\u8d85\u8fc7 double \u7684\u7cbe\u5ea6\u3002 \u4e8e\u662f \\begin{aligned}F\\cdot G&=\\left(d\\cdot A+B\\right)\\cdot\\left(d\\cdot C+D\\right)\\\\&=d^2\\cdot AC+d\\cdot(AD+BC)+BD\\end{aligned} \\begin{aligned}F\\cdot G&=\\left(d\\cdot A+B\\right)\\cdot\\left(d\\cdot C+D\\right)\\\\&=d^2\\cdot AC+d\\cdot(AD+BC)+BD\\end{aligned} \u4f7f\u7528\u201c\u4e09\u6b21\u53d8\u4e24\u6b21\u201d\u7684\u601d\u60f3\u4f18\u5316\uff0c\u53ef\u4ee5\u5728\u4e03\u6b21 DFT \u53d8\u6362\u5185\u5f97\u5230\u7ed3\u679c F\\cdot G F\\cdot G \u3002\u8fd9\u5c31\u662f\u62c6\u7cfb\u6570 FFT \u4e86\u3002 \u4f18\u5316 \u00b6 \u6839\u636e\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\u300a\u518d\u8c08\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u300b\uff0c\u5b58\u5728\u4e00\u79cd\u56db\u6b21 DFT \u8ba1\u7b97\u4efb\u610f\u6a21\u6570\u5377\u79ef\u7684\u7b97\u6cd5\u3002 \u8bbe F=G+i\\cdot H F=G+i\\cdot H \uff0c\u5bf9\u4e8e FFT \u9009\u53d6\u7684\u6bcf\u4e00\u4e2a\u70b9 \\left(\\omega_n^k,F\\left(\\omega_n^k\\right)\\right) \\left(\\omega_n^k,F\\left(\\omega_n^k\\right)\\right) \uff0c\u90fd\u6709 \\begin{aligned}F\\left(\\omega_n^k\\right)&= G\\left(\\omega_n^k\\right)+i\\cdot H\\left(\\omega_n^k\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(G_j\\cdot\\omega_n^{jk}+i\\cdot H_j\\cdot\\omega_n^{jk}\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\omega_{n}^{jk}\\cdot\\left(G_j+i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)\\end{aligned} \\begin{aligned}F\\left(\\omega_n^k\\right)&= G\\left(\\omega_n^k\\right)+i\\cdot H\\left(\\omega_n^k\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(G_j\\cdot\\omega_n^{jk}+i\\cdot H_j\\cdot\\omega_n^{jk}\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\omega_{n}^{jk}\\cdot\\left(G_j+i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)\\end{aligned} \u518d\u8bbe \\overline{F}=G-i\\cdot H \\overline{F}=G-i\\cdot H \uff0c\u6211\u4eec\u6709 \\begin{aligned}\\overline{F}\\left(\\omega_n^k\\right)&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j-i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}+H_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}-H_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)-H_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)-i\\cdot\\left(G_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)+H_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)-i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)}\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)}\\\\&=\\overline{G\\left(\\omega_n^{n-k}\\right)+i\\cdot H\\left(\\omega_n^{n-k}\\right)}\\\\&=\\overline{F\\left(\\omega_n^{n-k}\\right)}\\end{aligned} \\begin{aligned}\\overline{F}\\left(\\omega_n^k\\right)&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j-i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}+H_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}-H_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)-H_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)-i\\cdot\\left(G_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)+H_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)-i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)}\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)}\\\\&=\\overline{G\\left(\\omega_n^{n-k}\\right)+i\\cdot H\\left(\\omega_n^{n-k}\\right)}\\\\&=\\overline{F\\left(\\omega_n^{n-k}\\right)}\\end{aligned} \u56e0\u6b64\uff0c\u53ea\u8981\u6c42\u51fa F F \u7684\u70b9\u503c\uff0c\u5c31\u53ef O(n) O(n) \u5730\u63a8\u51fa \\overline{F} \\overline{F} \u7684\u70b9\u503c\uff0c\u89e3\u51fa G,H G,H \u7684\u70b9\u503c\u3002\u5373 \\text{DFT}(G)=\\dfrac{\\text{DFT}(F)+\\text{DFT}(\\overline{F})}{2}\\\\\\text{DFT}(H)=\\dfrac{\\text{DFT}(F)-\\text{DFT}(\\overline{F})}{2i} \\text{DFT}(G)=\\dfrac{\\text{DFT}(F)+\\text{DFT}(\\overline{F})}{2}\\\\\\text{DFT}(H)=\\dfrac{\\text{DFT}(F)-\\text{DFT}(\\overline{F})}{2i} \u8fd9\u6837\uff0c\u4e00\u5171\u53ea\u9700\u8981\u4e24\u6b21 DFT \u5c31\u53ef\u4ee5\u5f97\u5230\u56db\u4e2a\u591a\u9879\u5f0f\u7684\u70b9\u503c\u3002 \u8fd8\u539f\u7cfb\u6570\u8868\u8fbe\uff08IDFT\uff09\u65f6\uff0c\u4e5f\u53ef\u4ee5\u7528\u201c\u4e09\u6b21\u53d8\u4e24\u6b21\u201d\u7684\u601d\u60f3\uff0c\u5c06\u4e24\u4e2a\u591a\u9879\u5f0f\u5206\u865a\u5b9e\u653e\u5728\u4e00\u8d77 IDFT\uff0c\u505a\u5230\u4e24\u6b21 IDFT \u8fd8\u539f\u3002 #include <cstdio> #include <cmath> #include <vector> #include <complex> #define double long double const double PI = std :: acos ( -1 ); namespace __fft { typedef std :: complex < double > comp ; std :: vector < comp > tmp ; std :: vector < int > rev ; void init ( int n ){ tmp . resize ( n ), rev . resize ( n ); for ( int i = 0 ; i < n ; ++ i ){ rev [ i ] = rev [ i >> 1 ] >> 1 ; if ( i & 1 ) rev [ i ] |= n >> 1 ; } } void fft ( std :: vector < comp >:: iterator f , int n , int b ){ for ( int i = 0 ; i < n ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); for ( int i = 2 ; i <= n ; i <<= 1 ){ comp w ( std :: cos ( 2 * PI / i ), b * std :: sin ( 2 * PI / i )); for ( int j = 0 ; j < n ; j += i ){ comp wn ( 1 , 0 ); std :: vector < comp >:: iterator g = f + j , h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ tmp [ k ] = g [ k ] + h [ k ] * wn ; tmp [ k + i / 2 ] = g [ k ] - h [ k ] * wn ; wn = wn * w ; } for ( int k = 0 ; k < i ; ++ k ) f [ j + k ] = tmp [ k ]; } } } } int n , m , p ; std :: vector < int > F , G ; std :: vector < int > mtt ( std :: vector < int > F , std :: vector < int > G , int len ){ typedef long long ll ; using __fft :: comp ; __fft :: init ( len ); int d = 1 << 15 ; std :: vector < comp > A ( len ), B ( len ); std :: vector < comp > C ( len ), D ( len ); for ( int i = 0 ; i < len ; ++ i ) A [ i ] = comp ( F [ i ] / d , 0 ), B [ i ] = comp ( F [ i ] % d , 0 ); for ( int i = 0 ; i < len ; ++ i ) C [ i ] = comp ( G [ i ] / d , 0 ), D [ i ] = comp ( G [ i ] % d , 0 ); std :: vector < comp > H ( len ), I ( len ); for ( int i = 0 ; i < len ; ++ i ) H [ i ] = comp ( A [ i ]. real (), B [ i ]. real ()); __fft :: fft ( H . begin (), len , 1 ); for ( int i = 0 ; i < len ; ++ i ) I [ i ] = conj ( H [( len - i ) % len ]); for ( int i = 0 ; i < len ; ++ i ){ A [ i ] = ( H [ i ] + I [ i ]) * comp ( 0.5 , 0 ); B [ i ] = ( H [ i ] - I [ i ]) * comp ( 0 , -0.5 ); } for ( int i = 0 ; i < len ; ++ i ) H [ i ] = comp ( C [ i ]. real (), D [ i ]. real ()); __fft :: fft ( H . begin (), len , 1 ); for ( int i = 0 ; i < len ; ++ i ) I [ i ] = conj ( H [( len - i ) % len ]); for ( int i = 0 ; i < len ; ++ i ){ C [ i ] = ( H [ i ] + I [ i ]) * comp ( 0.5 , 0 ); D [ i ] = ( H [ i ] - I [ i ]) * comp ( 0 , -0.5 ); } std :: vector < comp > P ( len ), Q ( len ); for ( int i = 0 ; i < len ; ++ i ){ P [ i ] = A [ i ] * C [ i ] + comp ( 0 , 1 ) * ( A [ i ] * D [ i ] + B [ i ] * C [ i ]); Q [ i ] = B [ i ] * D [ i ]; } __fft :: fft ( P . begin (), len , -1 ), __fft :: fft ( Q . begin (), len , -1 ); for ( int i = 0 ; i < len ; ++ i ){ F [ i ] = ( ll )( P [ i ]. real () / len + 0.9 ) * d % p * d % p ; F [ i ] = ( F [ i ] + ( ll )( P [ i ]. imag () / len + 0.9 ) * d ) % p ; F [ i ] = ( F [ i ] + ( ll )( Q [ i ]. real () / len + 0.9 )) % p ; F [ i ] = ( F [ i ] + p ) % p ; } return F ; } int main (){ std :: scanf ( \"%d%d%d\" , & n , & m , & p ); F . resize ( n + 1 ), G . resize ( m + 1 ); for ( int i = 0 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , & F [ i ]), F [ i ] %= p ; for ( int i = 0 ; i <= m ; ++ i ) std :: scanf ( \"%d\" , & G [ i ]), G [ i ] %= p ; int len = 0 ; for ( int i = 0 ; i <= 20 ; ++ i ) if (( 1 << i ) >= n + m + 1 ){ len = 1 << i ; break ; } F . resize ( len ), G . resize ( len ); std :: vector < int > ans ( mtt ( F , G , len )); for ( int i = 0 ; i <= n + m ; ++ i ) std :: printf ( \"%d \" , ans [ i ]); return 0 ; } \u4ee5\u4e0a\u662f\u6211\u65e9\u5e74\u95f4\u7684\u5b9e\u73b0\uff0c\u6548\u7387\u6781\u5176\u4f4e\u4e0b\uff08 10^5 10^5 \u5377\u79ef\u8fd0\u7b97\u8017\u65f6 1109 1109 ms\uff09\u3002\u66f4\u597d\u7684\u5b9e\u73b0\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u9879\u76ee fstdlib \u3002 \u62c6\u7cfb\u6570 FFT \u662f\u65e0\u6cd5\u901a\u8fc7 Library Checker \u7684\uff0c\u56e0\u4e3a Library Checker \u7684\u591a\u9879\u5f0f\u957f\u5ea6\u8fbe\u5230\u4e86 524288 524288 \uff0c\u7eb5\u4f7f\u662f long double \u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u7cbe\u5ea6\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6709\u9898\u76ee\u8003\u5bdf\u89c4\u6a21\u5982\u6b64\u4e4b\u5927\u7684\u4efb\u610f\u6a21\u6570\u5377\u79ef\u3002","title":"\u4efb\u610f\u6a21\u6570\u591a\u9879\u5f0f\u4e58\u6cd5"},{"location":"polynomial/arbitrary_modulo/#_1","text":"\u7531\u4e8e NTT \u7684\u6570\u5b66\u539f\u7406\uff0c\u5b83\u53ea\u80fd\u7528\u4e8e\u8ba1\u7b97\u6a21\u7279\u5b9a\u6a21\u6570\u610f\u4e49\u4e0b\u7684\u591a\u9879\u5f0f\u4e58\u6cd5\u3002\u5982\u4f55\u8ba1\u7b97\u4efb\u610f\u6a21\u6570\u7684\u591a\u9879\u5f0f\u4e58\u6cd5\u5462\uff1f \u4e00\u79cd\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u5229\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u3002\u4e00\u822c\u6211\u4eec\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u5728 10^5 10^5 \u7ea7\u522b\u3001\u7cfb\u6570\u5728 10^9 10^9 \u7ea7\u522b\u7684\u591a\u9879\u5f0f\u7684\u5377\u79ef\uff0c\u5176\u7ed3\u679c\u7684\u7cfb\u6570\u4e0d\u4f1a\u8d85\u8fc7 10^{23} 10^{23} \u7ea7\u522b\u3002\u53ea\u8981\u9009\u53d6\u4e09\u4e2a\u4e58\u79ef\u8d85\u8fc7 10^{23} 10^{23} \u7684 NTT \u6a21\u6570\uff0c\u5206\u522b\u4e58\u4e00\u6b21\uff0c\u518d\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u5408\u5e76\u7b54\u6848\u5373\u53ef\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e38\u6570\u6781\u5927\u3002 \u800c\u6211\u4eec\u8981\u4ecb\u7ecd\u7684\u505a\u6cd5\u662f\u62c6\u7cfb\u6570 FFT\u3002\u5408\u7406\u7684\u62c6\u7cfb\u6570 FFT \u5b9e\u73b0\u6d88\u8017\u7684\u65f6\u95f4\u4ec5\u4ec5\u662f\u666e\u901a\u591a\u9879\u5f0f\u4e58\u6cd5\u7684\u56db\u500d\u5de6\u53f3\uff0c\u662f\u4e00\u79cd\u5f88\u4f18\u79c0\u7684\u4efb\u610f\u6a21\u6570\u591a\u9879\u5f0f\u4e58\u6cd5\u8ba1\u7b97\u65b9\u6cd5\u3002","title":"\u4efb\u610f\u6a21\u6570\u591a\u9879\u5f0f\u4e58\u6cd5"},{"location":"polynomial/arbitrary_modulo/#fft","text":"\u5047\u5b9a\u6211\u4eec\u5377\u79ef\u7684\u6a21\u6570\u4e3a p p \uff0c\u9009\u53d6\u4e00\u4e2a \\sqrt{p} \\sqrt{p} \u7ea7\u522b\u7684\u6570 d d \u3002\u5728 OI \u4e2d\uff0c p p \u4e00\u822c\u81f3\u591a\u4e3a 2^{30} 2^{30} \u7ea7\u522b\u7684\u6570\u3002 \u628a\u591a\u9879\u5f0f F F \u6bcf\u4e00\u9879\u7684\u7cfb\u6570 F_i F_i \u5206\u89e3\u4e3a F_i=d\\cdot G_i+H_i F_i=d\\cdot G_i+H_i \uff0c\u5f97\u5230 F=d\\cdot G+H F=d\\cdot G+H \u3002\u7531\u4e8e d d \u662f \\sqrt{p} \\sqrt{p} \u7ea7\u522b\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1 G G \u548c H H \u7684\u7cfb\u6570\u4e5f\u662f \\sqrt{p} \\sqrt{p} \u7ea7\u522b\u7684\uff0c\u76f8\u4e58\u4e0d\u4f1a\u8d85\u8fc7 double \u7684\u7cbe\u5ea6\u3002 \u4e8e\u662f \\begin{aligned}F\\cdot G&=\\left(d\\cdot A+B\\right)\\cdot\\left(d\\cdot C+D\\right)\\\\&=d^2\\cdot AC+d\\cdot(AD+BC)+BD\\end{aligned} \\begin{aligned}F\\cdot G&=\\left(d\\cdot A+B\\right)\\cdot\\left(d\\cdot C+D\\right)\\\\&=d^2\\cdot AC+d\\cdot(AD+BC)+BD\\end{aligned} \u4f7f\u7528\u201c\u4e09\u6b21\u53d8\u4e24\u6b21\u201d\u7684\u601d\u60f3\u4f18\u5316\uff0c\u53ef\u4ee5\u5728\u4e03\u6b21 DFT \u53d8\u6362\u5185\u5f97\u5230\u7ed3\u679c F\\cdot G F\\cdot G \u3002\u8fd9\u5c31\u662f\u62c6\u7cfb\u6570 FFT \u4e86\u3002","title":"\u62c6\u7cfb\u6570 FFT"},{"location":"polynomial/arbitrary_modulo/#_2","text":"\u6839\u636e\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\u300a\u518d\u8c08\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u300b\uff0c\u5b58\u5728\u4e00\u79cd\u56db\u6b21 DFT \u8ba1\u7b97\u4efb\u610f\u6a21\u6570\u5377\u79ef\u7684\u7b97\u6cd5\u3002 \u8bbe F=G+i\\cdot H F=G+i\\cdot H \uff0c\u5bf9\u4e8e FFT \u9009\u53d6\u7684\u6bcf\u4e00\u4e2a\u70b9 \\left(\\omega_n^k,F\\left(\\omega_n^k\\right)\\right) \\left(\\omega_n^k,F\\left(\\omega_n^k\\right)\\right) \uff0c\u90fd\u6709 \\begin{aligned}F\\left(\\omega_n^k\\right)&= G\\left(\\omega_n^k\\right)+i\\cdot H\\left(\\omega_n^k\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(G_j\\cdot\\omega_n^{jk}+i\\cdot H_j\\cdot\\omega_n^{jk}\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\omega_{n}^{jk}\\cdot\\left(G_j+i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)\\end{aligned} \\begin{aligned}F\\left(\\omega_n^k\\right)&= G\\left(\\omega_n^k\\right)+i\\cdot H\\left(\\omega_n^k\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(G_j\\cdot\\omega_n^{jk}+i\\cdot H_j\\cdot\\omega_n^{jk}\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\omega_{n}^{jk}\\cdot\\left(G_j+i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)\\end{aligned} \u518d\u8bbe \\overline{F}=G-i\\cdot H \\overline{F}=G-i\\cdot H \uff0c\u6211\u4eec\u6709 \\begin{aligned}\\overline{F}\\left(\\omega_n^k\\right)&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j-i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}+H_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}-H_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)-H_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)-i\\cdot\\left(G_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)+H_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)-i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)}\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)}\\\\&=\\overline{G\\left(\\omega_n^{n-k}\\right)+i\\cdot H\\left(\\omega_n^{n-k}\\right)}\\\\&=\\overline{F\\left(\\omega_n^{n-k}\\right)}\\end{aligned} \\begin{aligned}\\overline{F}\\left(\\omega_n^k\\right)&=\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{kj\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j-i\\cdot H_j\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}+H_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{kj\\cdot 2\\pi}{n}-H_j\\cdot\\cos\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)-H_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)-i\\cdot\\left(G_j\\cdot\\sin\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)+H_j\\cdot\\cos\\left(-\\dfrac{kj\\cdot 2\\pi}{n}\\right)\\right)\\right)\\\\&=\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)-i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\left(G_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}-H_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)+i\\cdot\\left(G_j\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+H_j\\cdot\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\right)}\\\\&=\\overline{\\sum\\limits_{j=0}^{n-1}\\left(\\cos\\dfrac{(nj-kj)\\cdot 2\\pi}{n}+i\\cdot\\sin\\dfrac{(nj-kj)\\cdot 2\\pi}{n}\\right)\\cdot\\left(G_j+i\\cdot H_j\\right)}\\\\&=\\overline{G\\left(\\omega_n^{n-k}\\right)+i\\cdot H\\left(\\omega_n^{n-k}\\right)}\\\\&=\\overline{F\\left(\\omega_n^{n-k}\\right)}\\end{aligned} \u56e0\u6b64\uff0c\u53ea\u8981\u6c42\u51fa F F \u7684\u70b9\u503c\uff0c\u5c31\u53ef O(n) O(n) \u5730\u63a8\u51fa \\overline{F} \\overline{F} \u7684\u70b9\u503c\uff0c\u89e3\u51fa G,H G,H \u7684\u70b9\u503c\u3002\u5373 \\text{DFT}(G)=\\dfrac{\\text{DFT}(F)+\\text{DFT}(\\overline{F})}{2}\\\\\\text{DFT}(H)=\\dfrac{\\text{DFT}(F)-\\text{DFT}(\\overline{F})}{2i} \\text{DFT}(G)=\\dfrac{\\text{DFT}(F)+\\text{DFT}(\\overline{F})}{2}\\\\\\text{DFT}(H)=\\dfrac{\\text{DFT}(F)-\\text{DFT}(\\overline{F})}{2i} \u8fd9\u6837\uff0c\u4e00\u5171\u53ea\u9700\u8981\u4e24\u6b21 DFT \u5c31\u53ef\u4ee5\u5f97\u5230\u56db\u4e2a\u591a\u9879\u5f0f\u7684\u70b9\u503c\u3002 \u8fd8\u539f\u7cfb\u6570\u8868\u8fbe\uff08IDFT\uff09\u65f6\uff0c\u4e5f\u53ef\u4ee5\u7528\u201c\u4e09\u6b21\u53d8\u4e24\u6b21\u201d\u7684\u601d\u60f3\uff0c\u5c06\u4e24\u4e2a\u591a\u9879\u5f0f\u5206\u865a\u5b9e\u653e\u5728\u4e00\u8d77 IDFT\uff0c\u505a\u5230\u4e24\u6b21 IDFT \u8fd8\u539f\u3002 #include <cstdio> #include <cmath> #include <vector> #include <complex> #define double long double const double PI = std :: acos ( -1 ); namespace __fft { typedef std :: complex < double > comp ; std :: vector < comp > tmp ; std :: vector < int > rev ; void init ( int n ){ tmp . resize ( n ), rev . resize ( n ); for ( int i = 0 ; i < n ; ++ i ){ rev [ i ] = rev [ i >> 1 ] >> 1 ; if ( i & 1 ) rev [ i ] |= n >> 1 ; } } void fft ( std :: vector < comp >:: iterator f , int n , int b ){ for ( int i = 0 ; i < n ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); for ( int i = 2 ; i <= n ; i <<= 1 ){ comp w ( std :: cos ( 2 * PI / i ), b * std :: sin ( 2 * PI / i )); for ( int j = 0 ; j < n ; j += i ){ comp wn ( 1 , 0 ); std :: vector < comp >:: iterator g = f + j , h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ tmp [ k ] = g [ k ] + h [ k ] * wn ; tmp [ k + i / 2 ] = g [ k ] - h [ k ] * wn ; wn = wn * w ; } for ( int k = 0 ; k < i ; ++ k ) f [ j + k ] = tmp [ k ]; } } } } int n , m , p ; std :: vector < int > F , G ; std :: vector < int > mtt ( std :: vector < int > F , std :: vector < int > G , int len ){ typedef long long ll ; using __fft :: comp ; __fft :: init ( len ); int d = 1 << 15 ; std :: vector < comp > A ( len ), B ( len ); std :: vector < comp > C ( len ), D ( len ); for ( int i = 0 ; i < len ; ++ i ) A [ i ] = comp ( F [ i ] / d , 0 ), B [ i ] = comp ( F [ i ] % d , 0 ); for ( int i = 0 ; i < len ; ++ i ) C [ i ] = comp ( G [ i ] / d , 0 ), D [ i ] = comp ( G [ i ] % d , 0 ); std :: vector < comp > H ( len ), I ( len ); for ( int i = 0 ; i < len ; ++ i ) H [ i ] = comp ( A [ i ]. real (), B [ i ]. real ()); __fft :: fft ( H . begin (), len , 1 ); for ( int i = 0 ; i < len ; ++ i ) I [ i ] = conj ( H [( len - i ) % len ]); for ( int i = 0 ; i < len ; ++ i ){ A [ i ] = ( H [ i ] + I [ i ]) * comp ( 0.5 , 0 ); B [ i ] = ( H [ i ] - I [ i ]) * comp ( 0 , -0.5 ); } for ( int i = 0 ; i < len ; ++ i ) H [ i ] = comp ( C [ i ]. real (), D [ i ]. real ()); __fft :: fft ( H . begin (), len , 1 ); for ( int i = 0 ; i < len ; ++ i ) I [ i ] = conj ( H [( len - i ) % len ]); for ( int i = 0 ; i < len ; ++ i ){ C [ i ] = ( H [ i ] + I [ i ]) * comp ( 0.5 , 0 ); D [ i ] = ( H [ i ] - I [ i ]) * comp ( 0 , -0.5 ); } std :: vector < comp > P ( len ), Q ( len ); for ( int i = 0 ; i < len ; ++ i ){ P [ i ] = A [ i ] * C [ i ] + comp ( 0 , 1 ) * ( A [ i ] * D [ i ] + B [ i ] * C [ i ]); Q [ i ] = B [ i ] * D [ i ]; } __fft :: fft ( P . begin (), len , -1 ), __fft :: fft ( Q . begin (), len , -1 ); for ( int i = 0 ; i < len ; ++ i ){ F [ i ] = ( ll )( P [ i ]. real () / len + 0.9 ) * d % p * d % p ; F [ i ] = ( F [ i ] + ( ll )( P [ i ]. imag () / len + 0.9 ) * d ) % p ; F [ i ] = ( F [ i ] + ( ll )( Q [ i ]. real () / len + 0.9 )) % p ; F [ i ] = ( F [ i ] + p ) % p ; } return F ; } int main (){ std :: scanf ( \"%d%d%d\" , & n , & m , & p ); F . resize ( n + 1 ), G . resize ( m + 1 ); for ( int i = 0 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , & F [ i ]), F [ i ] %= p ; for ( int i = 0 ; i <= m ; ++ i ) std :: scanf ( \"%d\" , & G [ i ]), G [ i ] %= p ; int len = 0 ; for ( int i = 0 ; i <= 20 ; ++ i ) if (( 1 << i ) >= n + m + 1 ){ len = 1 << i ; break ; } F . resize ( len ), G . resize ( len ); std :: vector < int > ans ( mtt ( F , G , len )); for ( int i = 0 ; i <= n + m ; ++ i ) std :: printf ( \"%d \" , ans [ i ]); return 0 ; } \u4ee5\u4e0a\u662f\u6211\u65e9\u5e74\u95f4\u7684\u5b9e\u73b0\uff0c\u6548\u7387\u6781\u5176\u4f4e\u4e0b\uff08 10^5 10^5 \u5377\u79ef\u8fd0\u7b97\u8017\u65f6 1109 1109 ms\uff09\u3002\u66f4\u597d\u7684\u5b9e\u73b0\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u9879\u76ee fstdlib \u3002 \u62c6\u7cfb\u6570 FFT \u662f\u65e0\u6cd5\u901a\u8fc7 Library Checker \u7684\uff0c\u56e0\u4e3a Library Checker \u7684\u591a\u9879\u5f0f\u957f\u5ea6\u8fbe\u5230\u4e86 524288 524288 \uff0c\u7eb5\u4f7f\u662f long double \u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u7cbe\u5ea6\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6709\u9898\u76ee\u8003\u5bdf\u89c4\u6a21\u5982\u6b64\u4e4b\u5927\u7684\u4efb\u610f\u6a21\u6570\u5377\u79ef\u3002","title":"\u4f18\u5316"},{"location":"polynomial/generating_function/","text":"\u7b80\u5355\u4ecb\u7ecd\u751f\u6210\u51fd\u6570 \u00b6 \u751f\u6210\u51fd\u6570\u662f\u4e00\u79cd\u7528\u7ea7\u6570\u7684\u7cfb\u6570\u6765\u8868\u8fbe\u6570\u5217\u7684\u65b9\u6cd5\uff0c\u662f\u5904\u7406\u6570\u5217\u7684\u6700\u5f3a\u6709\u529b\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u5728 OI \u4e2d\u751f\u6210\u51fd\u6570\u5e38\u5e38\u4e0e\u591a\u9879\u5f0f\u7ed3\u5408\u8d77\u6765\u5904\u7406\u8ba1\u6570\u95ee\u9898\u3002 \u51e0\u79cd\u57fa\u672c\u7684\u751f\u6210\u51fd\u6570 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u9650\u957f\u5ea6\u7684\u6570\u5217 a_0, a_1, a_2, \\ldots a_0, a_1, a_2, \\ldots \uff0c\u5b83\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570 (Ordinary Generating Function, OGF) \u662f F(z)=a_0+a_1z+a_2z+\\ldots+a_iz^i+\\ldots F(z)=a_0+a_1z+a_2z+\\ldots+a_iz^i+\\ldots \u5b83\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570 (Exponential Generating Function, EGF) \u662f F(z)=\\dfrac{a_0}{0!}+\\dfrac{a_1z}{1!}+\\dfrac{a_2z^2}{2!}+\\ldots+\\dfrac{a_iz^i}{i!}+\\ldots F(z)=\\dfrac{a_0}{0!}+\\dfrac{a_1z}{1!}+\\dfrac{a_2z^2}{2!}+\\ldots+\\dfrac{a_iz^i}{i!}+\\ldots \u8fd8\u6709\u53e6\u4e00\u79cd\u8f83\u4e3a\u7279\u6b8a\u7684\u72c4\u5229\u514b\u96f7\u578b\u751f\u6210\u51fd\u6570\uff0c\u6682\u65f6\u4e0d\u63d0\u3002 \u666e\u901a\u578b\u751f\u6210\u51fd\u6570 \u00b6 \u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u751f\u6210\u51fd\u6570\u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u5982\u679c\u4e0d\u8bf4\u660e\u662f\u4f55\u79cd\u751f\u6210\u51fd\u6570\uff0c\u9ed8\u8ba4\u662f\u5728\u6307\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u3002 \u6570\u5217 1,1,1,\\ldots 1,1,1,\\ldots \u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u662f\u4ec0\u4e48\uff1f \u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u5f88\u65e0\u8da3\u3002\u8ba9\u6211\u4eec\u628a\u5b83\u5199\u4e0b\u6765 F(z)=1+z+z^2+\\ldots\\\\ zF(z)=z+z^2+z^3+\\ldots F(z)=1+z+z^2+\\ldots\\\\ zF(z)=z+z^2+z^3+\\ldots \u6211\u4eec\u53d1\u73b0 F(z)-zF(z)=1\\\\ F(z)=\\dfrac{1}{1-z} F(z)-zF(z)=1\\\\ F(z)=\\dfrac{1}{1-z} \u4e8b\u5b9e\u4e0a\uff0c 1+z+z^2+\\ldots 1+z+z^2+\\ldots \u662f F(z) F(z) \u7684\u5f00\u653e\u5f62\u5f0f\uff0c\u800c \\dfrac{1}{1-z} \\dfrac{1}{1-z} \u662f F(z) F(z) \u7684\u5c01\u95ed\u5f62\u5f0f\u3002\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u80fd\u5f97\u5230\u6240\u6709\u7c7b\u4f3c\u6570\u5217\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u7684\u5c01\u95ed\u5f62\u5f0f\uff1a F(z)=1+az+a^2z^2+a^3z^3\\ldots=\\dfrac{1}{1-az}\\\\ G(z)=1+z^{a}+z^{2a}+z^{3a}+\\ldots=\\dfrac{1}{1-z^a} F(z)=1+az+a^2z^2+a^3z^3\\ldots=\\dfrac{1}{1-az}\\\\ G(z)=1+z^{a}+z^{2a}+z^{3a}+\\ldots=\\dfrac{1}{1-z^a} \u6ce8\u610f \u5982\u679c\u4f60\u628a z=10 z=10 \u4ee3\u5165 1+z+z^2+\\ldots=\\dfrac{1}{1-z} 1+z+z^2+\\ldots=\\dfrac{1}{1-z} \uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u6839\u672c\u4e0d\u6210\u7acb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u53ea\u6709\u5728 |z|<1 |z|<1 \u65f6\u624d\u6210\u7acb\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5728\u751f\u6210\u51fd\u6570\u4e2d\u6211\u4eec\u53ea\u5173\u5fc3 F(z) F(z) \u7684\u7cfb\u6570\uff0c\u4e0d\u5173\u5fc3 z z \u7684\u503c\u548c F(z) F(z) \u7684\u503c\u3002\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e9b\u5c01\u95ed\u5f62\u5f0f\u5728\u6211\u4eec\u7814\u7a76\u7684\u8303\u56f4\u5185\u603b\u662f\u6210\u7acb\u7684\u3002 \u6570\u5217 \\binom{n}{0},\\binom{n}{1},\\binom{n}{2},\\ldots,\\binom{n}{i},\\ldots \\binom{n}{0},\\binom{n}{1},\\binom{n}{2},\\ldots,\\binom{n}{i},\\ldots \u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u662f\u4ec0\u4e48\uff1f \u8fd9\u4e2a\u95ee\u9898\u548c\u4e0a\u9762\u90a3\u4e2a\u5927\u540c\u5c0f\u5f02\u3002\u76f4\u63a5\u5199\u51fa\u6765 F(z)=\\binom{n}{0}+\\binom{n}{1}z+\\binom{n}{2}z^2+\\ldots F(z)=\\binom{n}{0}+\\binom{n}{1}z+\\binom{n}{2}z^2+\\ldots \u8fd9\u7b26\u5408\u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u5f62\u5f0f\u3002\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u5f97\u5230\u539f\u5f0f\u7684\u5c01\u95ed\u5f62\u5f0f\uff1a F(z)=(1+z)^n F(z)=(1+z)^n \u770b\u6765\u5f88\u591a\u6570\u5217\u90fd\u6709\u5c01\u95ed\u5f62\u5f0f\uff01\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\u5426\u4e5f\u6709\u5c01\u95ed\u5f62\u5f0f\uff1f F(z)=1+z+2z^2+3z^3+5z^4+8z^7+\\ldots F(z)=1+z+2z^2+3z^3+5z^4+8z^7+\\ldots \u56e0\u4e3a f_n=f_{n-1}+f_{n-2} f_n=f_{n-1}+f_{n-2} \uff0c\u4e8e\u662f\u5bf9\u4e8e\u539f\u51fd\u6570\u7684\u6bcf\u4e00\u9879 f_iz^i f_iz^i \uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u7528 f_iz^i=z\\cdot f_{i-1}z^{i-1}+z^2\\cdot f_{i-2}z^{i-2} f_iz^i=z\\cdot f_{i-1}z^{i-1}+z^2\\cdot f_{i-2}z^{i-2} \u66ff\u6362 F(z)=1+zF(z)+z^2F(z) F(z)=1+zF(z)+z^2F(z) \u89e3\u5f97 F(z)=\\dfrac{1}{1-z-z^2} F(z)=\\dfrac{1}{1-z-z^2} \u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u5377\u79ef \u00b6 \u751f\u6210\u51fd\u6570\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97\uff0c\u90a3\u5b83\u5c06\u662f\u65e0\u7528\u7684\u3002\u6211\u4eec\u5148\u4ecb\u7ecd\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u8fd0\u7b97\u3002\u4f60\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u5377\u79ef\u5c31\u662f\u4e58\u6cd5\u3002 \u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u4e0e\u591a\u9879\u5f0f\u7c7b\u4f3c\u3002\u8bbe\u666e\u901a\u578b\u751f\u6210\u51fd\u6570 F(z)=\\sum\\limits_{i=0} f_iz^i F(z)=\\sum\\limits_{i=0} f_iz^i \u548c G(z)=\\sum\\limits_{i=0} g_iz^i G(z)=\\sum\\limits_{i=0} g_iz^i \uff0c\u5219\u6709 (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^if_jg_{i-j}z^i (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^if_jg_{i-j}z^i \u3002\u8fd9\u6837\u5b9a\u4e49\u662f\u5f88\u81ea\u7136\u7684\uff0c\u56e0\u4e3a\u4e58\u6cd5\u5206\u914d\u5f8b\u3002 \u6211\u4eec\u53d1\u73b0\u8fd9\u50cf\u662f\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb\u3002\u5982\u679c\u628a F F \uff0c G G \u548c F*G F*G \u770b\u505a\u4e09\u4e2a\u6570\u7ec4\uff0c\u5219\u5bf9\u4e8e F*G F*G \u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u6709 (F*G)[i]=F[0]\\times G[i]+F[1]\\times G[i-1]+F[2]\\times G[i-2]+F[3]\\times G[i-3]+\\ldots+F[i]\\times G[0] (F*G)[i]=F[0]\\times G[i]+F[1]\\times G[i-1]+F[2]\\times G[i-2]+F[3]\\times G[i-3]+\\ldots+F[i]\\times G[0] \u8fd9\u4e2a DP \u7684\u8f6c\u79fb\u539f\u672c\u662f O(n^2) O(n^2) \u7684\u3002\u4f46\u5982\u679c\u6211\u4eec\u628a\u5b83\u770b\u6210\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\uff0c\u5c31\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u3002 \u5f53\u7136\uff0c\u751f\u6210\u51fd\u6570\u4e0d\u6b62\u80fd\u4f18\u5316\u65f6\u95f4\uff0c\u5b83\u8fd8\u662f\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u8ba1\u7b97\u5de5\u5177\u3002\u53c2\u8003\u4e0b\u9762\u7684\u4f8b\u9898\uff1a \u91ce\u9910 \u4f60\u4eec\u5bb6\u5c06\u8981\u5916\u51fa\u91ce\u9910\uff0c\u7531\u4f60\u8d1f\u8d23\u51c6\u5907\u98df\u7269\u3002\u4f60\u6253\u7b97\u643a\u5e26\u4e00\u4e9b\u6c34\u3001\u725b\u5976\u3001\u997c\u5e72\u3001\u4e09\u660e\u6cbb\u548c\u706b\u817f\u3002\u8003\u8651\u5230\u98df\u7269\u642d\u914d\u5408\u7406\uff0c\u4f60\u51c6\u5907\u7684\u98df\u7269\u8981\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u6c34\u643a\u5e26\u4efb\u610f\u74f6 \u725b\u5976\u643a\u5e26 0 0 \u74f6\u6216 2 2 \u74f6 \u997c\u5e72\u643a\u5e26 3 3 \u76d2\u6216 4 4 \u76d2 \u4e09\u660e\u6cbb\u643a\u5e26\u5076\u6570\u4efd \u706b\u817f\u643a\u5e26\u5947\u6570\u4efd \u6c42\u5982\u679c\u643a\u5e26 1000 1000 \u4ef6\u98df\u7269\uff0c\u4f60\u6709\u591a\u5c11\u79cd\u643a\u5e26\u65b9\u6848\u3002\u4e24\u4e2a\u65b9\u6848\u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u5728\u8fd9\u4e24\u79cd\u65b9\u6848\u4e2d\uff0c\u67d0\u79cd\u98df\u7269\u7684\u6570\u91cf\u4e0d\u540c\u3002 \u643a\u5e26\u6c34\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 1, 1, 1, \\ldots 1, 1, 1, \\ldots (\u643a\u5e26\u4efb\u610f\u74f6\u6c34\u7684\u65b9\u6848\u6570\u90fd\u662f 1 1 )\u3002\u7531\u524d\u9762\u4ecb\u7ecd\u7684\u77e5\u8bc6\u53ef\u77e5\u643a\u5e26\u6c34\u7684\u65b9\u6848\u6570\u7684\u751f\u6210\u51fd\u6570\u662f \\dfrac{1}{1-x} \\dfrac{1}{1-x} \u3002 \u643a\u5e26\u725b\u5976\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 1, 0, 1, 0, 0, 0 \\ldots 1, 0, 1, 0, 0, 0 \\ldots (\u53ea\u6709\u643a\u5e26 0 0 \u74f6\u6216 2 2 \u74f6\u7684\u65b9\u6848\u6570\u662f 1 1 )\u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f 1+x^2 1+x^2 \u3002 \u643a\u5e26\u997c\u5e72\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 0, 0, 0, 1, 1, 0, 0, \\ldots 0, 0, 0, 1, 1, 0, 0, \\ldots \u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f x^3+x^4 x^3+x^4 \u3002 \u643a\u5e26\u4e09\u660e\u6cbb\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 1, 0, 1, 0, 1, 0, \\ldots 1, 0, 1, 0, 1, 0, \\ldots \u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f 1+x^2+x^4+x^6+\\ldots=\\dfrac{1}{1-x^2} 1+x^2+x^4+x^6+\\ldots=\\dfrac{1}{1-x^2} \u3002 \u643a\u5e26\u706b\u817f\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 0, 1, 0, 1, 0, 1, \\ldots 0, 1, 0, 1, 0, 1, \\ldots \u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f \\dfrac{x}{1-x^2} \\dfrac{x}{1-x^2} \u3002 \u7531\u4e8e\u8f6c\u79fb\u7684\u5f62\u5f0f\u4e0e\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u7684\u5f62\u5f0f\u5b8c\u5168\u543b\u5408\uff0c\u8fd9\u4e9b\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u7684 x^{1000} x^{1000} \u6b21\u9879\u7684\u7cfb\u6570\u5c31\u662f\u7b54\u6848\u3002\u4e8e\u662f\u643a\u5e26\u98df\u7269\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u7684\u751f\u6210\u51fd\u6570\u662f \\dfrac{1}{1-x}(1+x^2)(x^3+x^4)\\dfrac{1}{1-x^2}\\dfrac{x}{1-x^2}=\\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \\dfrac{1}{1-x}(1+x^2)(x^3+x^4)\\dfrac{1}{1-x^2}\\dfrac{x}{1-x^2}=\\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \u7531\u4e8e\u5305\u542b\u9664\u6cd5\uff0c\u6211\u4eec\u73b0\u5728\u8fd8\u4e0d\u4f1a\u6c42 \\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \u7684\u7cfb\u6570\u3002\u4f46\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u590d\u6742\u60c5\u51b5\u7684\u7b80\u6d01\u8868\u8fbe\u65b9\u5f0f\u3002 \u6307\u6570\u578b\u751f\u6210\u51fd\u6570 \u00b6 \u4e3a\u4ec0\u4e48\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u88ab\u79f0\u4e3a\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u9636\u4e58\u578b\u751f\u6210\u51fd\u6570\uff1f\u56e0\u4e3a\u6307\u6570\u51fd\u6570\u7684\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u662f e^x = \\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} e^x = \\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} \u6211\u4eec\u4e5f\u5e38\u628a e^x e^x \u5199\u4f5c \\exp x \\exp x \u3002\u53ef\u4ee5\u770b\u51fa \\exp x \\exp x \u6b63\u597d\u4e0e\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u7684\u5f62\u5f0f\u543b\u5408\u3002 \u7531\u4e8e \\binom{n}{m}=\\dfrac{n!}{m!(n-m)!} \\binom{n}{m}=\\dfrac{n!}{m!(n-m)!} \uff0c\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u6070\u597d\u6ee1\u8db3 (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^i\\binom{i}{j}f_jg_{i-j}z^i (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^i\\binom{i}{j}f_jg_{i-j}z^i \uff0c\u6b63\u597d\u6bd4 OGF \u591a\u4e86\u4e00\u4e2a\u4e8c\u9879\u5f0f\u7cfb\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u9898\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u8fd9\u91cc\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570\u7684\u4f5c\u7528\u3002 \u57fa\u56e0 \u79d1\u5b66\u5bb6\u6700\u8fd1\u5728\u706b\u661f\u4e0a\u53d1\u73b0\u4e86\u4e00\u79cd\u539f\u59cb\u751f\u7269\u3002\u8fd9\u79cd\u539f\u59cb\u751f\u7269\u4e5f\u662f\u4ee5 DNA \u4f5c\u4e3a\u9057\u4f20\u7269\u8d28\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u4ec5\u542b \\texttt{A,T,G,C} \\texttt{A,T,G,C} \u7684\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u8fd9\u4e2a\u751f\u7269\u7684\u67d0\u4e2a\u57fa\u56e0\u7247\u6bb5\u3002\u7ecf\u8fc7\u7814\u7a76\uff0c\u79d1\u5b66\u5bb6\u53d1\u73b0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6ee1\u8db3\u5982\u4e0b\u9650\u5236\uff1a \\texttt{A} \\texttt{A} \u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5076\u6570 \\texttt{T} \\texttt{T} \u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570 \u6c42\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u5982\u4e0a\u9650\u5236\u4e14\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e\u5b57\u7b26\u95f4\u7684\u4e0d\u540c\u987a\u5e8f\u4e5f\u8981\u8ba1\u5165\u65b9\u6848\uff0c\u5728\u8f6c\u79fb\u65f6\u6211\u4eec\u8981\u4e58\u4e0a\u5bf9\u5e94\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570\u3002\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u6b63\u597d\u53ef\u4ee5\u62c5\u8d1f\u8fd9\u4e00\u4efb\u52a1\u3002 \\texttt{A} \\texttt{A} \u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u662f 1+\\dfrac{x^2}{2!}+\\dfrac{x^2}{2!}+\\dfrac{x^4}{4!}+\\ldots=\\dfrac{e^x + e^{-x}}{2} 1+\\dfrac{x^2}{2!}+\\dfrac{x^2}{2!}+\\dfrac{x^4}{4!}+\\ldots=\\dfrac{e^x + e^{-x}}{2} \u3002 \\texttt{T} \\texttt{T} \u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u662f \\dfrac{x}{1!}+\\dfrac{x^3}{3!}+\\dfrac{x^5}{5!}+\\ldots=\\dfrac{e^x-e^{-x}}{2} \\dfrac{x}{1!}+\\dfrac{x^3}{3!}+\\dfrac{x^5}{5!}+\\ldots=\\dfrac{e^x-e^{-x}}{2} \u3002 \\texttt{G} \\texttt{G} \u548c \\texttt{C} \\texttt{C} \u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u90fd\u662f e^x e^x \u3002 \u4e8e\u662f\u5b57\u7b26\u4e32\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u5c31\u662f \\dfrac{e^x + e^{-x}}{2}\\dfrac{e^x - e^{-x}}{2}e^xe^x=\\dfrac{e^{4x}-1}{4} \\dfrac{e^x + e^{-x}}{2}\\dfrac{e^x - e^{-x}}{2}e^xe^x=\\dfrac{e^{4x}-1}{4} \u7528\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u5c55\u5f00\u5c31\u53ef\u4ee5\u5f97\u5230\u5404\u9879\u7cfb\u6570\u4e86\u3002\u8fd9\u4e2a\u751f\u6210\u51fd\u6570\u7684\u7b2c n n \u9879\u7cfb\u6570\u5c31\u662f\u7b54\u6848\u3002 \u66f4\u9ad8\u9636\u7684\u751f\u6210\u51fd\u6570\u8fd0\u7b97 \u00b6 \u4e4b\u524d\u6211\u4eec\u4ecb\u7ecd\u4e86\u751f\u6210\u51fd\u6570\u7684\u4e58\u6cd5 (\u5377\u79ef)\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u8fd9\u4e00\u7c7b\u7c7b\u591a\u9879\u5f0f\u751f\u6210\u51fd\u6570\u8fd8\u53ef\u4ee5\u6c42\u6307\u6570\u51fd\u6570\u3001\u5bf9\u6570\u51fd\u6570\u3001\u5f00\u5e73\u65b9\u6839\u751a\u81f3\u6c42\u4e09\u89d2\u51fd\u6570\uff01\u5176\u4e2d\uff0c\u6307\u6570\u51fd\u6570\u6709\u7ec4\u5408\u610f\u4e49\uff0c\u5bf9\u6570\u51fd\u6570\u5219\u662f\u8fd9\u4e00\u7ec4\u5408\u610f\u4e49\u7684\u53cd\u6f14\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u9053\u53c2\u8003\u7684\u4f8b\u9898\uff0c\u5728\u638c\u63e1\u4e86\u591a\u9879\u5f0f\u7684\u76f8\u5173\u79d1\u6280\u540e\u53ef\u4ee5\u53bb\u505a\uff0c\u7406\u89e3\u751f\u6210\u51fd\u6570\u7684\u5f3a\u5927\u3002 \u4ed8\u516c\u4e3b\u7684\u80cc\u5305 The Child and Binary Tree","title":"\u7b80\u5355\u4ecb\u7ecd\u751f\u6210\u51fd\u6570"},{"location":"polynomial/generating_function/#_1","text":"\u751f\u6210\u51fd\u6570\u662f\u4e00\u79cd\u7528\u7ea7\u6570\u7684\u7cfb\u6570\u6765\u8868\u8fbe\u6570\u5217\u7684\u65b9\u6cd5\uff0c\u662f\u5904\u7406\u6570\u5217\u7684\u6700\u5f3a\u6709\u529b\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u5728 OI \u4e2d\u751f\u6210\u51fd\u6570\u5e38\u5e38\u4e0e\u591a\u9879\u5f0f\u7ed3\u5408\u8d77\u6765\u5904\u7406\u8ba1\u6570\u95ee\u9898\u3002","title":"\u7b80\u5355\u4ecb\u7ecd\u751f\u6210\u51fd\u6570"},{"location":"polynomial/generating_function/#_2","text":"\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u9650\u957f\u5ea6\u7684\u6570\u5217 a_0, a_1, a_2, \\ldots a_0, a_1, a_2, \\ldots \uff0c\u5b83\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570 (Ordinary Generating Function, OGF) \u662f F(z)=a_0+a_1z+a_2z+\\ldots+a_iz^i+\\ldots F(z)=a_0+a_1z+a_2z+\\ldots+a_iz^i+\\ldots \u5b83\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570 (Exponential Generating Function, EGF) \u662f F(z)=\\dfrac{a_0}{0!}+\\dfrac{a_1z}{1!}+\\dfrac{a_2z^2}{2!}+\\ldots+\\dfrac{a_iz^i}{i!}+\\ldots F(z)=\\dfrac{a_0}{0!}+\\dfrac{a_1z}{1!}+\\dfrac{a_2z^2}{2!}+\\ldots+\\dfrac{a_iz^i}{i!}+\\ldots \u8fd8\u6709\u53e6\u4e00\u79cd\u8f83\u4e3a\u7279\u6b8a\u7684\u72c4\u5229\u514b\u96f7\u578b\u751f\u6210\u51fd\u6570\uff0c\u6682\u65f6\u4e0d\u63d0\u3002","title":"\u51e0\u79cd\u57fa\u672c\u7684\u751f\u6210\u51fd\u6570"},{"location":"polynomial/generating_function/#_3","text":"\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u751f\u6210\u51fd\u6570\u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u5982\u679c\u4e0d\u8bf4\u660e\u662f\u4f55\u79cd\u751f\u6210\u51fd\u6570\uff0c\u9ed8\u8ba4\u662f\u5728\u6307\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u3002 \u6570\u5217 1,1,1,\\ldots 1,1,1,\\ldots \u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u662f\u4ec0\u4e48\uff1f \u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u5f88\u65e0\u8da3\u3002\u8ba9\u6211\u4eec\u628a\u5b83\u5199\u4e0b\u6765 F(z)=1+z+z^2+\\ldots\\\\ zF(z)=z+z^2+z^3+\\ldots F(z)=1+z+z^2+\\ldots\\\\ zF(z)=z+z^2+z^3+\\ldots \u6211\u4eec\u53d1\u73b0 F(z)-zF(z)=1\\\\ F(z)=\\dfrac{1}{1-z} F(z)-zF(z)=1\\\\ F(z)=\\dfrac{1}{1-z} \u4e8b\u5b9e\u4e0a\uff0c 1+z+z^2+\\ldots 1+z+z^2+\\ldots \u662f F(z) F(z) \u7684\u5f00\u653e\u5f62\u5f0f\uff0c\u800c \\dfrac{1}{1-z} \\dfrac{1}{1-z} \u662f F(z) F(z) \u7684\u5c01\u95ed\u5f62\u5f0f\u3002\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u80fd\u5f97\u5230\u6240\u6709\u7c7b\u4f3c\u6570\u5217\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u7684\u5c01\u95ed\u5f62\u5f0f\uff1a F(z)=1+az+a^2z^2+a^3z^3\\ldots=\\dfrac{1}{1-az}\\\\ G(z)=1+z^{a}+z^{2a}+z^{3a}+\\ldots=\\dfrac{1}{1-z^a} F(z)=1+az+a^2z^2+a^3z^3\\ldots=\\dfrac{1}{1-az}\\\\ G(z)=1+z^{a}+z^{2a}+z^{3a}+\\ldots=\\dfrac{1}{1-z^a} \u6ce8\u610f \u5982\u679c\u4f60\u628a z=10 z=10 \u4ee3\u5165 1+z+z^2+\\ldots=\\dfrac{1}{1-z} 1+z+z^2+\\ldots=\\dfrac{1}{1-z} \uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u6839\u672c\u4e0d\u6210\u7acb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u53ea\u6709\u5728 |z|<1 |z|<1 \u65f6\u624d\u6210\u7acb\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5728\u751f\u6210\u51fd\u6570\u4e2d\u6211\u4eec\u53ea\u5173\u5fc3 F(z) F(z) \u7684\u7cfb\u6570\uff0c\u4e0d\u5173\u5fc3 z z \u7684\u503c\u548c F(z) F(z) \u7684\u503c\u3002\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e9b\u5c01\u95ed\u5f62\u5f0f\u5728\u6211\u4eec\u7814\u7a76\u7684\u8303\u56f4\u5185\u603b\u662f\u6210\u7acb\u7684\u3002 \u6570\u5217 \\binom{n}{0},\\binom{n}{1},\\binom{n}{2},\\ldots,\\binom{n}{i},\\ldots \\binom{n}{0},\\binom{n}{1},\\binom{n}{2},\\ldots,\\binom{n}{i},\\ldots \u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u662f\u4ec0\u4e48\uff1f \u8fd9\u4e2a\u95ee\u9898\u548c\u4e0a\u9762\u90a3\u4e2a\u5927\u540c\u5c0f\u5f02\u3002\u76f4\u63a5\u5199\u51fa\u6765 F(z)=\\binom{n}{0}+\\binom{n}{1}z+\\binom{n}{2}z^2+\\ldots F(z)=\\binom{n}{0}+\\binom{n}{1}z+\\binom{n}{2}z^2+\\ldots \u8fd9\u7b26\u5408\u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u5f62\u5f0f\u3002\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u5f97\u5230\u539f\u5f0f\u7684\u5c01\u95ed\u5f62\u5f0f\uff1a F(z)=(1+z)^n F(z)=(1+z)^n \u770b\u6765\u5f88\u591a\u6570\u5217\u90fd\u6709\u5c01\u95ed\u5f62\u5f0f\uff01\u6590\u6ce2\u90a3\u5951\u6570\u5217\u662f\u5426\u4e5f\u6709\u5c01\u95ed\u5f62\u5f0f\uff1f F(z)=1+z+2z^2+3z^3+5z^4+8z^7+\\ldots F(z)=1+z+2z^2+3z^3+5z^4+8z^7+\\ldots \u56e0\u4e3a f_n=f_{n-1}+f_{n-2} f_n=f_{n-1}+f_{n-2} \uff0c\u4e8e\u662f\u5bf9\u4e8e\u539f\u51fd\u6570\u7684\u6bcf\u4e00\u9879 f_iz^i f_iz^i \uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u7528 f_iz^i=z\\cdot f_{i-1}z^{i-1}+z^2\\cdot f_{i-2}z^{i-2} f_iz^i=z\\cdot f_{i-1}z^{i-1}+z^2\\cdot f_{i-2}z^{i-2} \u66ff\u6362 F(z)=1+zF(z)+z^2F(z) F(z)=1+zF(z)+z^2F(z) \u89e3\u5f97 F(z)=\\dfrac{1}{1-z-z^2} F(z)=\\dfrac{1}{1-z-z^2}","title":"\u666e\u901a\u578b\u751f\u6210\u51fd\u6570"},{"location":"polynomial/generating_function/#_4","text":"\u751f\u6210\u51fd\u6570\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97\uff0c\u90a3\u5b83\u5c06\u662f\u65e0\u7528\u7684\u3002\u6211\u4eec\u5148\u4ecb\u7ecd\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u8fd0\u7b97\u3002\u4f60\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u5377\u79ef\u5c31\u662f\u4e58\u6cd5\u3002 \u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u4e0e\u591a\u9879\u5f0f\u7c7b\u4f3c\u3002\u8bbe\u666e\u901a\u578b\u751f\u6210\u51fd\u6570 F(z)=\\sum\\limits_{i=0} f_iz^i F(z)=\\sum\\limits_{i=0} f_iz^i \u548c G(z)=\\sum\\limits_{i=0} g_iz^i G(z)=\\sum\\limits_{i=0} g_iz^i \uff0c\u5219\u6709 (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^if_jg_{i-j}z^i (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^if_jg_{i-j}z^i \u3002\u8fd9\u6837\u5b9a\u4e49\u662f\u5f88\u81ea\u7136\u7684\uff0c\u56e0\u4e3a\u4e58\u6cd5\u5206\u914d\u5f8b\u3002 \u6211\u4eec\u53d1\u73b0\u8fd9\u50cf\u662f\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb\u3002\u5982\u679c\u628a F F \uff0c G G \u548c F*G F*G \u770b\u505a\u4e09\u4e2a\u6570\u7ec4\uff0c\u5219\u5bf9\u4e8e F*G F*G \u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u6709 (F*G)[i]=F[0]\\times G[i]+F[1]\\times G[i-1]+F[2]\\times G[i-2]+F[3]\\times G[i-3]+\\ldots+F[i]\\times G[0] (F*G)[i]=F[0]\\times G[i]+F[1]\\times G[i-1]+F[2]\\times G[i-2]+F[3]\\times G[i-3]+\\ldots+F[i]\\times G[0] \u8fd9\u4e2a DP \u7684\u8f6c\u79fb\u539f\u672c\u662f O(n^2) O(n^2) \u7684\u3002\u4f46\u5982\u679c\u6211\u4eec\u628a\u5b83\u770b\u6210\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\uff0c\u5c31\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u3002 \u5f53\u7136\uff0c\u751f\u6210\u51fd\u6570\u4e0d\u6b62\u80fd\u4f18\u5316\u65f6\u95f4\uff0c\u5b83\u8fd8\u662f\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u8ba1\u7b97\u5de5\u5177\u3002\u53c2\u8003\u4e0b\u9762\u7684\u4f8b\u9898\uff1a \u91ce\u9910 \u4f60\u4eec\u5bb6\u5c06\u8981\u5916\u51fa\u91ce\u9910\uff0c\u7531\u4f60\u8d1f\u8d23\u51c6\u5907\u98df\u7269\u3002\u4f60\u6253\u7b97\u643a\u5e26\u4e00\u4e9b\u6c34\u3001\u725b\u5976\u3001\u997c\u5e72\u3001\u4e09\u660e\u6cbb\u548c\u706b\u817f\u3002\u8003\u8651\u5230\u98df\u7269\u642d\u914d\u5408\u7406\uff0c\u4f60\u51c6\u5907\u7684\u98df\u7269\u8981\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u6c34\u643a\u5e26\u4efb\u610f\u74f6 \u725b\u5976\u643a\u5e26 0 0 \u74f6\u6216 2 2 \u74f6 \u997c\u5e72\u643a\u5e26 3 3 \u76d2\u6216 4 4 \u76d2 \u4e09\u660e\u6cbb\u643a\u5e26\u5076\u6570\u4efd \u706b\u817f\u643a\u5e26\u5947\u6570\u4efd \u6c42\u5982\u679c\u643a\u5e26 1000 1000 \u4ef6\u98df\u7269\uff0c\u4f60\u6709\u591a\u5c11\u79cd\u643a\u5e26\u65b9\u6848\u3002\u4e24\u4e2a\u65b9\u6848\u4e0d\u540c\u5f53\u4e14\u4ec5\u5f53\u5728\u8fd9\u4e24\u79cd\u65b9\u6848\u4e2d\uff0c\u67d0\u79cd\u98df\u7269\u7684\u6570\u91cf\u4e0d\u540c\u3002 \u643a\u5e26\u6c34\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 1, 1, 1, \\ldots 1, 1, 1, \\ldots (\u643a\u5e26\u4efb\u610f\u74f6\u6c34\u7684\u65b9\u6848\u6570\u90fd\u662f 1 1 )\u3002\u7531\u524d\u9762\u4ecb\u7ecd\u7684\u77e5\u8bc6\u53ef\u77e5\u643a\u5e26\u6c34\u7684\u65b9\u6848\u6570\u7684\u751f\u6210\u51fd\u6570\u662f \\dfrac{1}{1-x} \\dfrac{1}{1-x} \u3002 \u643a\u5e26\u725b\u5976\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 1, 0, 1, 0, 0, 0 \\ldots 1, 0, 1, 0, 0, 0 \\ldots (\u53ea\u6709\u643a\u5e26 0 0 \u74f6\u6216 2 2 \u74f6\u7684\u65b9\u6848\u6570\u662f 1 1 )\u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f 1+x^2 1+x^2 \u3002 \u643a\u5e26\u997c\u5e72\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 0, 0, 0, 1, 1, 0, 0, \\ldots 0, 0, 0, 1, 1, 0, 0, \\ldots \u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f x^3+x^4 x^3+x^4 \u3002 \u643a\u5e26\u4e09\u660e\u6cbb\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 1, 0, 1, 0, 1, 0, \\ldots 1, 0, 1, 0, 1, 0, \\ldots \u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f 1+x^2+x^4+x^6+\\ldots=\\dfrac{1}{1-x^2} 1+x^2+x^4+x^6+\\ldots=\\dfrac{1}{1-x^2} \u3002 \u643a\u5e26\u706b\u817f\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u662f 0, 1, 0, 1, 0, 1, \\ldots 0, 1, 0, 1, 0, 1, \\ldots \u3002\u5b83\u7684\u751f\u6210\u51fd\u6570\u662f \\dfrac{x}{1-x^2} \\dfrac{x}{1-x^2} \u3002 \u7531\u4e8e\u8f6c\u79fb\u7684\u5f62\u5f0f\u4e0e\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u7684\u5f62\u5f0f\u5b8c\u5168\u543b\u5408\uff0c\u8fd9\u4e9b\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u7684 x^{1000} x^{1000} \u6b21\u9879\u7684\u7cfb\u6570\u5c31\u662f\u7b54\u6848\u3002\u4e8e\u662f\u643a\u5e26\u98df\u7269\u7684\u65b9\u6848\u6570\u5f62\u6210\u7684\u6570\u5217\u7684\u751f\u6210\u51fd\u6570\u662f \\dfrac{1}{1-x}(1+x^2)(x^3+x^4)\\dfrac{1}{1-x^2}\\dfrac{x}{1-x^2}=\\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \\dfrac{1}{1-x}(1+x^2)(x^3+x^4)\\dfrac{1}{1-x^2}\\dfrac{x}{1-x^2}=\\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \u7531\u4e8e\u5305\u542b\u9664\u6cd5\uff0c\u6211\u4eec\u73b0\u5728\u8fd8\u4e0d\u4f1a\u6c42 \\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \\dfrac{x^4+x^5+x^6+x^7}{(1-x)(1-x^2)^2} \u7684\u7cfb\u6570\u3002\u4f46\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u590d\u6742\u60c5\u51b5\u7684\u7b80\u6d01\u8868\u8fbe\u65b9\u5f0f\u3002","title":"\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\u5377\u79ef"},{"location":"polynomial/generating_function/#_5","text":"\u4e3a\u4ec0\u4e48\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u88ab\u79f0\u4e3a\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u9636\u4e58\u578b\u751f\u6210\u51fd\u6570\uff1f\u56e0\u4e3a\u6307\u6570\u51fd\u6570\u7684\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u662f e^x = \\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} e^x = \\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} \u6211\u4eec\u4e5f\u5e38\u628a e^x e^x \u5199\u4f5c \\exp x \\exp x \u3002\u53ef\u4ee5\u770b\u51fa \\exp x \\exp x \u6b63\u597d\u4e0e\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u7684\u5f62\u5f0f\u543b\u5408\u3002 \u7531\u4e8e \\binom{n}{m}=\\dfrac{n!}{m!(n-m)!} \\binom{n}{m}=\\dfrac{n!}{m!(n-m)!} \uff0c\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u7684\u5377\u79ef\u6070\u597d\u6ee1\u8db3 (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^i\\binom{i}{j}f_jg_{i-j}z^i (F*G)(z)=\\sum\\limits_{i=0}\\sum\\limits_{j=0}^i\\binom{i}{j}f_jg_{i-j}z^i \uff0c\u6b63\u597d\u6bd4 OGF \u591a\u4e86\u4e00\u4e2a\u4e8c\u9879\u5f0f\u7cfb\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u9898\u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u8fd9\u91cc\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570\u7684\u4f5c\u7528\u3002 \u57fa\u56e0 \u79d1\u5b66\u5bb6\u6700\u8fd1\u5728\u706b\u661f\u4e0a\u53d1\u73b0\u4e86\u4e00\u79cd\u539f\u59cb\u751f\u7269\u3002\u8fd9\u79cd\u539f\u59cb\u751f\u7269\u4e5f\u662f\u4ee5 DNA \u4f5c\u4e3a\u9057\u4f20\u7269\u8d28\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u4ec5\u542b \\texttt{A,T,G,C} \\texttt{A,T,G,C} \u7684\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u8fd9\u4e2a\u751f\u7269\u7684\u67d0\u4e2a\u57fa\u56e0\u7247\u6bb5\u3002\u7ecf\u8fc7\u7814\u7a76\uff0c\u79d1\u5b66\u5bb6\u53d1\u73b0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6ee1\u8db3\u5982\u4e0b\u9650\u5236\uff1a \\texttt{A} \\texttt{A} \u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5076\u6570 \\texttt{T} \\texttt{T} \u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570 \u6c42\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u5982\u4e0a\u9650\u5236\u4e14\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e\u5b57\u7b26\u95f4\u7684\u4e0d\u540c\u987a\u5e8f\u4e5f\u8981\u8ba1\u5165\u65b9\u6848\uff0c\u5728\u8f6c\u79fb\u65f6\u6211\u4eec\u8981\u4e58\u4e0a\u5bf9\u5e94\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570\u3002\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u6b63\u597d\u53ef\u4ee5\u62c5\u8d1f\u8fd9\u4e00\u4efb\u52a1\u3002 \\texttt{A} \\texttt{A} \u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u662f 1+\\dfrac{x^2}{2!}+\\dfrac{x^2}{2!}+\\dfrac{x^4}{4!}+\\ldots=\\dfrac{e^x + e^{-x}}{2} 1+\\dfrac{x^2}{2!}+\\dfrac{x^2}{2!}+\\dfrac{x^4}{4!}+\\ldots=\\dfrac{e^x + e^{-x}}{2} \u3002 \\texttt{T} \\texttt{T} \u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u662f \\dfrac{x}{1!}+\\dfrac{x^3}{3!}+\\dfrac{x^5}{5!}+\\ldots=\\dfrac{e^x-e^{-x}}{2} \\dfrac{x}{1!}+\\dfrac{x^3}{3!}+\\dfrac{x^5}{5!}+\\ldots=\\dfrac{e^x-e^{-x}}{2} \u3002 \\texttt{G} \\texttt{G} \u548c \\texttt{C} \\texttt{C} \u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u90fd\u662f e^x e^x \u3002 \u4e8e\u662f\u5b57\u7b26\u4e32\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\u5c31\u662f \\dfrac{e^x + e^{-x}}{2}\\dfrac{e^x - e^{-x}}{2}e^xe^x=\\dfrac{e^{4x}-1}{4} \\dfrac{e^x + e^{-x}}{2}\\dfrac{e^x - e^{-x}}{2}e^xe^x=\\dfrac{e^{4x}-1}{4} \u7528\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u5c55\u5f00\u5c31\u53ef\u4ee5\u5f97\u5230\u5404\u9879\u7cfb\u6570\u4e86\u3002\u8fd9\u4e2a\u751f\u6210\u51fd\u6570\u7684\u7b2c n n \u9879\u7cfb\u6570\u5c31\u662f\u7b54\u6848\u3002","title":"\u6307\u6570\u578b\u751f\u6210\u51fd\u6570"},{"location":"polynomial/generating_function/#_6","text":"\u4e4b\u524d\u6211\u4eec\u4ecb\u7ecd\u4e86\u751f\u6210\u51fd\u6570\u7684\u4e58\u6cd5 (\u5377\u79ef)\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u8fd9\u4e00\u7c7b\u7c7b\u591a\u9879\u5f0f\u751f\u6210\u51fd\u6570\u8fd8\u53ef\u4ee5\u6c42\u6307\u6570\u51fd\u6570\u3001\u5bf9\u6570\u51fd\u6570\u3001\u5f00\u5e73\u65b9\u6839\u751a\u81f3\u6c42\u4e09\u89d2\u51fd\u6570\uff01\u5176\u4e2d\uff0c\u6307\u6570\u51fd\u6570\u6709\u7ec4\u5408\u610f\u4e49\uff0c\u5bf9\u6570\u51fd\u6570\u5219\u662f\u8fd9\u4e00\u7ec4\u5408\u610f\u4e49\u7684\u53cd\u6f14\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u9053\u53c2\u8003\u7684\u4f8b\u9898\uff0c\u5728\u638c\u63e1\u4e86\u591a\u9879\u5f0f\u7684\u76f8\u5173\u79d1\u6280\u540e\u53ef\u4ee5\u53bb\u505a\uff0c\u7406\u89e3\u751f\u6210\u51fd\u6570\u7684\u5f3a\u5927\u3002 \u4ed8\u516c\u4e3b\u7684\u80cc\u5305 The Child and Binary Tree","title":"\u66f4\u9ad8\u9636\u7684\u751f\u6210\u51fd\u6570\u8fd0\u7b97"},{"location":"polynomial/newtons_method/","text":"\u591a\u9879\u5f0f\u4e2d\u7684 Newton's Method \u00b6 Newton's Method \u662f\u725b\u987f\u63d0\u51fa\u7684\u4e00\u79cd\u5c06\u975e\u7ebf\u6027\u65b9\u7a0b\u7ebf\u6027\u5316\u7684\u8fd1\u4f3c\u65b9\u6cd5\u3002\u5b83\u4e5f\u53ef\u4ee5\u8fd0\u7528\u5728\u591a\u9879\u5f0f\u4e2d\uff0c\u6c42\u5173\u4e8e\u591a\u9879\u5f0f\u7684\u975e\u7ebf\u6027\u65b9\u7a0b\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u89e3\u3002 \u8981\u5b66\u4e60 Newton's Method\uff0c\u5f97\u5148\u4e86\u89e3\u6cf0\u52d2\u7ea7\u6570\u3002 \u6cf0\u52d2\u7ea7\u6570\u548c\u9ea6\u514b\u52b3\u6797\u7ea7\u6570 \u00b6 \u6cf0\u52d2\u7ea7\u6570\u7528\u65e0\u9650\u9879\u8fde\u52a0\u5f0f\u6765\u8868\u793a\u51fd\u6570\u3002\u4e00\u822c\u5730\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5149\u6ed1\u51fd\u6570 f(x) f(x) \uff0c\u6709 f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(a)} {i!}(x-a)^n f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(a)} {i!}(x-a)^n \u8fd9\u4e2a\u7b49\u5f0f\u88ab\u79f0\u4e3a f(x) f(x) \u5728 a a \u5904\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\uff1b\u7b49\u53f7\u53f3\u8fb9\u7684\u5f0f\u5b50\u88ab\u79f0\u4e3a f(x) f(x) \u5728 a a \u5904\u7684\u6cf0\u52d2\u7ea7\u6570\u3002\u5728 0 0 \u5904\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u548c\u6cf0\u52d2\u7ea7\u6570\u4e5f\u88ab\u79f0\u4e3a\u9ea6\u514b\u52b3\u6797\u5c55\u5f00\u5f0f\u548c\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\uff0c\u6709\u7684\u5728\u751f\u6210\u51fd\u6570\u4e2d\u5e38\u7528\uff1a (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n\\\\ (1-x)^{-m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{n+m-1}{n}x^n\\\\ (1+x)^{m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{m}{n}x^n\\\\ \\ln(1-x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{x^n}{n}\\\\ \\ln(1+x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{(-1)^{n}x^n}{n}\\\\ \\exp x=-\\sum\\limits_{n=0}^{+\\infty}\\dfrac{x^n}{n!} (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n\\\\ (1-x)^{-m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{n+m-1}{n}x^n\\\\ (1+x)^{m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{m}{n}x^n\\\\ \\ln(1-x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{x^n}{n}\\\\ \\ln(1+x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{(-1)^{n}x^n}{n}\\\\ \\exp x=-\\sum\\limits_{n=0}^{+\\infty}\\dfrac{x^n}{n!} \u6cf0\u52d2\u5c55\u5f00\u5f0f\u5e76\u975e\u603b\u662f\u6210\u7acb \u6cf0\u52d2\u5c55\u5f00\u5f0f\u5e76\u975e\u5bf9\u4e8e f(x) f(x) \u5b9a\u4e49\u57df\u5185\u6240\u6709 x x \u90fd\u6210\u7acb\u3002\u6bd4\u5982\uff0c\u5c06 x=10 x=10 \u4ee3\u5165 (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n \uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u6839\u672c\u4e0d\u6210\u7acb\u3002\u4e8b\u5b9e\u4e0a\uff0c (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n \u8fd9\u4e2a\u5f0f\u5b50\u53ea\u5bf9 |x|<1 |x|<1 \u6210\u7acb\u3002 \u5176\u4ed6\u51fd\u6570\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u6709\u7684\u4e5f\u6709\u7c7b\u4f3c\u7684\u9650\u5236\u3002\u4f46\u5728 OI \u4e2d\u6211\u4eec\u53ea\u5173\u5fc3\u5c55\u5f00\u5f0f\u7684\u7cfb\u6570\uff0c\u4e0d\u5173\u5fc3 x x \u7684\u503c\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e9b\u6cf0\u52d2\u5c55\u5f00\u5f0f\u5728\u6211\u4eec\u7814\u7a76\u7684\u8303\u56f4\u5185\u603b\u662f\u6210\u7acb\u7684\u3002 \u4e86\u89e3\u4e86\u6cf0\u52d2\u7ea7\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5b66\u4e60 Newton's Method \u4e86\uff1a \u4e00\u822c\u7684 Newton's Method \u00b6 Newton's Method \u4e00\u822c\u88ab\u7528\u4e8e\u6c42\u89e3\u975e\u7ebf\u6027\u65b9\u7a0b\u3002\u5b83\u662f\u8fd9\u6837\u6c42 f(x)=0 f(x)=0 \u7684\u6839\u7684\uff1a \u9009\u53d6\u5408\u9002\u4e00\u4e2a\u6570\u4f5c\u4e3a x_0 x_0 \u5c06 f(x) f(x) \u5728 x_0 x_0 \u5904\u5c55\u5f00\uff0c\u5373 f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(x_0)} {n!}(x-x_0)^n f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(x_0)} {n!}(x-x_0)^n \u53d6\u5176\u5e38\u6570\u9879\u548c\u7ebf\u6027\u9879\u7684\u7cfb\u6570\uff0c\u4ee4\u5176\u503c\u4e3a 0 0 \uff0c\u5373 f(x_0)+f^\\prime(x_0)\\cdot(x-x_0)=0 f(x_0)+f^\\prime(x_0)\\cdot(x-x_0)=0 \u89e3\u5f97\u8fd9\u4e2a\u8fd1\u4f3c\u65b9\u7a0b\u7684\u6839 x_1 x_1 \uff0c\u5e76\u5728 x_1 x_1 \u5904\u5c06 f(x) f(x) \u6cf0\u52d2\u5c55\u5f00\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u5f97\u5230 x_2,x_3,x_4,... x_2,x_3,x_4,... \u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u4e00\u4e2a\u65b0\u89e3\u90fd\u66f4\u52a0\u63a5\u8fd1 f(x)=0 f(x)=0 \u7684\u6839 double f ( double x ); double fd ( double x ); //fd \u662f f \u7684\u5bfc\u6570\uff0c\u5373 f' double newtonMethod ( double x0 , int d ){ //d \u4ee3\u8868\u8fed\u4ee3\u6b21\u6570 //f(x_0)+fd(x0)*(x-x0)=0 -> x=-f(x0)/fd(x0)+x0 while ( d -- ) x0 = - f ( x0 ) / fd ( x0 ) + x0 ; return x0 ; } \u8fd9\u6837\u770b\u6765\uff0c\u6211\u4eec\u53ea\u80fd\u65e0\u9650\u903c\u8fd1 f(x)=0 f(x)=0 \u7684\u6839\uff0c\u800c\u65e0\u6cd5\u7edd\u5bf9\u51c6\u786e\u5730\u53d6\u5230\u6839\u3002\u6211\u4eec\u6c42\u591a\u9879\u5f0f\uff0c\u662f\u5426\u4e5f\u65e0\u6cd5\u5f97\u5230\u7cbe\u786e\u7684\u89e3\u5462\uff1f\u62c5\u5fc3\u662f\u591a\u4f59\u7684\uff0c\u6211\u4eec\u672c\u6765\u5c31\u4e0d\u9700\u8981\u6c42\u201c\u7edd\u5bf9\u7cbe\u786e\u201d\u7684\u89e3\uff0c\u53ea\u9700\u8981\u6c42\u6a21\u610f\u4e49\u4e0b\u7684\u201c\u7cbe\u786e\u201d\u7684\u89e3\u3002 Newton's Method \u5728\u591a\u9879\u5f0f\u4e2d\u7684 Methodology \u00b6 \u6c42\u4e00\u4e2a\u5173\u4e8e x x \u7684\u591a\u9879\u5f0f f(x) f(x) \uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4e00\u7ed9\u5b9a\u7684\u5173\u4e8e f(x) f(x) \u7684\u51fd\u6570 g(f(x)) g(f(x)) \uff0c g(f(x))\\equiv 0\\pmod {x^n} g(f(x))\\equiv 0\\pmod {x^n} \u6210\u7acb\u3002 \u8fd9\u662f Newton's Method \u6c42\u89e3\u7684\u95ee\u9898\u7684\u901a\u5f0f\u3002\u5bf9\u4e8e\u591a\u9879\u5f0f h(x) h(x) \uff0c\u6c42\u9006\u65f6 g(f(x))=h(x)-f^{-1}(x) g(f(x))=h(x)-f^{-1}(x) \uff0c\u5f00\u6839\u65f6 g(f(x))=h(x)-f^{2}(x) g(f(x))=h(x)-f^{2}(x) \uff0c\u6c42\u6307\u6570\u65f6 g(f(x))=h(x)-\\ln f(x) g(f(x))=h(x)-\\ln f(x) \u3002\u4e0b\u9762\u5c31\u8bb2\u8ff0 Newton's Method \u662f\u5982\u4f55\u903c\u8fd1\u6839\u7684\uff1a \u9009\u62e9\u4e00\u4e2a\u6ee1\u8db3 g(f(x))\\equiv0\\pmod{x^1} g(f(x))\\equiv0\\pmod{x^1} \u7684\u591a\u9879\u5f0f\u4f5c\u4e3a\u521d\u59cb\u6839\u3002 \u8bbe\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4e86\u6a21 x^{\\lceil\\frac{n}{2}\\rceil} x^{\\lceil\\frac{n}{2}\\rceil} \u4e0b\u7684\u6839 f_0(x) f_0(x) \uff0c\u5c06 g(f(x)) g(f(x)) \u5728 f_0(x) f_0(x) \u5904\u6cf0\u52d2\u5c55\u5f00\uff1a g(f(x))\\equiv\\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f(x)-f_0(x))^i\\equiv 0\\pmod{x^n} g(f(x))\\equiv\\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f(x)-f_0(x))^i\\equiv 0\\pmod{x^n} \u5c06 f(x)=f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x) f(x)=f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x) \u4ee3\u5165 \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x)-f_0(x))^i\\equiv 0\\pmod{x^{n}} \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x)-f_0(x))^i\\equiv 0\\pmod{x^{n}} \u5373 \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}\\cdot x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^{n}} \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}\\cdot x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^{n}} \u5176\u4e2d\uff0c\u5bf9\u4e8e x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x) x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x) \u8fd9\u4e00\u90e8\u5206\uff0c\u663e\u7136\u5f53 i\\ge 2 i\\ge 2 \u65f6\u6709 x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^n} x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^n} \u3002\u5219\u5728\u6b64\u5904\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u6cf0\u52d2\u7ea7\u6570\uff0c\u4ece\u7b2c\u4e09\u9879\u5f00\u59cb\u5168\u90e8\u4e3a 0 0 \uff0c\u4e8e\u662f\u53ea\u9700\u4fdd\u7559\u524d\u4e24\u9879\uff1a g(f_0(x))+g^\\prime(f_0(x))\\cdot (x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x))\\equiv 0\\pmod{x^n} g(f_0(x))+g^\\prime(f_0(x))\\cdot (x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x))\\equiv 0\\pmod{x^n} \u89e3\u5f97 h(x)\\equiv -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} h(x)\\equiv -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} \u5728 h(x) h(x) \u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u56de\u4ee3\u5f97 f(x)\\equiv f_0(x)-\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} f(x)\\equiv f_0(x)-\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} \uff0c\u5b8c\u6210\u4e86\u4e00\u6b21\u8fed\u4ee3\u3002\u5982\u679c\u8fed\u4ee3 a a \u6b21\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u5728\u6a21 x^{2^a} x^{2^a} \u610f\u4e49\u4e0b\u7684\u89e3\u4e86\u3002 \u6709\u4e00\u4e2a\u95ee\u9898\u5c1a\u672a\u89e3\u51b3\uff1a h(x) h(x) \u662f\u5426\u603b\u662f\u5b58\u5728\uff1f\u6211\u4eec\u53d1\u73b0\uff0c -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u53ea\u5305\u542b x x \u7684\u81ea\u7136\u6570\u5e42\u6b21\u9879\uff0c\u800c g(f_0(x))\\equiv 0\\pmod{x^{\\lceil\\frac{n}{2}\\rceil}} g(f_0(x))\\equiv 0\\pmod{x^{\\lceil\\frac{n}{2}\\rceil}} \uff0c\u4e8e\u662f\u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684 \\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \u603b\u662f\u5b58\u5728\uff0c\u4e14\u5176\u524d \\lceil\\frac{n}{2}\\rceil \\lceil\\frac{n}{2}\\rceil \u603b\u662f\u4e3a\u96f6\u3002\u4e8e\u662f -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \u603b\u662f\u4e00\u4e2a\u53ea\u5305\u542b x x \u7684\u81ea\u7136\u6570\u5e42\u7684\u5f0f\u5b50\uff0c h(x) h(x) \u603b\u662f\u5b58\u5728\u3002 \u7531\u4e0a\u8ff0\u8fc7\u7a0b\u53ef\u77e5\uff0cNewton's Method \u53ef\u5e94\u7528\u4e8e\u89e3 g(f(x))=0 g(f(x))=0 \u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u6839\uff0c\u5f53\u4e14\u4ec5\u5f53 g(f(x)) g(f(x)) \u65e0\u9650\u53ef\u5fae\u3002 g(f(x))\\equiv0\\pmod{x^n} g(f(x))\\equiv0\\pmod{x^n} \u7684\u6839\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u540c\u4f59\u65b9\u7a0b\u5728\u6a21 x^1 x^1 \u610f\u4e49\u4e0b\u7684\u6839 f_0 f_0 \u5b58\u5728\uff0c\u5e76\u4e14\u6bcf\u4e2a f_0 f_0 \u90fd\u5bf9\u5e94\u7740\u552f\u4e00\u7684\u4e00\u4e2a\u6a21 x^n x^n \u7684\u6839\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5bf9\u4e8e\u7b2c a a \u6b21\u548c\u7b2c a+1 a+1 \u6b21\u8fed\u4ee3\u7684\u6839 f_{a}(x),f_{a+1}(x) f_{a}(x),f_{a+1}(x) \uff0c\u6709 f_a(x)\\equiv f_{a+1}(x)\\pmod{x^{2^a}} f_a(x)\\equiv f_{a+1}(x)\\pmod{x^{2^a}} \u3002 \u4e0b\u9762\u5c06\u5c31\u51e0\u4e2a\u5177\u4f53\u7684 g(f(x)) g(f(x)) \u8bb2\u89e3 Newton's Method \u7684\u5e94\u7528\u3002 Newton's Method \u6c42\u591a\u9879\u5f0f\u7684\u9006 \u00b6 \u5bf9\u4e8e\u539f\u591a\u9879\u5f0f h(x) h(x) \uff0c\u5b83\u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u9006 f(x) f(x) \u6ee1\u8db3 h(x)\\cdot g(x)\\equiv0\\pmod{x^n} h(x)\\cdot g(x)\\equiv0\\pmod{x^n} \u3002\u5219 g(f(x)) g(f(x)) \u53ef\u4ee5\u5199\u4f5c g(f(x))=h(x)-\\dfrac{1}{f(x)} g(f(x))=h(x)-\\dfrac{1}{f(x)} \u3002\u4ee3\u5165 Newton's Method \u5f97 f(x)\\equiv f_0(x)-\\dfrac{h(x)-\\dfrac{1}{f_0(x)}}{f_0^{-2}(x)}\\pmod{x^n} f(x)\\equiv f_0(x)-\\dfrac{h(x)-\\dfrac{1}{f_0(x)}}{f_0^{-2}(x)}\\pmod{x^n} \u6ce8\u610f\u8fd9\u91cc g(f(x)) g(f(x)) \u4e0d\u662f\u5173\u4e8e x x \u7684\u590d\u5408\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u5173\u4e8e f(x) f(x) \u7684\u51fd\u6570\u3002\u5b83\u7684\u5bfc\u6570\u8981\u89c6\u4f5c \\dfrac{\\mathrm{d}g(f(x))}{\\mathrm{d}f(x)} \\dfrac{\\mathrm{d}g(f(x))}{\\mathrm{d}f(x)} \u3002 \u5373 f(x)\\equiv f_0(x)\\cdot\\left(2-f_0(x)\\cdot h(x)\\right)\\pmod{x^n} f(x)\\equiv f_0(x)\\cdot\\left(2-f_0(x)\\cdot h(x)\\right)\\pmod{x^n} \u8fd0\u7528 FNTT\uff0c\u5355\u6b21\u8fed\u4ee3\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002\u8fd0\u7528\u4e3b\u5b9a\u7406\u53ef\u5f97\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a T(n)=T\\left(\\dfrac{n}{2}\\right)+O(n\\log n)=O(n\\log n) T(n)=T\\left(\\dfrac{n}{2}\\right)+O(n\\log n)=O(n\\log n) \u3002\u6211\u4eec\u4e00\u822c\u7528\u500d\u589e\u6cd5\u5b9e\u73b0\u4ee3\u7801\u3002 void polyinv ( int * f , const int * h , int n ){ int N = 1 ; while ( N < n + n - 1 ) N <<= 1 ; static int d [ maxn ], g [ maxn ]; memcpy ( d , h , n * sizeof ( int )), memset ( d + n , 0 , ( N - n ) * sizeof ( int )); memset ( f , 0 , N * sizeof ( int )), memset ( g , 0 , N * sizeof ( int )), f [ 0 ] = qpow ( h [ 0 ], mod - 2 ); for ( int w = 2 ; w / 2 < n ; w <<= 1 ){ memcpy ( g , d , w * sizeof ( int )); for ( int i = 0 ; i < w * 2 ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? w : 0 ); dft ( f , w << 1 , 1 ), dft ( g , w << 1 , 1 ); for ( int i = 0 ; i < w * 2 ; ++ i ) f [ i ] = ( ll ) f [ i ] * ( 2 - ( ll ) f [ i ] * g [ i ] % mod ) % mod ; dft ( f , w << 1 , -1 ); for ( int i = 0 , inv = qpow ( w << 1 , mod - 2 ); i < w ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; memset ( f + w , 0 , w * sizeof ( int )); } memset ( f + n , 0 , ( N - n ) * sizeof ( int )); } Newton's Method \u6c42\u591a\u9879\u5f0f\u5e73\u65b9\u6839 \u00b6 \u5bf9\u4e8e\u591a\u9879\u5f0f h(x) h(x) \uff0c\u5b83\u7684\u5e73\u65b9\u6839 f(x) f(x) \u6ee1\u8db3 f^2(x)\\equiv h(x)\\pmod{x^n} f^2(x)\\equiv h(x)\\pmod{x^n} \uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa g(f(x))\\equiv h(x)-f^2(x)\\pmod{x^n} g(f(x))\\equiv h(x)-f^2(x)\\pmod{x^n} \u3002\u4ee3\u5165 Newton's Method \u5f97 \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-f_0^2(x)}{-2f_0(x)}\\\\ &\\equiv f_0(x)+\\dfrac{1}{2}\\left(h(x)\\cdot f_0^{-1}(x)-f_0(x)\\right)\\\\ &\\equiv \\dfrac{1}{2}\\left(f_0(x)+f_0^{-1}(x)\\cdot h(x)\\right) \\end{aligned}\\pmod{x^n} \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-f_0^2(x)}{-2f_0(x)}\\\\ &\\equiv f_0(x)+\\dfrac{1}{2}\\left(h(x)\\cdot f_0^{-1}(x)-f_0(x)\\right)\\\\ &\\equiv \\dfrac{1}{2}\\left(f_0(x)+f_0^{-1}(x)\\cdot h(x)\\right) \\end{aligned}\\pmod{x^n} \u5355\u6b21\u8fed\u4ee3\u4ecd\u4e3a O(n\\log n) O(n\\log n) \uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e5f\u4e3a O(n\\log n) O(n\\log n) \u3002 void polysqrt ( int * f , const int * h , int n ){ int N = 1 ; while ( N < n + n - 1 ) N <<= 1 ; static int d [ maxn ], g [ maxn ], f_inv [ maxn ]; memcpy ( d , h , n * sizeof ( int )), memset ( d + n , 0 , ( N - n ) * sizeof ( int )); memset ( f , 0 , N * sizeof ( int )), memset ( g , 0 , N * sizeof ( int )), f [ 0 ] = 1 ; for ( int w = 2 ; w / 2 < n ; w <<= 1 ){ memcpy ( g , d , w * sizeof ( int )), polyinv ( f_inv , f , w ); for ( int i = 0 ; i < w * 2 ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? w : 0 ); dft ( g , w << 1 , 1 ), dft ( f , w << 1 , 1 ), dft ( f_inv , w << 1 , 1 ); for ( int i = 0 ; i < w * 2 ; ++ i ) f [ i ] = ( f [ i ] + ( ll ) f_inv [ i ] * g [ i ] % mod ) % mod ; dft ( f , w << 1 , -1 ); for ( int i = 0 , inv = qpow ( w << 2 , mod - 2 ); i < w ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; memset ( f + w , 0 , w * sizeof ( int )); } memset ( f + n , 0 , ( N - n ) * sizeof ( int )); } Newton's Method \u6c42\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570 \u00b6 \u591a\u9879\u5f0f\u7684\u5bf9\u6570\u51fd\u6570\u548c\u6307\u6570\u51fd\u6570\u90fd\u662f\u7528\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u5b9a\u4e49\u7684\u3002\u8981\u7528 Newton's Method \u6c42\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\uff0c\u5f97\u5148\u4f1a\u6c42 \u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570 \u3002 \u5bf9\u4e8e\u591a\u9879\u5f0f h(x) h(x) \uff0c\u5b83\u7684\u6307\u6570\u51fd\u6570 f(x)\\equiv\\exp h(x)\\pmod{x^n} f(x)\\equiv\\exp h(x)\\pmod{x^n} \u6ee1\u8db3 h(x)\\equiv\\ln f(x)\\pmod{x^n} h(x)\\equiv\\ln f(x)\\pmod{x^n} \uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa g(f(x))=h(x)-\\ln f(x) g(f(x))=h(x)-\\ln f(x) \u3002\u4ee3\u5165 Newton's Method \u5f97 \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-\\ln f_0(x)}{-\\dfrac{1}{f_0(x)}}\\\\ &\\equiv f_0(x)+f_0(x)\\cdot\\left(h(x)-\\ln f_0(x)\\right)\\\\ &\\equiv f_0(x)\\cdot(1+h(x)-\\ln f_0(x)) \\end{aligned}\\pmod{x^n} \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-\\ln f_0(x)}{-\\dfrac{1}{f_0(x)}}\\\\ &\\equiv f_0(x)+f_0(x)\\cdot\\left(h(x)-\\ln f_0(x)\\right)\\\\ &\\equiv f_0(x)\\cdot(1+h(x)-\\ln f_0(x)) \\end{aligned}\\pmod{x^n} \u5355\u6b21\u8fed\u4ee3\u4ecd\u4e3a O(n\\log n) O(n\\log n) \uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e5f\u4e3a O(n\\log n) O(n\\log n) \u3002 void polyexp ( int * f , const int * h , int n ){ int N = 1 ; while ( N < n + n - 1 ) N <<= 1 ; static int d [ maxn ], g [ maxn ], lg [ maxn ]; memset ( lg , 0 , N * sizeof ( int )); memcpy ( d , h , n * sizeof ( int )), memset ( d + n , 0 , ( N - n ) * sizeof ( int )); memset ( g , 0 , N * sizeof ( int )), memset ( f , 0 , N * sizeof ( int )), f [ 0 ] = 1 ; for ( int w = 2 ; w / 2 < n ; w <<= 1 ){ memcpy ( g , d , w * sizeof ( int )), polylog ( lg , f , w ); for ( int i = 0 ; i < w * 2 ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? w : 0 ); dft ( g , w << 1 , 1 ), dft ( f , w << 1 , 1 ), dft ( lg , w << 1 , 1 ); for ( int i = 0 ; i < w * 2 ; ++ i ) f [ i ] = ( ll ) f [ i ] * ( 1 + g [ i ] - lg [ i ]) % mod ; dft ( f , w << 1 , -1 ); for ( int i = 0 , inv = qpow ( w << 1 , mod - 2 ); i < w ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; memset ( f + w , 0 , w * sizeof ( int )); } memset ( f + n , 0 , ( N - n ) * sizeof ( int )); } \u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\uff0c\u8981\u5199\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\u5c31\u5fc5\u987b\u5148\u5199\u4e00\u4e2a\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\uff1b\u8981\u5199\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u5c31\u5fc5\u987b\u5148\u5199\u4e00\u4e2a\u591a\u9879\u5f0f\u6c42\u9006......\u8fd9\u4e9b\u4e1c\u897f\u52a0\u8d77\u6765\u6709\u4e03\u516b\u5341\u884c\uff0c\u8bf4\u5b9e\u8bdd\u8fd8\u662f\u4e0d\u592a\u597d\u5199\u7684\u3002","title":"\u591a\u9879\u5f0f\u4e2d\u7684 Newton's Method"},{"location":"polynomial/newtons_method/#newtons-method","text":"Newton's Method \u662f\u725b\u987f\u63d0\u51fa\u7684\u4e00\u79cd\u5c06\u975e\u7ebf\u6027\u65b9\u7a0b\u7ebf\u6027\u5316\u7684\u8fd1\u4f3c\u65b9\u6cd5\u3002\u5b83\u4e5f\u53ef\u4ee5\u8fd0\u7528\u5728\u591a\u9879\u5f0f\u4e2d\uff0c\u6c42\u5173\u4e8e\u591a\u9879\u5f0f\u7684\u975e\u7ebf\u6027\u65b9\u7a0b\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u89e3\u3002 \u8981\u5b66\u4e60 Newton's Method\uff0c\u5f97\u5148\u4e86\u89e3\u6cf0\u52d2\u7ea7\u6570\u3002","title":"\u591a\u9879\u5f0f\u4e2d\u7684 Newton's Method"},{"location":"polynomial/newtons_method/#_1","text":"\u6cf0\u52d2\u7ea7\u6570\u7528\u65e0\u9650\u9879\u8fde\u52a0\u5f0f\u6765\u8868\u793a\u51fd\u6570\u3002\u4e00\u822c\u5730\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5149\u6ed1\u51fd\u6570 f(x) f(x) \uff0c\u6709 f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(a)} {i!}(x-a)^n f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(a)} {i!}(x-a)^n \u8fd9\u4e2a\u7b49\u5f0f\u88ab\u79f0\u4e3a f(x) f(x) \u5728 a a \u5904\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\uff1b\u7b49\u53f7\u53f3\u8fb9\u7684\u5f0f\u5b50\u88ab\u79f0\u4e3a f(x) f(x) \u5728 a a \u5904\u7684\u6cf0\u52d2\u7ea7\u6570\u3002\u5728 0 0 \u5904\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u548c\u6cf0\u52d2\u7ea7\u6570\u4e5f\u88ab\u79f0\u4e3a\u9ea6\u514b\u52b3\u6797\u5c55\u5f00\u5f0f\u548c\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\uff0c\u6709\u7684\u5728\u751f\u6210\u51fd\u6570\u4e2d\u5e38\u7528\uff1a (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n\\\\ (1-x)^{-m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{n+m-1}{n}x^n\\\\ (1+x)^{m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{m}{n}x^n\\\\ \\ln(1-x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{x^n}{n}\\\\ \\ln(1+x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{(-1)^{n}x^n}{n}\\\\ \\exp x=-\\sum\\limits_{n=0}^{+\\infty}\\dfrac{x^n}{n!} (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n\\\\ (1-x)^{-m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{n+m-1}{n}x^n\\\\ (1+x)^{m}=\\sum\\limits_{n=0}^{+\\infty}\\binom{m}{n}x^n\\\\ \\ln(1-x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{x^n}{n}\\\\ \\ln(1+x)=-\\sum\\limits_{n=1}^{+\\infty}\\dfrac{(-1)^{n}x^n}{n}\\\\ \\exp x=-\\sum\\limits_{n=0}^{+\\infty}\\dfrac{x^n}{n!} \u6cf0\u52d2\u5c55\u5f00\u5f0f\u5e76\u975e\u603b\u662f\u6210\u7acb \u6cf0\u52d2\u5c55\u5f00\u5f0f\u5e76\u975e\u5bf9\u4e8e f(x) f(x) \u5b9a\u4e49\u57df\u5185\u6240\u6709 x x \u90fd\u6210\u7acb\u3002\u6bd4\u5982\uff0c\u5c06 x=10 x=10 \u4ee3\u5165 (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n \uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u6839\u672c\u4e0d\u6210\u7acb\u3002\u4e8b\u5b9e\u4e0a\uff0c (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n (1-x)^{-1}=\\sum\\limits_{n=0}^{+\\infty}x^n \u8fd9\u4e2a\u5f0f\u5b50\u53ea\u5bf9 |x|<1 |x|<1 \u6210\u7acb\u3002 \u5176\u4ed6\u51fd\u6570\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u6709\u7684\u4e5f\u6709\u7c7b\u4f3c\u7684\u9650\u5236\u3002\u4f46\u5728 OI \u4e2d\u6211\u4eec\u53ea\u5173\u5fc3\u5c55\u5f00\u5f0f\u7684\u7cfb\u6570\uff0c\u4e0d\u5173\u5fc3 x x \u7684\u503c\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e9b\u6cf0\u52d2\u5c55\u5f00\u5f0f\u5728\u6211\u4eec\u7814\u7a76\u7684\u8303\u56f4\u5185\u603b\u662f\u6210\u7acb\u7684\u3002 \u4e86\u89e3\u4e86\u6cf0\u52d2\u7ea7\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5b66\u4e60 Newton's Method \u4e86\uff1a","title":"\u6cf0\u52d2\u7ea7\u6570\u548c\u9ea6\u514b\u52b3\u6797\u7ea7\u6570"},{"location":"polynomial/newtons_method/#newtons-method_1","text":"Newton's Method \u4e00\u822c\u88ab\u7528\u4e8e\u6c42\u89e3\u975e\u7ebf\u6027\u65b9\u7a0b\u3002\u5b83\u662f\u8fd9\u6837\u6c42 f(x)=0 f(x)=0 \u7684\u6839\u7684\uff1a \u9009\u53d6\u5408\u9002\u4e00\u4e2a\u6570\u4f5c\u4e3a x_0 x_0 \u5c06 f(x) f(x) \u5728 x_0 x_0 \u5904\u5c55\u5f00\uff0c\u5373 f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(x_0)} {n!}(x-x_0)^n f(x)=\\sum\\limits_{n=0}^{+\\infty}\\dfrac{f ^ {(n)}(x_0)} {n!}(x-x_0)^n \u53d6\u5176\u5e38\u6570\u9879\u548c\u7ebf\u6027\u9879\u7684\u7cfb\u6570\uff0c\u4ee4\u5176\u503c\u4e3a 0 0 \uff0c\u5373 f(x_0)+f^\\prime(x_0)\\cdot(x-x_0)=0 f(x_0)+f^\\prime(x_0)\\cdot(x-x_0)=0 \u89e3\u5f97\u8fd9\u4e2a\u8fd1\u4f3c\u65b9\u7a0b\u7684\u6839 x_1 x_1 \uff0c\u5e76\u5728 x_1 x_1 \u5904\u5c06 f(x) f(x) \u6cf0\u52d2\u5c55\u5f00\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u5f97\u5230 x_2,x_3,x_4,... x_2,x_3,x_4,... \u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u4e00\u4e2a\u65b0\u89e3\u90fd\u66f4\u52a0\u63a5\u8fd1 f(x)=0 f(x)=0 \u7684\u6839 double f ( double x ); double fd ( double x ); //fd \u662f f \u7684\u5bfc\u6570\uff0c\u5373 f' double newtonMethod ( double x0 , int d ){ //d \u4ee3\u8868\u8fed\u4ee3\u6b21\u6570 //f(x_0)+fd(x0)*(x-x0)=0 -> x=-f(x0)/fd(x0)+x0 while ( d -- ) x0 = - f ( x0 ) / fd ( x0 ) + x0 ; return x0 ; } \u8fd9\u6837\u770b\u6765\uff0c\u6211\u4eec\u53ea\u80fd\u65e0\u9650\u903c\u8fd1 f(x)=0 f(x)=0 \u7684\u6839\uff0c\u800c\u65e0\u6cd5\u7edd\u5bf9\u51c6\u786e\u5730\u53d6\u5230\u6839\u3002\u6211\u4eec\u6c42\u591a\u9879\u5f0f\uff0c\u662f\u5426\u4e5f\u65e0\u6cd5\u5f97\u5230\u7cbe\u786e\u7684\u89e3\u5462\uff1f\u62c5\u5fc3\u662f\u591a\u4f59\u7684\uff0c\u6211\u4eec\u672c\u6765\u5c31\u4e0d\u9700\u8981\u6c42\u201c\u7edd\u5bf9\u7cbe\u786e\u201d\u7684\u89e3\uff0c\u53ea\u9700\u8981\u6c42\u6a21\u610f\u4e49\u4e0b\u7684\u201c\u7cbe\u786e\u201d\u7684\u89e3\u3002","title":"\u4e00\u822c\u7684 Newton's Method"},{"location":"polynomial/newtons_method/#newtons-method-methodology","text":"\u6c42\u4e00\u4e2a\u5173\u4e8e x x \u7684\u591a\u9879\u5f0f f(x) f(x) \uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4e00\u7ed9\u5b9a\u7684\u5173\u4e8e f(x) f(x) \u7684\u51fd\u6570 g(f(x)) g(f(x)) \uff0c g(f(x))\\equiv 0\\pmod {x^n} g(f(x))\\equiv 0\\pmod {x^n} \u6210\u7acb\u3002 \u8fd9\u662f Newton's Method \u6c42\u89e3\u7684\u95ee\u9898\u7684\u901a\u5f0f\u3002\u5bf9\u4e8e\u591a\u9879\u5f0f h(x) h(x) \uff0c\u6c42\u9006\u65f6 g(f(x))=h(x)-f^{-1}(x) g(f(x))=h(x)-f^{-1}(x) \uff0c\u5f00\u6839\u65f6 g(f(x))=h(x)-f^{2}(x) g(f(x))=h(x)-f^{2}(x) \uff0c\u6c42\u6307\u6570\u65f6 g(f(x))=h(x)-\\ln f(x) g(f(x))=h(x)-\\ln f(x) \u3002\u4e0b\u9762\u5c31\u8bb2\u8ff0 Newton's Method \u662f\u5982\u4f55\u903c\u8fd1\u6839\u7684\uff1a \u9009\u62e9\u4e00\u4e2a\u6ee1\u8db3 g(f(x))\\equiv0\\pmod{x^1} g(f(x))\\equiv0\\pmod{x^1} \u7684\u591a\u9879\u5f0f\u4f5c\u4e3a\u521d\u59cb\u6839\u3002 \u8bbe\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4e86\u6a21 x^{\\lceil\\frac{n}{2}\\rceil} x^{\\lceil\\frac{n}{2}\\rceil} \u4e0b\u7684\u6839 f_0(x) f_0(x) \uff0c\u5c06 g(f(x)) g(f(x)) \u5728 f_0(x) f_0(x) \u5904\u6cf0\u52d2\u5c55\u5f00\uff1a g(f(x))\\equiv\\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f(x)-f_0(x))^i\\equiv 0\\pmod{x^n} g(f(x))\\equiv\\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f(x)-f_0(x))^i\\equiv 0\\pmod{x^n} \u5c06 f(x)=f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x) f(x)=f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x) \u4ee3\u5165 \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x)-f_0(x))^i\\equiv 0\\pmod{x^{n}} \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}(f_0(x)+x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x)-f_0(x))^i\\equiv 0\\pmod{x^{n}} \u5373 \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}\\cdot x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^{n}} \\sum\\limits_{i=0}^{+\\infty}\\dfrac{g ^ {(i)}(f_0(x))} {i!}\\cdot x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^{n}} \u5176\u4e2d\uff0c\u5bf9\u4e8e x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x) x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x) \u8fd9\u4e00\u90e8\u5206\uff0c\u663e\u7136\u5f53 i\\ge 2 i\\ge 2 \u65f6\u6709 x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^n} x^{i\\cdot\\lceil\\frac{n}{2}\\rceil}\\cdot h^i(x)\\equiv 0\\pmod{x^n} \u3002\u5219\u5728\u6b64\u5904\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u6cf0\u52d2\u7ea7\u6570\uff0c\u4ece\u7b2c\u4e09\u9879\u5f00\u59cb\u5168\u90e8\u4e3a 0 0 \uff0c\u4e8e\u662f\u53ea\u9700\u4fdd\u7559\u524d\u4e24\u9879\uff1a g(f_0(x))+g^\\prime(f_0(x))\\cdot (x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x))\\equiv 0\\pmod{x^n} g(f_0(x))+g^\\prime(f_0(x))\\cdot (x^{\\lceil\\frac{n}{2}\\rceil}\\cdot h(x))\\equiv 0\\pmod{x^n} \u89e3\u5f97 h(x)\\equiv -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} h(x)\\equiv -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} \u5728 h(x) h(x) \u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u56de\u4ee3\u5f97 f(x)\\equiv f_0(x)-\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} f(x)\\equiv f_0(x)-\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))}\\pmod{x^n} \uff0c\u5b8c\u6210\u4e86\u4e00\u6b21\u8fed\u4ee3\u3002\u5982\u679c\u8fed\u4ee3 a a \u6b21\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u5728\u6a21 x^{2^a} x^{2^a} \u610f\u4e49\u4e0b\u7684\u89e3\u4e86\u3002 \u6709\u4e00\u4e2a\u95ee\u9898\u5c1a\u672a\u89e3\u51b3\uff1a h(x) h(x) \u662f\u5426\u603b\u662f\u5b58\u5728\uff1f\u6211\u4eec\u53d1\u73b0\uff0c -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u53ea\u5305\u542b x x \u7684\u81ea\u7136\u6570\u5e42\u6b21\u9879\uff0c\u800c g(f_0(x))\\equiv 0\\pmod{x^{\\lceil\\frac{n}{2}\\rceil}} g(f_0(x))\\equiv 0\\pmod{x^{\\lceil\\frac{n}{2}\\rceil}} \uff0c\u4e8e\u662f\u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684 \\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \u603b\u662f\u5b58\u5728\uff0c\u4e14\u5176\u524d \\lceil\\frac{n}{2}\\rceil \\lceil\\frac{n}{2}\\rceil \u603b\u662f\u4e3a\u96f6\u3002\u4e8e\u662f -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} -x^{-\\lceil\\frac{n}{2}\\rceil}\\dfrac{g(f_0(x))}{g^\\prime(f_0(x))} \u603b\u662f\u4e00\u4e2a\u53ea\u5305\u542b x x \u7684\u81ea\u7136\u6570\u5e42\u7684\u5f0f\u5b50\uff0c h(x) h(x) \u603b\u662f\u5b58\u5728\u3002 \u7531\u4e0a\u8ff0\u8fc7\u7a0b\u53ef\u77e5\uff0cNewton's Method \u53ef\u5e94\u7528\u4e8e\u89e3 g(f(x))=0 g(f(x))=0 \u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u6839\uff0c\u5f53\u4e14\u4ec5\u5f53 g(f(x)) g(f(x)) \u65e0\u9650\u53ef\u5fae\u3002 g(f(x))\\equiv0\\pmod{x^n} g(f(x))\\equiv0\\pmod{x^n} \u7684\u6839\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u540c\u4f59\u65b9\u7a0b\u5728\u6a21 x^1 x^1 \u610f\u4e49\u4e0b\u7684\u6839 f_0 f_0 \u5b58\u5728\uff0c\u5e76\u4e14\u6bcf\u4e2a f_0 f_0 \u90fd\u5bf9\u5e94\u7740\u552f\u4e00\u7684\u4e00\u4e2a\u6a21 x^n x^n \u7684\u6839\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5bf9\u4e8e\u7b2c a a \u6b21\u548c\u7b2c a+1 a+1 \u6b21\u8fed\u4ee3\u7684\u6839 f_{a}(x),f_{a+1}(x) f_{a}(x),f_{a+1}(x) \uff0c\u6709 f_a(x)\\equiv f_{a+1}(x)\\pmod{x^{2^a}} f_a(x)\\equiv f_{a+1}(x)\\pmod{x^{2^a}} \u3002 \u4e0b\u9762\u5c06\u5c31\u51e0\u4e2a\u5177\u4f53\u7684 g(f(x)) g(f(x)) \u8bb2\u89e3 Newton's Method \u7684\u5e94\u7528\u3002","title":"Newton's Method \u5728\u591a\u9879\u5f0f\u4e2d\u7684 Methodology"},{"location":"polynomial/newtons_method/#newtons-method_2","text":"\u5bf9\u4e8e\u539f\u591a\u9879\u5f0f h(x) h(x) \uff0c\u5b83\u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u9006 f(x) f(x) \u6ee1\u8db3 h(x)\\cdot g(x)\\equiv0\\pmod{x^n} h(x)\\cdot g(x)\\equiv0\\pmod{x^n} \u3002\u5219 g(f(x)) g(f(x)) \u53ef\u4ee5\u5199\u4f5c g(f(x))=h(x)-\\dfrac{1}{f(x)} g(f(x))=h(x)-\\dfrac{1}{f(x)} \u3002\u4ee3\u5165 Newton's Method \u5f97 f(x)\\equiv f_0(x)-\\dfrac{h(x)-\\dfrac{1}{f_0(x)}}{f_0^{-2}(x)}\\pmod{x^n} f(x)\\equiv f_0(x)-\\dfrac{h(x)-\\dfrac{1}{f_0(x)}}{f_0^{-2}(x)}\\pmod{x^n} \u6ce8\u610f\u8fd9\u91cc g(f(x)) g(f(x)) \u4e0d\u662f\u5173\u4e8e x x \u7684\u590d\u5408\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a\u5173\u4e8e f(x) f(x) \u7684\u51fd\u6570\u3002\u5b83\u7684\u5bfc\u6570\u8981\u89c6\u4f5c \\dfrac{\\mathrm{d}g(f(x))}{\\mathrm{d}f(x)} \\dfrac{\\mathrm{d}g(f(x))}{\\mathrm{d}f(x)} \u3002 \u5373 f(x)\\equiv f_0(x)\\cdot\\left(2-f_0(x)\\cdot h(x)\\right)\\pmod{x^n} f(x)\\equiv f_0(x)\\cdot\\left(2-f_0(x)\\cdot h(x)\\right)\\pmod{x^n} \u8fd0\u7528 FNTT\uff0c\u5355\u6b21\u8fed\u4ee3\u590d\u6742\u5ea6\u4e3a O(n\\log n) O(n\\log n) \u3002\u8fd0\u7528\u4e3b\u5b9a\u7406\u53ef\u5f97\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a T(n)=T\\left(\\dfrac{n}{2}\\right)+O(n\\log n)=O(n\\log n) T(n)=T\\left(\\dfrac{n}{2}\\right)+O(n\\log n)=O(n\\log n) \u3002\u6211\u4eec\u4e00\u822c\u7528\u500d\u589e\u6cd5\u5b9e\u73b0\u4ee3\u7801\u3002 void polyinv ( int * f , const int * h , int n ){ int N = 1 ; while ( N < n + n - 1 ) N <<= 1 ; static int d [ maxn ], g [ maxn ]; memcpy ( d , h , n * sizeof ( int )), memset ( d + n , 0 , ( N - n ) * sizeof ( int )); memset ( f , 0 , N * sizeof ( int )), memset ( g , 0 , N * sizeof ( int )), f [ 0 ] = qpow ( h [ 0 ], mod - 2 ); for ( int w = 2 ; w / 2 < n ; w <<= 1 ){ memcpy ( g , d , w * sizeof ( int )); for ( int i = 0 ; i < w * 2 ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? w : 0 ); dft ( f , w << 1 , 1 ), dft ( g , w << 1 , 1 ); for ( int i = 0 ; i < w * 2 ; ++ i ) f [ i ] = ( ll ) f [ i ] * ( 2 - ( ll ) f [ i ] * g [ i ] % mod ) % mod ; dft ( f , w << 1 , -1 ); for ( int i = 0 , inv = qpow ( w << 1 , mod - 2 ); i < w ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; memset ( f + w , 0 , w * sizeof ( int )); } memset ( f + n , 0 , ( N - n ) * sizeof ( int )); }","title":"Newton's Method \u6c42\u591a\u9879\u5f0f\u7684\u9006"},{"location":"polynomial/newtons_method/#newtons-method_3","text":"\u5bf9\u4e8e\u591a\u9879\u5f0f h(x) h(x) \uff0c\u5b83\u7684\u5e73\u65b9\u6839 f(x) f(x) \u6ee1\u8db3 f^2(x)\\equiv h(x)\\pmod{x^n} f^2(x)\\equiv h(x)\\pmod{x^n} \uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa g(f(x))\\equiv h(x)-f^2(x)\\pmod{x^n} g(f(x))\\equiv h(x)-f^2(x)\\pmod{x^n} \u3002\u4ee3\u5165 Newton's Method \u5f97 \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-f_0^2(x)}{-2f_0(x)}\\\\ &\\equiv f_0(x)+\\dfrac{1}{2}\\left(h(x)\\cdot f_0^{-1}(x)-f_0(x)\\right)\\\\ &\\equiv \\dfrac{1}{2}\\left(f_0(x)+f_0^{-1}(x)\\cdot h(x)\\right) \\end{aligned}\\pmod{x^n} \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-f_0^2(x)}{-2f_0(x)}\\\\ &\\equiv f_0(x)+\\dfrac{1}{2}\\left(h(x)\\cdot f_0^{-1}(x)-f_0(x)\\right)\\\\ &\\equiv \\dfrac{1}{2}\\left(f_0(x)+f_0^{-1}(x)\\cdot h(x)\\right) \\end{aligned}\\pmod{x^n} \u5355\u6b21\u8fed\u4ee3\u4ecd\u4e3a O(n\\log n) O(n\\log n) \uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e5f\u4e3a O(n\\log n) O(n\\log n) \u3002 void polysqrt ( int * f , const int * h , int n ){ int N = 1 ; while ( N < n + n - 1 ) N <<= 1 ; static int d [ maxn ], g [ maxn ], f_inv [ maxn ]; memcpy ( d , h , n * sizeof ( int )), memset ( d + n , 0 , ( N - n ) * sizeof ( int )); memset ( f , 0 , N * sizeof ( int )), memset ( g , 0 , N * sizeof ( int )), f [ 0 ] = 1 ; for ( int w = 2 ; w / 2 < n ; w <<= 1 ){ memcpy ( g , d , w * sizeof ( int )), polyinv ( f_inv , f , w ); for ( int i = 0 ; i < w * 2 ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? w : 0 ); dft ( g , w << 1 , 1 ), dft ( f , w << 1 , 1 ), dft ( f_inv , w << 1 , 1 ); for ( int i = 0 ; i < w * 2 ; ++ i ) f [ i ] = ( f [ i ] + ( ll ) f_inv [ i ] * g [ i ] % mod ) % mod ; dft ( f , w << 1 , -1 ); for ( int i = 0 , inv = qpow ( w << 2 , mod - 2 ); i < w ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; memset ( f + w , 0 , w * sizeof ( int )); } memset ( f + n , 0 , ( N - n ) * sizeof ( int )); }","title":"Newton's Method \u6c42\u591a\u9879\u5f0f\u5e73\u65b9\u6839"},{"location":"polynomial/newtons_method/#newtons-method_4","text":"\u591a\u9879\u5f0f\u7684\u5bf9\u6570\u51fd\u6570\u548c\u6307\u6570\u51fd\u6570\u90fd\u662f\u7528\u9ea6\u514b\u52b3\u6797\u7ea7\u6570\u5b9a\u4e49\u7684\u3002\u8981\u7528 Newton's Method \u6c42\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\uff0c\u5f97\u5148\u4f1a\u6c42 \u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570 \u3002 \u5bf9\u4e8e\u591a\u9879\u5f0f h(x) h(x) \uff0c\u5b83\u7684\u6307\u6570\u51fd\u6570 f(x)\\equiv\\exp h(x)\\pmod{x^n} f(x)\\equiv\\exp h(x)\\pmod{x^n} \u6ee1\u8db3 h(x)\\equiv\\ln f(x)\\pmod{x^n} h(x)\\equiv\\ln f(x)\\pmod{x^n} \uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa g(f(x))=h(x)-\\ln f(x) g(f(x))=h(x)-\\ln f(x) \u3002\u4ee3\u5165 Newton's Method \u5f97 \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-\\ln f_0(x)}{-\\dfrac{1}{f_0(x)}}\\\\ &\\equiv f_0(x)+f_0(x)\\cdot\\left(h(x)-\\ln f_0(x)\\right)\\\\ &\\equiv f_0(x)\\cdot(1+h(x)-\\ln f_0(x)) \\end{aligned}\\pmod{x^n} \\begin{aligned} f(x)&\\equiv f_0(x)-\\dfrac{h(x)-\\ln f_0(x)}{-\\dfrac{1}{f_0(x)}}\\\\ &\\equiv f_0(x)+f_0(x)\\cdot\\left(h(x)-\\ln f_0(x)\\right)\\\\ &\\equiv f_0(x)\\cdot(1+h(x)-\\ln f_0(x)) \\end{aligned}\\pmod{x^n} \u5355\u6b21\u8fed\u4ee3\u4ecd\u4e3a O(n\\log n) O(n\\log n) \uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e5f\u4e3a O(n\\log n) O(n\\log n) \u3002 void polyexp ( int * f , const int * h , int n ){ int N = 1 ; while ( N < n + n - 1 ) N <<= 1 ; static int d [ maxn ], g [ maxn ], lg [ maxn ]; memset ( lg , 0 , N * sizeof ( int )); memcpy ( d , h , n * sizeof ( int )), memset ( d + n , 0 , ( N - n ) * sizeof ( int )); memset ( g , 0 , N * sizeof ( int )), memset ( f , 0 , N * sizeof ( int )), f [ 0 ] = 1 ; for ( int w = 2 ; w / 2 < n ; w <<= 1 ){ memcpy ( g , d , w * sizeof ( int )), polylog ( lg , f , w ); for ( int i = 0 ; i < w * 2 ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? w : 0 ); dft ( g , w << 1 , 1 ), dft ( f , w << 1 , 1 ), dft ( lg , w << 1 , 1 ); for ( int i = 0 ; i < w * 2 ; ++ i ) f [ i ] = ( ll ) f [ i ] * ( 1 + g [ i ] - lg [ i ]) % mod ; dft ( f , w << 1 , -1 ); for ( int i = 0 , inv = qpow ( w << 1 , mod - 2 ); i < w ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; memset ( f + w , 0 , w * sizeof ( int )); } memset ( f + n , 0 , ( N - n ) * sizeof ( int )); } \u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\uff0c\u8981\u5199\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\u5c31\u5fc5\u987b\u5148\u5199\u4e00\u4e2a\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\uff1b\u8981\u5199\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u5c31\u5fc5\u987b\u5148\u5199\u4e00\u4e2a\u591a\u9879\u5f0f\u6c42\u9006......\u8fd9\u4e9b\u4e1c\u897f\u52a0\u8d77\u6765\u6709\u4e03\u516b\u5341\u884c\uff0c\u8bf4\u5b9e\u8bdd\u8fd8\u662f\u4e0d\u592a\u597d\u5199\u7684\u3002","title":"Newton's Method \u6c42\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570"},{"location":"polynomial/polyinv/","text":"\u591a\u9879\u5f0f\u7684\u9006 \u00b6 \u6570\u5b66\u4e2d\u5f88\u591a\u5143\u7d20\u5728\u4e00\u5b9a\u6761\u4ef6\u4e0b\u90fd\u5b58\u5728\u9006\u5143\u3002\u591a\u9879\u5f0f\u7684\u9006\u5143\u662f\u4ec0\u4e48\u5462\uff1f \u4ece\u4e58\u6cd5\u9006\u5143\u51fa\u53d1\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u662f\uff0c\u591a\u9879\u5f0f g(x) g(x) \u662f f(x) f(x) \u7684\u9006\u5143\u5f53\u4e14\u4ec5\u5f53 f(x)\\cdot g(x)=0 f(x)\\cdot g(x)=0 \u3002\u9057\u61be\u7684\u662f\uff0c\u53ea\u6709\u5f53 f(x) f(x) \u53ea\u6709\u5e38\u6570\u9879\u65f6\u624d\u5b58\u5728\u8fd9\u6837\u7684\u591a\u9879\u5f0f g(x) g(x) \uff0c\u5426\u5219 g(x) g(x) \u5fc5\u987b\u4e3a\u65e0\u7a77\u7684\u5e42\u7ea7\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u6a21\u7684\u610f\u4e49\u4e0b\u8003\u8651\u591a\u9879\u5f0f\u7684\u9006\uff0c\u5f97\u5230\u591a\u9879\u5f0f\u9006\u5143\u7684\u5b9a\u4e49\uff1a f(x) f(x) \u7684\u9006\u5143 g(x) g(x) \u662f\u4e00\u4e2a\u6ee1\u8db3 f(x)\\cdot g(x)\\equiv 1\\pmod{x^n} f(x)\\cdot g(x)\\equiv 1\\pmod{x^n} \u7684\u591a\u9879\u5f0f\u3002 \u5206\u522b\u7528 f_{0..n-1} f_{0..n-1} \u548c g_{0..n-1} g_{0..n-1} \u6765\u8868\u793a f(x) f(x) \u548c g(x) g(x) \u7684\u7cfb\u6570\uff0c\u628a h(x)=f(x)\\cdot g(x) h(x)=f(x)\\cdot g(x) \u5199\u4e0b\u6765\uff1a h(x)\\cdot g(x)\\equiv \\sum\\limits_{i=0}^{n-1}\\sum\\limits_{j=0}^{i}f_{j}g_{i-j}\\cdot x^{i} h(x)\\cdot g(x)\\equiv \\sum\\limits_{i=0}^{n-1}\\sum\\limits_{j=0}^{i}f_{j}g_{i-j}\\cdot x^{i} \u8981\u6ee1\u8db3\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c h(x)\\cdot g(x) h(x)\\cdot g(x) \u5c31\u53ea\u6709 x^0 x^0 \u9879\u4e3a 1 1 \uff0c\u5176\u4f59\u9879\u4e3a 0 0 \uff0c\u5373 f_0g_0=1 f_0g_0=1 \u548c \\forall i\\ge 1: \\sum\\limits_{j=0}^{i}f_{j}g_{i-j}=0 \\forall i\\ge 1: \\sum\\limits_{j=0}^{i}f_{j}g_{i-j}=0 \u8fd9\u4e24\u4e2a\u6761\u4ef6\u90fd\u6210\u7acb\uff0c g(x) g(x) \u624d\u662f f(x) f(x) \u7684\u9006\u5143\u3002\u7531\u7b2c\u4e00\u4e2a\u6761\u4ef6\u53ef\u77e5\uff0c\u82e5 f(x) f(x) \u7684\u5e38\u6570\u9879\u4e3a 0 0 \uff0c\u5219 g(x) g(x) \u4e00\u5b9a\u4e0d\u5b58\u5728\uff08 0 0 \u4e0d\u5b58\u5728\u9006\u5143\uff09\u3002\u82e5 f(x) f(x) \u7684\u5e38\u6570\u9879\u4e0d\u4e3a\u96f6\uff0c\u662f\u5426\u5c31\u4e00\u5b9a\u5b58\u5728 g(x) g(x) \u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5462\uff1f \u8003\u8651\u628a\u4e0a\u9762\u7684\u5f0f\u5b50\u89c6\u4f5c\u4e00\u4e2a n n \u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c f_{0..n-1} f_{0..n-1} \u662f\u5df2\u77e5\u7cfb\u6570\uff0c g_{0..n-1} g_{0..n-1} \u662f\u672a\u77e5\u6570\u3002\u6761\u4ef6\u7ed9\u51fa\u4e86 n n \u4e2a\u6b21\u6570\u4e0a\u5347\u7684\u7b49\u5f0f\uff0c\u65b9\u7a0b\u7ec4\u4e00\u5b9a\u6709\u89e3\uff0c\u800c\u4e14\u6709\u552f\u4e00\u89e3\u3002 \\begin{cases}f_0g_0&=1\\\\f_0g_1+f_1g_0&=0\\\\f_0g_2+f_1g_1+f_2g_0&=0\\\\f_0g_3+f_1g_2+f_2g_1+f_3g_0&=0\\\\ \\ldots\\\\ f_0g_{n-1}+f_1g_{n-2}+f_2g_{n-3}+\\ldots+f_{n-1}g_0&=0\\end{cases} \\begin{cases}f_0g_0&=1\\\\f_0g_1+f_1g_0&=0\\\\f_0g_2+f_1g_1+f_2g_0&=0\\\\f_0g_3+f_1g_2+f_2g_1+f_3g_0&=0\\\\ \\ldots\\\\ f_0g_{n-1}+f_1g_{n-2}+f_2g_{n-3}+\\ldots+f_{n-1}g_0&=0\\end{cases} \u4e5f\u5c31\u662f\u8bf4\uff0c f(x) f(x) \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u5b58\u5728\u9006\u5143\uff0c\u5f53\u4e14\u4ec5\u5f53 f(x) f(x) \u7684\u5e38\u6570\u9879\u975e\u96f6\uff1b\u82e5 f(x) f(x) \u5b58\u5728\u9006\u5143\uff0c\u5b83\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u9006\u5143 \u3002 \u6839\u636e\u4e0a\u8ff0\u65b9\u7a0b\u7ec4\u6c42\u9006\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \uff0c\u66f4\u5feb\u7684 O(n\\log n) O(n\\log n) \u7b97\u6cd5\u8bf7\u53c2\u8003 Newton's Method \u3002","title":"\u591a\u9879\u5f0f\u7684\u9006"},{"location":"polynomial/polyinv/#_1","text":"\u6570\u5b66\u4e2d\u5f88\u591a\u5143\u7d20\u5728\u4e00\u5b9a\u6761\u4ef6\u4e0b\u90fd\u5b58\u5728\u9006\u5143\u3002\u591a\u9879\u5f0f\u7684\u9006\u5143\u662f\u4ec0\u4e48\u5462\uff1f \u4ece\u4e58\u6cd5\u9006\u5143\u51fa\u53d1\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u662f\uff0c\u591a\u9879\u5f0f g(x) g(x) \u662f f(x) f(x) \u7684\u9006\u5143\u5f53\u4e14\u4ec5\u5f53 f(x)\\cdot g(x)=0 f(x)\\cdot g(x)=0 \u3002\u9057\u61be\u7684\u662f\uff0c\u53ea\u6709\u5f53 f(x) f(x) \u53ea\u6709\u5e38\u6570\u9879\u65f6\u624d\u5b58\u5728\u8fd9\u6837\u7684\u591a\u9879\u5f0f g(x) g(x) \uff0c\u5426\u5219 g(x) g(x) \u5fc5\u987b\u4e3a\u65e0\u7a77\u7684\u5e42\u7ea7\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u6a21\u7684\u610f\u4e49\u4e0b\u8003\u8651\u591a\u9879\u5f0f\u7684\u9006\uff0c\u5f97\u5230\u591a\u9879\u5f0f\u9006\u5143\u7684\u5b9a\u4e49\uff1a f(x) f(x) \u7684\u9006\u5143 g(x) g(x) \u662f\u4e00\u4e2a\u6ee1\u8db3 f(x)\\cdot g(x)\\equiv 1\\pmod{x^n} f(x)\\cdot g(x)\\equiv 1\\pmod{x^n} \u7684\u591a\u9879\u5f0f\u3002 \u5206\u522b\u7528 f_{0..n-1} f_{0..n-1} \u548c g_{0..n-1} g_{0..n-1} \u6765\u8868\u793a f(x) f(x) \u548c g(x) g(x) \u7684\u7cfb\u6570\uff0c\u628a h(x)=f(x)\\cdot g(x) h(x)=f(x)\\cdot g(x) \u5199\u4e0b\u6765\uff1a h(x)\\cdot g(x)\\equiv \\sum\\limits_{i=0}^{n-1}\\sum\\limits_{j=0}^{i}f_{j}g_{i-j}\\cdot x^{i} h(x)\\cdot g(x)\\equiv \\sum\\limits_{i=0}^{n-1}\\sum\\limits_{j=0}^{i}f_{j}g_{i-j}\\cdot x^{i} \u8981\u6ee1\u8db3\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c h(x)\\cdot g(x) h(x)\\cdot g(x) \u5c31\u53ea\u6709 x^0 x^0 \u9879\u4e3a 1 1 \uff0c\u5176\u4f59\u9879\u4e3a 0 0 \uff0c\u5373 f_0g_0=1 f_0g_0=1 \u548c \\forall i\\ge 1: \\sum\\limits_{j=0}^{i}f_{j}g_{i-j}=0 \\forall i\\ge 1: \\sum\\limits_{j=0}^{i}f_{j}g_{i-j}=0 \u8fd9\u4e24\u4e2a\u6761\u4ef6\u90fd\u6210\u7acb\uff0c g(x) g(x) \u624d\u662f f(x) f(x) \u7684\u9006\u5143\u3002\u7531\u7b2c\u4e00\u4e2a\u6761\u4ef6\u53ef\u77e5\uff0c\u82e5 f(x) f(x) \u7684\u5e38\u6570\u9879\u4e3a 0 0 \uff0c\u5219 g(x) g(x) \u4e00\u5b9a\u4e0d\u5b58\u5728\uff08 0 0 \u4e0d\u5b58\u5728\u9006\u5143\uff09\u3002\u82e5 f(x) f(x) \u7684\u5e38\u6570\u9879\u4e0d\u4e3a\u96f6\uff0c\u662f\u5426\u5c31\u4e00\u5b9a\u5b58\u5728 g(x) g(x) \u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5462\uff1f \u8003\u8651\u628a\u4e0a\u9762\u7684\u5f0f\u5b50\u89c6\u4f5c\u4e00\u4e2a n n \u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c f_{0..n-1} f_{0..n-1} \u662f\u5df2\u77e5\u7cfb\u6570\uff0c g_{0..n-1} g_{0..n-1} \u662f\u672a\u77e5\u6570\u3002\u6761\u4ef6\u7ed9\u51fa\u4e86 n n \u4e2a\u6b21\u6570\u4e0a\u5347\u7684\u7b49\u5f0f\uff0c\u65b9\u7a0b\u7ec4\u4e00\u5b9a\u6709\u89e3\uff0c\u800c\u4e14\u6709\u552f\u4e00\u89e3\u3002 \\begin{cases}f_0g_0&=1\\\\f_0g_1+f_1g_0&=0\\\\f_0g_2+f_1g_1+f_2g_0&=0\\\\f_0g_3+f_1g_2+f_2g_1+f_3g_0&=0\\\\ \\ldots\\\\ f_0g_{n-1}+f_1g_{n-2}+f_2g_{n-3}+\\ldots+f_{n-1}g_0&=0\\end{cases} \\begin{cases}f_0g_0&=1\\\\f_0g_1+f_1g_0&=0\\\\f_0g_2+f_1g_1+f_2g_0&=0\\\\f_0g_3+f_1g_2+f_2g_1+f_3g_0&=0\\\\ \\ldots\\\\ f_0g_{n-1}+f_1g_{n-2}+f_2g_{n-3}+\\ldots+f_{n-1}g_0&=0\\end{cases} \u4e5f\u5c31\u662f\u8bf4\uff0c f(x) f(x) \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u5b58\u5728\u9006\u5143\uff0c\u5f53\u4e14\u4ec5\u5f53 f(x) f(x) \u7684\u5e38\u6570\u9879\u975e\u96f6\uff1b\u82e5 f(x) f(x) \u5b58\u5728\u9006\u5143\uff0c\u5b83\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u9006\u5143 \u3002 \u6839\u636e\u4e0a\u8ff0\u65b9\u7a0b\u7ec4\u6c42\u9006\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \uff0c\u66f4\u5feb\u7684 O(n\\log n) O(n\\log n) \u7b97\u6cd5\u8bf7\u53c2\u8003 Newton's Method \u3002","title":"\u591a\u9879\u5f0f\u7684\u9006"},{"location":"polynomial/polylog/","text":"\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u3001\u6307\u6570\u51fd\u6570\u548c\u6b27\u62c9\u53d8\u6362 \u00b6 \u4e0e\u4e00\u822c\u60f3\u6cd5\u4e0d\u540c\uff0c\u591a\u9879\u5f0f\u4e5f\u6709\u81ea\u5df1\u7684\u5bf9\u6570\u51fd\u6570\u548c\u6307\u6570\u51fd\u6570\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u4f18\u79c0\u65f6\u95f4\u5185\u6c42\u89e3\u3002 \u6709\u8fd9\u4e48\u4e00\u4e2a\u5f0f\u5b50\u5e7f\u4e3a\u4eba\u77e5 e^x=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} e^x=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} \u4e8b\u5b9e\u4e0a\u5bf9\u6570\u51fd\u6570\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528\u65e0\u9650\u5e42\u7ea7\u6570\u5b9a\u4e49\uff1a \\ln(1-x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i} \\ln(1-x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i} \\ln(1+x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{(-1)^i\\cdot x^i}{i} \\ln(1+x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{(-1)^i\\cdot x^i}{i} \u5b83\u4eec\u5c31\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u6cf0\u52d2\u7ea7\u6570\u3002\u6307\u6570\u51fd\u6570\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u5bf9\u4e8e\u4efb\u610f\u5b9e\u6570 x x \u90fd\u6210\u7acb\uff0c\u5bf9\u6570\u51fd\u6570\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u53ea\u5bf9\u5b9a\u4e49\u57df\u5185\u7684\u4e00\u4e9b x x \u6210\u7acb\uff1b\u4e0d\u8fc7\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3 x x \uff0c\u53ea\u5173\u5fc3\u5176\u7cfb\u6570\u3002\u591a\u9879\u5f0f\u7684\u6307\u6570\u51fd\u6570\u548c\u5bf9\u6570\u51fd\u6570\u5c31\u662f\u7528\u8fd9\u4e9b\u7ea7\u6570\u5b9a\u4e49\u7684\u3002\u56e0\u4e3a\u8fd9\u4e9b\u7ea7\u6570\u90fd\u662f\u65e0\u9650\u7ea7\u6570\uff0c\u591a\u9879\u5f0f\u53ea\u5728\u6a21\u610f\u4e49\u4e0b\u5b58\u5728\u6307\u6570\u51fd\u6570\u548c\u5bf9\u6570\u51fd\u6570\u3002 \u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570 \u00b6 \u591a\u9879\u5f0f g(x) g(x) \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u5bf9\u6570\u51fd\u6570\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5e38\u6570\u9879\u4e3a 1 1 \uff0c\u5426\u5219\u5b83\u5bf9\u5e94\u7684\u6cf0\u52d2\u7ea7\u6570\u4e0d\u6536\u655b\u3002\u628a \\ln g(x) \\ln g(x) \u89c6\u4f5c\u4e00\u4e2a\u5173\u4e8e x x \u7684\u51fd\u6570\uff0c\u6211\u4eec\u6709 \\begin{aligned}\\left[\\ln g(x)\\right]^\\prime=\\dfrac{g(x)^\\prime}{g(x)}\\\\ \\ln g(x)=\\int\\mathrm{d}\\ln g(x)=\\int\\dfrac{g(x)^\\prime}{g(x)}\\mathrm{d}x\\end{aligned} \\begin{aligned}\\left[\\ln g(x)\\right]^\\prime=\\dfrac{g(x)^\\prime}{g(x)}\\\\ \\ln g(x)=\\int\\mathrm{d}\\ln g(x)=\\int\\dfrac{g(x)^\\prime}{g(x)}\\mathrm{d}x\\end{aligned} \u53ea\u8981\u5bf9 g(x) g(x) \u6c42\u5bfc\uff0c\u518d\u4e58\u4e0a \\dfrac{1}{g(x)} \\dfrac{1}{g(x)} \u5c31\u80fd\u591f\u5f97\u5230 \\ln g(x) \\ln g(x) \u7684\u5bfc\u6570\uff0c\u8fd9\u4e2a\u5bfc\u6570\u7684\u79ef\u5206\u5c31\u662f \\ln(g(x)) \\ln(g(x)) \u3002\u591a\u9879\u5f0f\u6c42\u5bfc\u3001\u79ef\u5206\u90fd\u662f\u975e\u5e38\u5bb9\u6613\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\uff0c \\dfrac{g(x)^\\prime}{g(x)} \\dfrac{g(x)^\\prime}{g(x)} \u7684\u4e0d\u5b9a\u79ef\u5206\u968f\u5e38\u6570\u9879\u7684\u4e0d\u540c\u6709\u65e0\u7a77\u591a\u4e2a\uff0c\u6211\u4eec\u5e94\u8be5\u53d6\u54ea\u4e00\u4e2a\u5462\uff1f\u6211\u4eec\u53d6\u5e38\u6570\u9879\u4e3a 0 0 \u7684\u90a3\u4e2a\u4f5c\u4e3a\u7b54\u6848\uff0c\u56e0\u4e3a\u53ea\u6709\u5e38\u6570\u9879\u4e3a 0 0 \u7684\u591a\u9879\u5f0f\u5728\u6a21\u610f\u4e49\u4e0b\u5b58\u5728\u6307\u6570\u51fd\u6570\u3002 \u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570 \u00b6 \u4e0a\u9762\u6211\u4eec\u63d0\u5230\uff0c\u591a\u9879\u5f0f g(x) g(x) \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u6307\u6570\u51fd\u6570\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5e38\u6570\u9879\u4e3a 0 0 \uff0c\u5426\u5219\u5b83\u5bf9\u5e94\u7684\u6cf0\u52d2\u7ea7\u6570\u4e5f\u4e00\u6837\u4e0d\u6536\u655b\u3002\u7531\u4e8e \\exp f(x) \\exp f(x) \u7684\u5bfc\u6570\u91cc\u8fd8\u662f\u5b58\u5728 \\exp f(x) \\exp f(x) \uff0c\u6211\u4eec\u53ea\u80fd\u7528\u5206\u6cbb FFT \u7684\u65b9\u6cd5 O\\left(n\\log^2n\\right) O\\left(n\\log^2n\\right) \u6c42\u51fa\u3002\u8fd9\u79cd\u65b9\u6cd5\u7531\u4e8e\u6bd4\u8f83\u7f13\u6162\u800c\u4e0d\u5e38\u4f7f\u7528\uff0c\u901a\u5e38\u6211\u4eec\u4f7f\u7528 Newton's Method O(n\\log n) O(n\\log n) \u6c42\u3002 \u5206\u6cbb\u6cd5\u5e76\u975e\u4e00\u65e0\u662f\u5904\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u9700\u8981\u5199\u591a\u9879\u5f0f\u6c42\u9006\u548c\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\uff0c\u5199\u8d77\u6765\u8981\u5feb\u5f88\u591a\uff1b\u867d\u7136\u590d\u6742\u5ea6\u591a\u4e00\u4e2a\u5bf9\u6570\uff0c\u4f46\u5e38\u6570\u8f83\u5c0f\uff0c\u4e5f\u4e0d\u4f1a\u6162\u7279\u522b\u591a\u3002 \u591a\u9879\u5f0f\u7684\u6307\u6570\u51fd\u6570\u662f\u6709\u5b9e\u9645\u7684\u7ec4\u5408\u610f\u4e49\u7684\u3002\u8bbe f(x) f(x) \u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a i i \u7684\u76d2\u5b50\u5185\u90e8\u5206\u914d\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08\u5373\uff0c [\\dfrac{x^i}{i!}]f(x) [\\dfrac{x^i}{i!}]f(x) \u8868\u793a\u4e00\u4e2a\u76d2\u5b50\u88c5 i i \u4e2a\u5c0f\u7403\u7684\u65b9\u6848\u6570\uff09\uff0c\u5219 \\exp f(x) \\exp f(x) \u8868\u793a i i \u4e2a\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230\u4efb\u610f\u591a\u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08\u5373\uff0c [\\dfrac{x^i}{i!}](\\exp f(x)) [\\dfrac{x^i}{i!}](\\exp f(x)) \u8868\u793a i i \u4e2a\u76f8\u4e92\u533a\u5206\u7684\u5c0f\u7403\u653e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u76d2\u5b50\u7684\u65b9\u6848\u6570\uff09\u3002\u8fd9\u4e2a\u7ec4\u5408\u610f\u4e49\u4e0e\u6307\u6570\u51fd\u6570\u7684\u5e42\u7ea7\u6570\u6709\u5173\u7cfb\u3002 \u8fd9\u4e00\u70b9\u7684\u8bc1\u660e\u53ea\u9700\u7528\u4e0b\u5f0f\u8bf4\u660e \\exp f(x)=\\sum\\dfrac{f^i(x)}{i!}=\\prod \\exp f_ix^i \\exp f(x)=\\sum\\dfrac{f^i(x)}{i!}=\\prod \\exp f_ix^i \u5176\u4e2d\u7684\u542b\u4e49\u662f\uff1a f^i(x) f^i(x) \u662f\u5c06\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230 i i \u4e2a\u6709\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff1b \\dfrac{f^i(x)}{i!} \\dfrac{f^i(x)}{i!} \u662f\u5c06\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230 i i \u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff1b \\sum\\dfrac{f^i(x)}{i!} \\sum\\dfrac{f^i(x)}{i!} \u662f\u5c06\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230\u4efb\u610f\u591a\u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff1b \\prod \\exp f_ix^i \\prod \\exp f_ix^i \u7684\u542b\u4e49\u8bf7\u81ea\u884c\u601d\u8003\u3002 \u6b27\u62c9\u53d8\u6362 \u00b6 \u5728\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u4e86\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\u7684\u7ec4\u5408\u542b\u4e49\u3002\u5982\u679c\u8981\u6c42\u65e0\u6807\u53f7\u5c0f\u7403\u653e\u5230\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f \u4ee4 f(x)=\\sum\\limits_{i=1}^nf_ix^i f(x)=\\sum\\limits_{i=1}^nf_ix^i \uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u6240\u6c42\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570 g(f(x)) g(f(x)) g(f(x))=\\prod\\limits_{i=1}^n\\dfrac{1}{(1-x^i)^{f_i}} g(f(x))=\\prod\\limits_{i=1}^n\\dfrac{1}{(1-x^i)^{f_i}} \u6ce8\u610f \u5728\u6307\u6570\u51fd\u6570\u7684\u7ec4\u5408\u610f\u4e49\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08EGF\uff09\uff0c\u800c\u5728\u6b27\u62c9\u53d8\u6362\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u5374\u662f\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\uff08OGF\uff09\u3002 \u51fa\u73b0\u4e86 1-x^k 1-x^k \uff0c\u5bf9\u6b64\u654f\u611f\u7684\u6211\u4eec\u8003\u8651\u6c42\u51fa\u5b83\u7684\u5bf9\u6570\u51fd\u6570 \\ln g(f(x))=\\sum\\limits_{i=1}^nf_i\\sum\\limits_{j=1}^{+\\infty}\\dfrac{x^{ij}}{j} \\ln g(f(x))=\\sum\\limits_{i=1}^nf_i\\sum\\limits_{j=1}^{+\\infty}\\dfrac{x^{ij}}{j} \u4ea4\u6362\u6c42\u548c\u987a\u5e8f \\begin{aligned}\\ln g(f(x))&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{1}{i}\\sum\\limits_{j=1}^{n}f_jx^{ij}\\\\&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i}\\end{aligned} \\begin{aligned}\\ln g(f(x))&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{1}{i}\\sum\\limits_{j=1}^{n}f_jx^{ij}\\\\&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i}\\end{aligned} \u4e8e\u662f g(f(x))=\\exp \\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i} g(f(x))=\\exp \\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i} \u6211\u4eec\u628a g(f(x)) g(f(x)) \u79f0\u4f5c f(x) f(x) \u7684\u6b27\u62c9\u53d8\u6362\uff0c\u5b83\u7684\u7ec4\u5408\u542b\u4e49\u662f\u65e0\u6807\u53f7\u5c0f\u7403\u653e\u5230\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528 O(n\\log n) O(n\\log n) \u7684\u590d\u6742\u5ea6\u6c42\u4e00\u4e2a\u591a\u9879\u5f0f f(x) f(x) \u7684\u6b27\u62c9\u53d8\u6362\u3002 \u4ed8\u516c\u4e3b\u7684\u80cc\u5305 \u7684\u53e6\u4e00\u79cd\u89e3\u91ca \u4ed8\u516c\u4e3b\u7684\u80cc\u5305\u53ef\u4ee5\u7528\u6b27\u62c9\u53d8\u6362\u89e3\u91ca\u3002\u5b8c\u5168\u80cc\u5305\u7684\u672c\u8d28\u5c31\u662f\u628a s s \u4e2a\u65e0\u6807\u53f7\u4f53\u79ef\u653e\u5230 n n \u79cd\u6709\u6807\u53f7\u5546\u54c1\u4e2d\u3002","title":"\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u3001\u6307\u6570\u51fd\u6570\u548c\u6b27\u62c9\u53d8\u6362"},{"location":"polynomial/polylog/#_1","text":"\u4e0e\u4e00\u822c\u60f3\u6cd5\u4e0d\u540c\uff0c\u591a\u9879\u5f0f\u4e5f\u6709\u81ea\u5df1\u7684\u5bf9\u6570\u51fd\u6570\u548c\u6307\u6570\u51fd\u6570\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u5728 O(n\\log n) O(n\\log n) \u7684\u4f18\u79c0\u65f6\u95f4\u5185\u6c42\u89e3\u3002 \u6709\u8fd9\u4e48\u4e00\u4e2a\u5f0f\u5b50\u5e7f\u4e3a\u4eba\u77e5 e^x=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} e^x=\\sum\\limits_{i=0}^{+\\infty}\\dfrac{x^i}{i!} \u4e8b\u5b9e\u4e0a\u5bf9\u6570\u51fd\u6570\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528\u65e0\u9650\u5e42\u7ea7\u6570\u5b9a\u4e49\uff1a \\ln(1-x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i} \\ln(1-x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{x^i}{i} \\ln(1+x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{(-1)^i\\cdot x^i}{i} \\ln(1+x)=-\\sum\\limits_{i=1}^{+\\infty}\\dfrac{(-1)^i\\cdot x^i}{i} \u5b83\u4eec\u5c31\u662f\u5927\u540d\u9f0e\u9f0e\u7684\u6cf0\u52d2\u7ea7\u6570\u3002\u6307\u6570\u51fd\u6570\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u5bf9\u4e8e\u4efb\u610f\u5b9e\u6570 x x \u90fd\u6210\u7acb\uff0c\u5bf9\u6570\u51fd\u6570\u7684\u6cf0\u52d2\u5c55\u5f00\u5f0f\u53ea\u5bf9\u5b9a\u4e49\u57df\u5185\u7684\u4e00\u4e9b x x \u6210\u7acb\uff1b\u4e0d\u8fc7\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3 x x \uff0c\u53ea\u5173\u5fc3\u5176\u7cfb\u6570\u3002\u591a\u9879\u5f0f\u7684\u6307\u6570\u51fd\u6570\u548c\u5bf9\u6570\u51fd\u6570\u5c31\u662f\u7528\u8fd9\u4e9b\u7ea7\u6570\u5b9a\u4e49\u7684\u3002\u56e0\u4e3a\u8fd9\u4e9b\u7ea7\u6570\u90fd\u662f\u65e0\u9650\u7ea7\u6570\uff0c\u591a\u9879\u5f0f\u53ea\u5728\u6a21\u610f\u4e49\u4e0b\u5b58\u5728\u6307\u6570\u51fd\u6570\u548c\u5bf9\u6570\u51fd\u6570\u3002","title":"\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\u3001\u6307\u6570\u51fd\u6570\u548c\u6b27\u62c9\u53d8\u6362"},{"location":"polynomial/polylog/#_2","text":"\u591a\u9879\u5f0f g(x) g(x) \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u5bf9\u6570\u51fd\u6570\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5e38\u6570\u9879\u4e3a 1 1 \uff0c\u5426\u5219\u5b83\u5bf9\u5e94\u7684\u6cf0\u52d2\u7ea7\u6570\u4e0d\u6536\u655b\u3002\u628a \\ln g(x) \\ln g(x) \u89c6\u4f5c\u4e00\u4e2a\u5173\u4e8e x x \u7684\u51fd\u6570\uff0c\u6211\u4eec\u6709 \\begin{aligned}\\left[\\ln g(x)\\right]^\\prime=\\dfrac{g(x)^\\prime}{g(x)}\\\\ \\ln g(x)=\\int\\mathrm{d}\\ln g(x)=\\int\\dfrac{g(x)^\\prime}{g(x)}\\mathrm{d}x\\end{aligned} \\begin{aligned}\\left[\\ln g(x)\\right]^\\prime=\\dfrac{g(x)^\\prime}{g(x)}\\\\ \\ln g(x)=\\int\\mathrm{d}\\ln g(x)=\\int\\dfrac{g(x)^\\prime}{g(x)}\\mathrm{d}x\\end{aligned} \u53ea\u8981\u5bf9 g(x) g(x) \u6c42\u5bfc\uff0c\u518d\u4e58\u4e0a \\dfrac{1}{g(x)} \\dfrac{1}{g(x)} \u5c31\u80fd\u591f\u5f97\u5230 \\ln g(x) \\ln g(x) \u7684\u5bfc\u6570\uff0c\u8fd9\u4e2a\u5bfc\u6570\u7684\u79ef\u5206\u5c31\u662f \\ln(g(x)) \\ln(g(x)) \u3002\u591a\u9879\u5f0f\u6c42\u5bfc\u3001\u79ef\u5206\u90fd\u662f\u975e\u5e38\u5bb9\u6613\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\uff0c \\dfrac{g(x)^\\prime}{g(x)} \\dfrac{g(x)^\\prime}{g(x)} \u7684\u4e0d\u5b9a\u79ef\u5206\u968f\u5e38\u6570\u9879\u7684\u4e0d\u540c\u6709\u65e0\u7a77\u591a\u4e2a\uff0c\u6211\u4eec\u5e94\u8be5\u53d6\u54ea\u4e00\u4e2a\u5462\uff1f\u6211\u4eec\u53d6\u5e38\u6570\u9879\u4e3a 0 0 \u7684\u90a3\u4e2a\u4f5c\u4e3a\u7b54\u6848\uff0c\u56e0\u4e3a\u53ea\u6709\u5e38\u6570\u9879\u4e3a 0 0 \u7684\u591a\u9879\u5f0f\u5728\u6a21\u610f\u4e49\u4e0b\u5b58\u5728\u6307\u6570\u51fd\u6570\u3002","title":"\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570"},{"location":"polynomial/polylog/#_3","text":"\u4e0a\u9762\u6211\u4eec\u63d0\u5230\uff0c\u591a\u9879\u5f0f g(x) g(x) \u5728\u6a21 x^n x^n \u610f\u4e49\u4e0b\u7684\u6307\u6570\u51fd\u6570\u5b58\u5728\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5e38\u6570\u9879\u4e3a 0 0 \uff0c\u5426\u5219\u5b83\u5bf9\u5e94\u7684\u6cf0\u52d2\u7ea7\u6570\u4e5f\u4e00\u6837\u4e0d\u6536\u655b\u3002\u7531\u4e8e \\exp f(x) \\exp f(x) \u7684\u5bfc\u6570\u91cc\u8fd8\u662f\u5b58\u5728 \\exp f(x) \\exp f(x) \uff0c\u6211\u4eec\u53ea\u80fd\u7528\u5206\u6cbb FFT \u7684\u65b9\u6cd5 O\\left(n\\log^2n\\right) O\\left(n\\log^2n\\right) \u6c42\u51fa\u3002\u8fd9\u79cd\u65b9\u6cd5\u7531\u4e8e\u6bd4\u8f83\u7f13\u6162\u800c\u4e0d\u5e38\u4f7f\u7528\uff0c\u901a\u5e38\u6211\u4eec\u4f7f\u7528 Newton's Method O(n\\log n) O(n\\log n) \u6c42\u3002 \u5206\u6cbb\u6cd5\u5e76\u975e\u4e00\u65e0\u662f\u5904\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u9700\u8981\u5199\u591a\u9879\u5f0f\u6c42\u9006\u548c\u591a\u9879\u5f0f\u5bf9\u6570\u51fd\u6570\uff0c\u5199\u8d77\u6765\u8981\u5feb\u5f88\u591a\uff1b\u867d\u7136\u590d\u6742\u5ea6\u591a\u4e00\u4e2a\u5bf9\u6570\uff0c\u4f46\u5e38\u6570\u8f83\u5c0f\uff0c\u4e5f\u4e0d\u4f1a\u6162\u7279\u522b\u591a\u3002 \u591a\u9879\u5f0f\u7684\u6307\u6570\u51fd\u6570\u662f\u6709\u5b9e\u9645\u7684\u7ec4\u5408\u610f\u4e49\u7684\u3002\u8bbe f(x) f(x) \u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a i i \u7684\u76d2\u5b50\u5185\u90e8\u5206\u914d\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08\u5373\uff0c [\\dfrac{x^i}{i!}]f(x) [\\dfrac{x^i}{i!}]f(x) \u8868\u793a\u4e00\u4e2a\u76d2\u5b50\u88c5 i i \u4e2a\u5c0f\u7403\u7684\u65b9\u6848\u6570\uff09\uff0c\u5219 \\exp f(x) \\exp f(x) \u8868\u793a i i \u4e2a\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230\u4efb\u610f\u591a\u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08\u5373\uff0c [\\dfrac{x^i}{i!}](\\exp f(x)) [\\dfrac{x^i}{i!}](\\exp f(x)) \u8868\u793a i i \u4e2a\u76f8\u4e92\u533a\u5206\u7684\u5c0f\u7403\u653e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u76d2\u5b50\u7684\u65b9\u6848\u6570\uff09\u3002\u8fd9\u4e2a\u7ec4\u5408\u610f\u4e49\u4e0e\u6307\u6570\u51fd\u6570\u7684\u5e42\u7ea7\u6570\u6709\u5173\u7cfb\u3002 \u8fd9\u4e00\u70b9\u7684\u8bc1\u660e\u53ea\u9700\u7528\u4e0b\u5f0f\u8bf4\u660e \\exp f(x)=\\sum\\dfrac{f^i(x)}{i!}=\\prod \\exp f_ix^i \\exp f(x)=\\sum\\dfrac{f^i(x)}{i!}=\\prod \\exp f_ix^i \u5176\u4e2d\u7684\u542b\u4e49\u662f\uff1a f^i(x) f^i(x) \u662f\u5c06\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230 i i \u4e2a\u6709\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff1b \\dfrac{f^i(x)}{i!} \\dfrac{f^i(x)}{i!} \u662f\u5c06\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230 i i \u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff1b \\sum\\dfrac{f^i(x)}{i!} \\sum\\dfrac{f^i(x)}{i!} \u662f\u5c06\u6709\u6807\u53f7\u5c0f\u7403\u5206\u914d\u5230\u4efb\u610f\u591a\u4e2a\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u7684\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff1b \\prod \\exp f_ix^i \\prod \\exp f_ix^i \u7684\u542b\u4e49\u8bf7\u81ea\u884c\u601d\u8003\u3002","title":"\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570"},{"location":"polynomial/polylog/#_4","text":"\u5728\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u4e86\u591a\u9879\u5f0f\u6307\u6570\u51fd\u6570\u7684\u7ec4\u5408\u542b\u4e49\u3002\u5982\u679c\u8981\u6c42\u65e0\u6807\u53f7\u5c0f\u7403\u653e\u5230\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f \u4ee4 f(x)=\\sum\\limits_{i=1}^nf_ix^i f(x)=\\sum\\limits_{i=1}^nf_ix^i \uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u6240\u6c42\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570 g(f(x)) g(f(x)) g(f(x))=\\prod\\limits_{i=1}^n\\dfrac{1}{(1-x^i)^{f_i}} g(f(x))=\\prod\\limits_{i=1}^n\\dfrac{1}{(1-x^i)^{f_i}} \u6ce8\u610f \u5728\u6307\u6570\u51fd\u6570\u7684\u7ec4\u5408\u610f\u4e49\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6307\u6570\u578b\u751f\u6210\u51fd\u6570\uff08EGF\uff09\uff0c\u800c\u5728\u6b27\u62c9\u53d8\u6362\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u5374\u662f\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\uff08OGF\uff09\u3002 \u51fa\u73b0\u4e86 1-x^k 1-x^k \uff0c\u5bf9\u6b64\u654f\u611f\u7684\u6211\u4eec\u8003\u8651\u6c42\u51fa\u5b83\u7684\u5bf9\u6570\u51fd\u6570 \\ln g(f(x))=\\sum\\limits_{i=1}^nf_i\\sum\\limits_{j=1}^{+\\infty}\\dfrac{x^{ij}}{j} \\ln g(f(x))=\\sum\\limits_{i=1}^nf_i\\sum\\limits_{j=1}^{+\\infty}\\dfrac{x^{ij}}{j} \u4ea4\u6362\u6c42\u548c\u987a\u5e8f \\begin{aligned}\\ln g(f(x))&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{1}{i}\\sum\\limits_{j=1}^{n}f_jx^{ij}\\\\&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i}\\end{aligned} \\begin{aligned}\\ln g(f(x))&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{1}{i}\\sum\\limits_{j=1}^{n}f_jx^{ij}\\\\&=\\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i}\\end{aligned} \u4e8e\u662f g(f(x))=\\exp \\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i} g(f(x))=\\exp \\sum\\limits_{i=1}^{+\\infty}\\dfrac{f(x^i)}{i} \u6211\u4eec\u628a g(f(x)) g(f(x)) \u79f0\u4f5c f(x) f(x) \u7684\u6b27\u62c9\u53d8\u6362\uff0c\u5b83\u7684\u7ec4\u5408\u542b\u4e49\u662f\u65e0\u6807\u53f7\u5c0f\u7403\u653e\u5230\u65e0\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528 O(n\\log n) O(n\\log n) \u7684\u590d\u6742\u5ea6\u6c42\u4e00\u4e2a\u591a\u9879\u5f0f f(x) f(x) \u7684\u6b27\u62c9\u53d8\u6362\u3002 \u4ed8\u516c\u4e3b\u7684\u80cc\u5305 \u7684\u53e6\u4e00\u79cd\u89e3\u91ca \u4ed8\u516c\u4e3b\u7684\u80cc\u5305\u53ef\u4ee5\u7528\u6b27\u62c9\u53d8\u6362\u89e3\u91ca\u3002\u5b8c\u5168\u80cc\u5305\u7684\u672c\u8d28\u5c31\u662f\u628a s s \u4e2a\u65e0\u6807\u53f7\u4f53\u79ef\u653e\u5230 n n \u79cd\u6709\u6807\u53f7\u5546\u54c1\u4e2d\u3002","title":"\u6b27\u62c9\u53d8\u6362"},{"location":"problem/2021/april/lg2791/","text":"\u5e7c\u513f\u56ed\u7bee\u7403\u9898 \u00b6 \u9898\u610f \u00b6 \u8521\u5f90\u5764\u5c06\u4f1a\u8fdb\u884c S S \u573a\u5de1\u56de\u7bee\u7403\u6f14\u51fa\u3002\u7531\u4e8e\u4ed6\u9ad8\u8d85\u7684\u6280\u5de7\uff0c\u8521\u5f90\u5764\u6295\u6ca1\u6c14\u7684\u7403\u4e00\u5b9a\u80fd\u8fdb\uff0c\u6295\u6709\u6c14\u7684\u7403\u4e00\u5b9a\u4e0d\u80fd\u8fdb\u3002 \u5728\u7b2c i i \u573a\u6f14\u51fa\uff0c\u573a\u4e0a\u4f1a\u6709 n_i n_i \u4e2a\u8521\u5f90\u5764\u7bee\u7403\uff0c\u5176\u4e2d\u6709 m_i m_i \u4e2a\u662f\u6ca1\u6c14\u7684\uff0c n_i-m_i n_i-m_i \u4e2a\u662f\u6709\u6c14\u7684\u3002\u8521\u5f90\u5764\u4f1a\u968f\u673a\u9009\u62e9 k_i k_i \u4e2a\u7bee\u7403\u6295\uff0c\u82e5\u4ed6\u6295\u8fdb\u4e86 x x \u4e2a\u7403\uff0c\u5219\u8be5\u573a\u6f14\u51fa\u7684\u5931\u8d25\u5ea6\u4e3a x^L x^L \u3002\u6c42\u6f14\u51fa\u7684\u671f\u671b\u5931\u8d25\u5ea6\u3002 \u89e3\u6790 \u00b6 \u5bf9\u4e8e\u6bcf\u573a\u8868\u6f14\uff0c\u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u5c31\u662f \\sum_{i=0}^ki^L\\binom{m}{i}\\binom{n-m}{k-i} \\sum_{i=0}^ki^L\\binom{m}{i}\\binom{n-m}{k-i} \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5 O(SN) O(SN) \u56de\u7b54\u8be2\u95ee\uff0c\u53ea\u80fd\u83b7\u5f97\u66b4\u529b\u5206\u3002\u8003\u8651\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u548c\u5e42\u7684\u5173\u7cfb\u6052\u7b49\u5f0f n^m=\\sum_{i=0}^n\\binom{n}{i}\\begin{Bmatrix}m\\\\i\\end{Bmatrix}i! n^m=\\sum_{i=0}^n\\binom{n}{i}\\begin{Bmatrix}m\\\\i\\end{Bmatrix}i! \u8fd9\u4e2a\u6052\u7b49\u5f0f\u7684\u7ec4\u5408\u610f\u4e49\u662f\uff0c\u5c06 m m \u4e2a\u6709\u6807\u53f7\u5c0f\u7403\u653e\u5165 n n \u4e2a\u6709\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u3002\u7528\u8be5\u5f0f\u5c55\u5f00\u7b54\u6848 \\sum_{i=0}^k\\binom{m}{i}\\binom{n-m}{k-i}\\sum_{j=0}^i\\binom{i}{j}\\begin{Bmatrix}L\\\\j\\end{Bmatrix}j! \\sum_{i=0}^k\\binom{m}{i}\\binom{n-m}{k-i}\\sum_{j=0}^i\\binom{i}{j}\\begin{Bmatrix}L\\\\j\\end{Bmatrix}j! \u4ea4\u6362\u679a\u4e3e\u987a\u5e8f\u5e76\u5c55\u5f00\u4e8c\u9879\u5f0f\u7cfb\u6570 \\begin{aligned} &\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}i!\\sum_{j=i}^k\\dfrac{m!}{(j-i)!i!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=i}^k\\dfrac{1}{(j-i)!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=0}^{k-i}\\dfrac{1}{j!(m-j-i)!}\\binom{n-m}{k-j-i}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\sum_{j=0}^{k-i}\\binom{m-i}{j}\\binom{n-m}{k-j-i} \\end{aligned} \\begin{aligned} &\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}i!\\sum_{j=i}^k\\dfrac{m!}{(j-i)!i!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=i}^k\\dfrac{1}{(j-i)!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=0}^{k-i}\\dfrac{1}{j!(m-j-i)!}\\binom{n-m}{k-j-i}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\sum_{j=0}^{k-i}\\binom{m-i}{j}\\binom{n-m}{k-j-i} \\end{aligned} \u6211\u4eec\u5df2\u7ecf\u5730\u5c06\u53f3\u4fa7\u7684\u548c\u5f0f\u8f6c\u5316\u4e3a\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u7684\u5f62\u5f0f\u4e86\u3002\u8fd9\u6837\u7b54\u6848\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a \\sum_{i=0}^{\\min(k,L)}\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\binom{n-i}{k-i} \\sum_{i=0}^{\\min(k,L)}\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\binom{n-i}{k-i} \u6211\u4eec\u53ef\u4ee5\u5728 O(L\\log L) O(L\\log L) \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u540c\u4e00\u884c\u7684\u6240\u6709 \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \uff0c\u7ee7\u800c\u5728 O(SL) O(SL) \u7684\u65f6\u95f4\u5185\u56de\u7b54 S S \u7ec4\u8be2\u95ee\u3002\u4e0d\u8981\u5fd8\u8bb0\u6bd4\u4e0a \\binom{n}{k} \\binom{n}{k} \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e7 + 19 , maxl = 2e5 + 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int rev [ maxl << 2 ], w [ maxl << 2 ]; void dft ( std :: vector < int >:: iterator f , int n , int b ){ for ( int i = 0 ; i < n ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); for ( int i = 2 ; i <= n ; i <<= 1 ){ w [ 0 ] = 1 , w [ 1 ] = qpow ( 3 , ( mod - 1 ) / i ); if ( b == -1 ) w [ 1 ] = qpow ( w [ 1 ], mod - 2 ); for ( int j = 2 ; j < i / 2 ; ++ j ) w [ j ] = ( ll ) w [ j - 1 ] * w [ 1 ] % mod ; for ( int j = 0 ; j < n ; j += i ){ std :: vector < int >:: iterator g = f + j , h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ int p = g [ k ], q = ( ll ) h [ k ] * w [ k ] % mod ; g [ k ] = ( p + q ) % mod , h [ k ] = ( p - q ) % mod ; } } } if ( b == -1 ) for ( int i = 0 , inv = qpow ( n , mod - 2 ); i < n ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; } std :: vector < int > operator * ( std :: vector < int > F , std :: vector < int > G ){ int N = 1 ; while ( N < ( int )( F . size () + G . size () - 1 )) N <<= 1 ; for ( int i = 0 ; i < N ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? N >> 1 : 0 ); F . resize ( N ), G . resize ( N ); dft ( F . begin (), N , 1 ), dft ( G . begin (), N , 1 ); for ( int i = 0 ; i < N ; ++ i ) F [ i ] = ( ll ) F [ i ] * G [ i ] % mod ; dft ( F . begin (), N , -1 ); F . resize ( F . size () + G . size () - 1 ); return F ; } std :: vector < int > F , G ; int N , M , S , L ; int fact [ maxn ], ifact [ maxn ]; inline int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ std :: scanf ( \"%d%d%d%d\" , & N , & M , & S , & L ); if ( N < L ) N = L ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ N ] = qpow ( fact [ N ], mod - 2 ); for ( int i = N - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; F . resize ( L + 1 ), G . resize ( L + 1 ); for ( int i = 0 ; i <= L ; ++ i ) F [ i ] = ( i & 1 ? -1 : 1 ) * ifact [ i ], G [ i ] = ( ll ) qpow ( i , L ) * ifact [ i ] % mod ; F = F * G , F . resize ( L + 1 ); while ( S -- ){ static int n , m , k , t , ans ; std :: scanf ( \"%d%d%d\" , & n , & m , & k ), t = std :: min ({ k , L , m , n }), ans = 0 ; for ( int i = 0 ; i <= t ; ++ i ) ans = ( ans + ( ll ) F [ i ] * fact [ m ] % mod * ifact [ m - i ] % mod * binom ( n - i , k - i )) % mod ; ans = ( ll ) ans * qpow ( binom ( n , k ), mod - 2 ) % mod ; std :: printf ( \"%d \\n \" , ( ans + mod ) % mod ); } return 0 ; } \u6765\u6e90 \u00b6 \u6d1b\u8c37 P2791 \u5e7c\u513f\u56ed\u7bee\u7403\u9898","title":"\u5e7c\u513f\u56ed\u7bee\u7403\u9898"},{"location":"problem/2021/april/lg2791/#_1","text":"","title":"\u5e7c\u513f\u56ed\u7bee\u7403\u9898"},{"location":"problem/2021/april/lg2791/#_2","text":"\u8521\u5f90\u5764\u5c06\u4f1a\u8fdb\u884c S S \u573a\u5de1\u56de\u7bee\u7403\u6f14\u51fa\u3002\u7531\u4e8e\u4ed6\u9ad8\u8d85\u7684\u6280\u5de7\uff0c\u8521\u5f90\u5764\u6295\u6ca1\u6c14\u7684\u7403\u4e00\u5b9a\u80fd\u8fdb\uff0c\u6295\u6709\u6c14\u7684\u7403\u4e00\u5b9a\u4e0d\u80fd\u8fdb\u3002 \u5728\u7b2c i i \u573a\u6f14\u51fa\uff0c\u573a\u4e0a\u4f1a\u6709 n_i n_i \u4e2a\u8521\u5f90\u5764\u7bee\u7403\uff0c\u5176\u4e2d\u6709 m_i m_i \u4e2a\u662f\u6ca1\u6c14\u7684\uff0c n_i-m_i n_i-m_i \u4e2a\u662f\u6709\u6c14\u7684\u3002\u8521\u5f90\u5764\u4f1a\u968f\u673a\u9009\u62e9 k_i k_i \u4e2a\u7bee\u7403\u6295\uff0c\u82e5\u4ed6\u6295\u8fdb\u4e86 x x \u4e2a\u7403\uff0c\u5219\u8be5\u573a\u6f14\u51fa\u7684\u5931\u8d25\u5ea6\u4e3a x^L x^L \u3002\u6c42\u6f14\u51fa\u7684\u671f\u671b\u5931\u8d25\u5ea6\u3002","title":"\u9898\u610f"},{"location":"problem/2021/april/lg2791/#_3","text":"\u5bf9\u4e8e\u6bcf\u573a\u8868\u6f14\uff0c\u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u5c31\u662f \\sum_{i=0}^ki^L\\binom{m}{i}\\binom{n-m}{k-i} \\sum_{i=0}^ki^L\\binom{m}{i}\\binom{n-m}{k-i} \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5 O(SN) O(SN) \u56de\u7b54\u8be2\u95ee\uff0c\u53ea\u80fd\u83b7\u5f97\u66b4\u529b\u5206\u3002\u8003\u8651\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u548c\u5e42\u7684\u5173\u7cfb\u6052\u7b49\u5f0f n^m=\\sum_{i=0}^n\\binom{n}{i}\\begin{Bmatrix}m\\\\i\\end{Bmatrix}i! n^m=\\sum_{i=0}^n\\binom{n}{i}\\begin{Bmatrix}m\\\\i\\end{Bmatrix}i! \u8fd9\u4e2a\u6052\u7b49\u5f0f\u7684\u7ec4\u5408\u610f\u4e49\u662f\uff0c\u5c06 m m \u4e2a\u6709\u6807\u53f7\u5c0f\u7403\u653e\u5165 n n \u4e2a\u6709\u6807\u53f7\u76d2\u5b50\u7684\u65b9\u6848\u6570\u3002\u7528\u8be5\u5f0f\u5c55\u5f00\u7b54\u6848 \\sum_{i=0}^k\\binom{m}{i}\\binom{n-m}{k-i}\\sum_{j=0}^i\\binom{i}{j}\\begin{Bmatrix}L\\\\j\\end{Bmatrix}j! \\sum_{i=0}^k\\binom{m}{i}\\binom{n-m}{k-i}\\sum_{j=0}^i\\binom{i}{j}\\begin{Bmatrix}L\\\\j\\end{Bmatrix}j! \u4ea4\u6362\u679a\u4e3e\u987a\u5e8f\u5e76\u5c55\u5f00\u4e8c\u9879\u5f0f\u7cfb\u6570 \\begin{aligned} &\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}i!\\sum_{j=i}^k\\dfrac{m!}{(j-i)!i!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=i}^k\\dfrac{1}{(j-i)!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=0}^{k-i}\\dfrac{1}{j!(m-j-i)!}\\binom{n-m}{k-j-i}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\sum_{j=0}^{k-i}\\binom{m-i}{j}\\binom{n-m}{k-j-i} \\end{aligned} \\begin{aligned} &\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}i!\\sum_{j=i}^k\\dfrac{m!}{(j-i)!i!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=i}^k\\dfrac{1}{(j-i)!(m-j)!}\\binom{n-m}{k-j}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}m!\\sum_{j=0}^{k-i}\\dfrac{1}{j!(m-j-i)!}\\binom{n-m}{k-j-i}\\\\ &=\\sum_{i=0}^k\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\sum_{j=0}^{k-i}\\binom{m-i}{j}\\binom{n-m}{k-j-i} \\end{aligned} \u6211\u4eec\u5df2\u7ecf\u5730\u5c06\u53f3\u4fa7\u7684\u548c\u5f0f\u8f6c\u5316\u4e3a\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u7684\u5f62\u5f0f\u4e86\u3002\u8fd9\u6837\u7b54\u6848\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a \\sum_{i=0}^{\\min(k,L)}\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\binom{n-i}{k-i} \\sum_{i=0}^{\\min(k,L)}\\begin{Bmatrix}L\\\\i\\end{Bmatrix}\\dfrac{m!}{(m-i)!}\\binom{n-i}{k-i} \u6211\u4eec\u53ef\u4ee5\u5728 O(L\\log L) O(L\\log L) \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u540c\u4e00\u884c\u7684\u6240\u6709 \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \uff0c\u7ee7\u800c\u5728 O(SL) O(SL) \u7684\u65f6\u95f4\u5185\u56de\u7b54 S S \u7ec4\u8be2\u95ee\u3002\u4e0d\u8981\u5fd8\u8bb0\u6bd4\u4e0a \\binom{n}{k} \\binom{n}{k} \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/april/lg2791/#_4","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e7 + 19 , maxl = 2e5 + 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int rev [ maxl << 2 ], w [ maxl << 2 ]; void dft ( std :: vector < int >:: iterator f , int n , int b ){ for ( int i = 0 ; i < n ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); for ( int i = 2 ; i <= n ; i <<= 1 ){ w [ 0 ] = 1 , w [ 1 ] = qpow ( 3 , ( mod - 1 ) / i ); if ( b == -1 ) w [ 1 ] = qpow ( w [ 1 ], mod - 2 ); for ( int j = 2 ; j < i / 2 ; ++ j ) w [ j ] = ( ll ) w [ j - 1 ] * w [ 1 ] % mod ; for ( int j = 0 ; j < n ; j += i ){ std :: vector < int >:: iterator g = f + j , h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ int p = g [ k ], q = ( ll ) h [ k ] * w [ k ] % mod ; g [ k ] = ( p + q ) % mod , h [ k ] = ( p - q ) % mod ; } } } if ( b == -1 ) for ( int i = 0 , inv = qpow ( n , mod - 2 ); i < n ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; } std :: vector < int > operator * ( std :: vector < int > F , std :: vector < int > G ){ int N = 1 ; while ( N < ( int )( F . size () + G . size () - 1 )) N <<= 1 ; for ( int i = 0 ; i < N ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? N >> 1 : 0 ); F . resize ( N ), G . resize ( N ); dft ( F . begin (), N , 1 ), dft ( G . begin (), N , 1 ); for ( int i = 0 ; i < N ; ++ i ) F [ i ] = ( ll ) F [ i ] * G [ i ] % mod ; dft ( F . begin (), N , -1 ); F . resize ( F . size () + G . size () - 1 ); return F ; } std :: vector < int > F , G ; int N , M , S , L ; int fact [ maxn ], ifact [ maxn ]; inline int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ std :: scanf ( \"%d%d%d%d\" , & N , & M , & S , & L ); if ( N < L ) N = L ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ N ] = qpow ( fact [ N ], mod - 2 ); for ( int i = N - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; F . resize ( L + 1 ), G . resize ( L + 1 ); for ( int i = 0 ; i <= L ; ++ i ) F [ i ] = ( i & 1 ? -1 : 1 ) * ifact [ i ], G [ i ] = ( ll ) qpow ( i , L ) * ifact [ i ] % mod ; F = F * G , F . resize ( L + 1 ); while ( S -- ){ static int n , m , k , t , ans ; std :: scanf ( \"%d%d%d\" , & n , & m , & k ), t = std :: min ({ k , L , m , n }), ans = 0 ; for ( int i = 0 ; i <= t ; ++ i ) ans = ( ans + ( ll ) F [ i ] * fact [ m ] % mod * ifact [ m - i ] % mod * binom ( n - i , k - i )) % mod ; ans = ( ll ) ans * qpow ( binom ( n , k ), mod - 2 ) % mod ; std :: printf ( \"%d \\n \" , ( ans + mod ) % mod ); } return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/april/lg2791/#_5","text":"\u6d1b\u8c37 P2791 \u5e7c\u513f\u56ed\u7bee\u7403\u9898","title":"\u6765\u6e90"},{"location":"problem/2021/march/bzoj1471/","text":"\u4e0d\u76f8\u4ea4\u8def\u5f84 \u00b6 \u9898\u610f \u00b6 \u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u7ed9\u5b9a\u56db\u4e2a\u70b9 a, b, c, d a, b, c, d \uff0c\u6c42\u51fa\u6709\u591a\u5c11\u5bf9\u8def\u5f84 ( a \\rightarrow b, c \\rightarrow d a \\rightarrow b, c \\rightarrow d ) \u6ee1\u8db3\u4e24\u6761\u8def\u5f84\u6ca1\u6709\u516c\u5171\u70b9\u3002 \u89e3\u6790 \u00b6 \u8003\u8651\u8865\u96c6\u8f6c\u5316\uff0c\u5373\u7528\u6240\u6709\u8def\u5f84\u5bf9\u7684\u603b\u6570\u51cf\u53bb\u76f8\u4ea4\u7684\u8def\u5f84\u5bf9\u3002 \u8bbe f(x, y) f(x, y) \u4e3a\u4ece x x \u51fa\u53d1\uff0c\u5230\u8fbe y y \u7684\u65b9\u6848\u6570\uff0c\u800c g(x) g(x) \u8868\u793a\u6ee1\u8db3\u4ece a a \u51fa\u53d1\u5230\u8fbe x x \uff0c\u4ece b b \u51fa\u53d1\u5230\u8fbe x x \u4e14\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\u5bf9\u6570\u3002\u5219\u7b54\u6848\u4e3a\u5168\u96c6\u51cf\u53bb \\sum_{x=1}^ng(x)f(x,c)f(x,d) \\sum_{x=1}^ng(x)f(x,c)f(x,d) \u5176\u4e2d f f \u663e\u7136\u53ef\u4ee5\u901a\u8fc7 O(nm) O(nm) \u7684 DP \u9884\u5904\u7406\uff0c\u4f46 g g \u5374\u6ca1\u6cd5\u76f4\u63a5\u8ba1\u7b97\u3002\u518d\u8fdb\u884c\u4e00\u6b21\u8865\u96c6\u8f6c\u5316\u5373\u53ef g(x)=f(a,x)f(b,x)-\\sum_{i<x{\\text{ topologically}}}g(i)f(i, x)^2 g(x)=f(a,x)f(b,x)-\\sum_{i<x{\\text{ topologically}}}g(i)f(i, x)^2 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 159 ; struct Edge { int to , next ; } edge [ maxn * maxn ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]]. to = to ; edge [ head [ 0 ]]. next = head [ from ]; head [ from ] = head [ 0 ]; } ll f [ maxn ][ maxn ], g [ maxn ]; int q [ maxn ], h = 1 , t ; int n , m , deg [ maxn ]; int a , b , c , d ; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , x , y ; i <= m ; ++ i ){ std :: scanf ( \"%d%d\" , & x , & y ); add ( x , y ), ++ deg [ y ]; } std :: scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); for ( int i = 1 ; i <= n ; ++ i ) if ( deg [ i ] == 0 ) q [ ++ t ] = i ; while ( h <= t ){ int node = q [ h ++ ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( -- deg [ edge [ i ]. to ] == 0 ) q [ ++ t ] = edge [ i ]. to ; } for ( int i = 1 ; i <= n ; ++ i ){ int node = q [ i ]; f [ node ][ node ] = 1 ; for ( int j = i ; j < n ; ++ j ) for ( int k = head [ q [ j ]]; k ; k = edge [ k ]. next ) f [ node ][ edge [ k ]. to ] += f [ node ][ q [ j ]]; } for ( int i = 1 ; i <= n ; ++ i ){ int node = q [ i ]; g [ node ] = f [ a ][ node ] * f [ c ][ node ]; for ( int j = 1 ; j < i ; ++ j ) g [ node ] -= g [ q [ j ]] * f [ q [ j ]][ node ] * f [ q [ j ]][ node ]; } ll ans = f [ a ][ b ] * f [ c ][ d ]; for ( int i = 1 ; i <= n ; ++ i ) ans -= g [ i ] * f [ i ][ b ] * f [ i ][ d ]; std :: printf ( \"%lld \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 BZOJ1471 \u4e0d\u76f8\u4ea4\u8def\u5f84","title":"\u4e0d\u76f8\u4ea4\u8def\u5f84"},{"location":"problem/2021/march/bzoj1471/#_1","text":"","title":"\u4e0d\u76f8\u4ea4\u8def\u5f84"},{"location":"problem/2021/march/bzoj1471/#_2","text":"\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u7ed9\u5b9a\u56db\u4e2a\u70b9 a, b, c, d a, b, c, d \uff0c\u6c42\u51fa\u6709\u591a\u5c11\u5bf9\u8def\u5f84 ( a \\rightarrow b, c \\rightarrow d a \\rightarrow b, c \\rightarrow d ) \u6ee1\u8db3\u4e24\u6761\u8def\u5f84\u6ca1\u6709\u516c\u5171\u70b9\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/bzoj1471/#_3","text":"\u8003\u8651\u8865\u96c6\u8f6c\u5316\uff0c\u5373\u7528\u6240\u6709\u8def\u5f84\u5bf9\u7684\u603b\u6570\u51cf\u53bb\u76f8\u4ea4\u7684\u8def\u5f84\u5bf9\u3002 \u8bbe f(x, y) f(x, y) \u4e3a\u4ece x x \u51fa\u53d1\uff0c\u5230\u8fbe y y \u7684\u65b9\u6848\u6570\uff0c\u800c g(x) g(x) \u8868\u793a\u6ee1\u8db3\u4ece a a \u51fa\u53d1\u5230\u8fbe x x \uff0c\u4ece b b \u51fa\u53d1\u5230\u8fbe x x \u4e14\u4e0d\u76f8\u4ea4\u7684\u8def\u5f84\u5bf9\u6570\u3002\u5219\u7b54\u6848\u4e3a\u5168\u96c6\u51cf\u53bb \\sum_{x=1}^ng(x)f(x,c)f(x,d) \\sum_{x=1}^ng(x)f(x,c)f(x,d) \u5176\u4e2d f f \u663e\u7136\u53ef\u4ee5\u901a\u8fc7 O(nm) O(nm) \u7684 DP \u9884\u5904\u7406\uff0c\u4f46 g g \u5374\u6ca1\u6cd5\u76f4\u63a5\u8ba1\u7b97\u3002\u518d\u8fdb\u884c\u4e00\u6b21\u8865\u96c6\u8f6c\u5316\u5373\u53ef g(x)=f(a,x)f(b,x)-\\sum_{i<x{\\text{ topologically}}}g(i)f(i, x)^2 g(x)=f(a,x)f(b,x)-\\sum_{i<x{\\text{ topologically}}}g(i)f(i, x)^2","title":"\u89e3\u6790"},{"location":"problem/2021/march/bzoj1471/#_4","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 159 ; struct Edge { int to , next ; } edge [ maxn * maxn ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]]. to = to ; edge [ head [ 0 ]]. next = head [ from ]; head [ from ] = head [ 0 ]; } ll f [ maxn ][ maxn ], g [ maxn ]; int q [ maxn ], h = 1 , t ; int n , m , deg [ maxn ]; int a , b , c , d ; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , x , y ; i <= m ; ++ i ){ std :: scanf ( \"%d%d\" , & x , & y ); add ( x , y ), ++ deg [ y ]; } std :: scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); for ( int i = 1 ; i <= n ; ++ i ) if ( deg [ i ] == 0 ) q [ ++ t ] = i ; while ( h <= t ){ int node = q [ h ++ ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( -- deg [ edge [ i ]. to ] == 0 ) q [ ++ t ] = edge [ i ]. to ; } for ( int i = 1 ; i <= n ; ++ i ){ int node = q [ i ]; f [ node ][ node ] = 1 ; for ( int j = i ; j < n ; ++ j ) for ( int k = head [ q [ j ]]; k ; k = edge [ k ]. next ) f [ node ][ edge [ k ]. to ] += f [ node ][ q [ j ]]; } for ( int i = 1 ; i <= n ; ++ i ){ int node = q [ i ]; g [ node ] = f [ a ][ node ] * f [ c ][ node ]; for ( int j = 1 ; j < i ; ++ j ) g [ node ] -= g [ q [ j ]] * f [ q [ j ]][ node ] * f [ q [ j ]][ node ]; } ll ans = f [ a ][ b ] * f [ c ][ d ]; for ( int i = 1 ; i <= n ; ++ i ) ans -= g [ i ] * f [ i ][ b ] * f [ i ][ d ]; std :: printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/bzoj1471/#_5","text":"BZOJ1471 \u4e0d\u76f8\u4ea4\u8def\u5f84","title":"\u6765\u6e90"},{"location":"problem/2021/march/bzoj3201/","text":"\u6218\u6597\u529b \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 a_1, a_2, \\ldots, a_n a_1, a_2, \\ldots, a_n \uff0c\u6ee1\u8db3 0 \\le a_1 \\le a_2 \\le \\ldots \\le a_n 0 \\le a_1 \\le a_2 \\le \\ldots \\le a_n \u3002\u6c42\u5e8f\u5217 b_1, b_2, \\ldots, b_n b_1, b_2, \\ldots, b_n \u7684\u6570\u91cf\uff0c\u6ee1\u8db3\u5bf9 b b \u8fdb\u884c\u91cd\u65b0\u6392\u5217\u540e\u53ef\u4ee5\u4f7f\u5f97 b_i \\le a_i b_i \\le a_i \u3002 \u89e3\u6790 \u00b6 \u663e\u7136\uff0c b b \u6ee1\u8db3\u6761\u4ef6\uff0c\u5f53\u4e14\u4ec5\u5f53\u5c06 b b \u6392\u5e8f\u540e\u6709 b_i\\le a_i b_i\\le a_i \u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u8865\u96c6\u8f6c\u5316\u3002\u8bbe dp_i dp_i \u8868\u793a\u53ea\u8003\u8651\u6392\u5e8f\u540e\u524d i i \u4e2a\u6570\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217 b b \u7684\u6570\u91cf\uff1a dp_i={a_n}^n-\\sum_{j=0}^{i}dp_{j-1}(a_n-a_{j})^{i-j+1}\\binom{i}{j-1} dp_i={a_n}^n-\\sum_{j=0}^{i}dp_{j-1}(a_n-a_{j})^{i-j+1}\\binom{i}{j-1} \u5176\u4e2d\uff0c j j \u662f\u5728\u679a\u4e3e\u7b2c\u4e00\u4e2a b_j > a_j b_j > a_j \u7684\u4f4d\u7f6e\uff0c\u800c\u4e8c\u9879\u5f0f\u7cfb\u6570 \\binom{i}{j-1} \\binom{i}{j-1} \u9009\u62e9\u4e86\u524d j-1 j-1 \u4e2a\u6570\u7684\u4e0b\u6807\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 1e3 + 19 , mod = 1e9 + 7 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int n , a [ maxn ], dp [ maxn ]; int fact [ maxn ], ifact [ maxn ]; void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ init ( 1000 ); int T ; std :: scanf ( \"%d\" , & T ); while ( T -- ){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); std :: sort ( a + 1 , a + 1 + n ); dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ){ dp [ i ] = qpow ( a [ i ], i ); for ( int j = 1 ; j <= i ; ++ j ) dp [ i ] = ( dp [ i ] - ( ll ) dp [ j - 1 ] * binom ( i , j - 1 ) % mod * qpow ( a [ i ] - a [ j ], i - j + 1 )) % mod ; } std :: printf ( \"%d \\n \" , ( dp [ n ] + mod ) % mod ); } } \u6765\u6e90 \u00b6 BZOJ3201 \u6218\u6597\u529b","title":"\u6218\u6597\u529b"},{"location":"problem/2021/march/bzoj3201/#_1","text":"","title":"\u6218\u6597\u529b"},{"location":"problem/2021/march/bzoj3201/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 a_1, a_2, \\ldots, a_n a_1, a_2, \\ldots, a_n \uff0c\u6ee1\u8db3 0 \\le a_1 \\le a_2 \\le \\ldots \\le a_n 0 \\le a_1 \\le a_2 \\le \\ldots \\le a_n \u3002\u6c42\u5e8f\u5217 b_1, b_2, \\ldots, b_n b_1, b_2, \\ldots, b_n \u7684\u6570\u91cf\uff0c\u6ee1\u8db3\u5bf9 b b \u8fdb\u884c\u91cd\u65b0\u6392\u5217\u540e\u53ef\u4ee5\u4f7f\u5f97 b_i \\le a_i b_i \\le a_i \u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/bzoj3201/#_3","text":"\u663e\u7136\uff0c b b \u6ee1\u8db3\u6761\u4ef6\uff0c\u5f53\u4e14\u4ec5\u5f53\u5c06 b b \u6392\u5e8f\u540e\u6709 b_i\\le a_i b_i\\le a_i \u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u8865\u96c6\u8f6c\u5316\u3002\u8bbe dp_i dp_i \u8868\u793a\u53ea\u8003\u8651\u6392\u5e8f\u540e\u524d i i \u4e2a\u6570\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217 b b \u7684\u6570\u91cf\uff1a dp_i={a_n}^n-\\sum_{j=0}^{i}dp_{j-1}(a_n-a_{j})^{i-j+1}\\binom{i}{j-1} dp_i={a_n}^n-\\sum_{j=0}^{i}dp_{j-1}(a_n-a_{j})^{i-j+1}\\binom{i}{j-1} \u5176\u4e2d\uff0c j j \u662f\u5728\u679a\u4e3e\u7b2c\u4e00\u4e2a b_j > a_j b_j > a_j \u7684\u4f4d\u7f6e\uff0c\u800c\u4e8c\u9879\u5f0f\u7cfb\u6570 \\binom{i}{j-1} \\binom{i}{j-1} \u9009\u62e9\u4e86\u524d j-1 j-1 \u4e2a\u6570\u7684\u4e0b\u6807\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/bzoj3201/#_4","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 1e3 + 19 , mod = 1e9 + 7 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int n , a [ maxn ], dp [ maxn ]; int fact [ maxn ], ifact [ maxn ]; void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ init ( 1000 ); int T ; std :: scanf ( \"%d\" , & T ); while ( T -- ){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); std :: sort ( a + 1 , a + 1 + n ); dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ){ dp [ i ] = qpow ( a [ i ], i ); for ( int j = 1 ; j <= i ; ++ j ) dp [ i ] = ( dp [ i ] - ( ll ) dp [ j - 1 ] * binom ( i , j - 1 ) % mod * qpow ( a [ i ] - a [ j ], i - j + 1 )) % mod ; } std :: printf ( \"%d \\n \" , ( dp [ n ] + mod ) % mod ); } }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/bzoj3201/#_5","text":"BZOJ3201 \u6218\u6597\u529b","title":"\u6765\u6e90"},{"location":"problem/2021/march/cf472g/","text":"Design Tutorial: Increase the Constraints \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e24\u4e2a 01 \u4e32 a a \u548c b b \uff0c\u6bcf\u6b21\u8be2\u95ee a a \u548c b b \u7684\u957f\u5ea6\u76f8\u540c\u7684\u5b50\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u89e3\u6790 \u00b6 \u8003\u8651\u5c06 a a \u4e32\u5206\u5757\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u4e00\u5757\u4e0e b b \u7684\u6bcf\u4e2a\u957f\u5ea6\u4e0e\u4e4b\u76f8\u540c\u7684\u5b50\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002\u8bbe\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u4e3a S S \uff0c\u5219\u8fd9\u6837\u8981\u5360\u7528 O\\left(\\dfrac{nm}{S}\\right) O\\left(\\dfrac{nm}{S}\\right) \u7684\u7a7a\u95f4\u3002 \u5982\u679c\u66b4\u529b\u5339\u914d a[iS\\ldots (i+1)S-1] a[iS\\ldots (i+1)S-1] \u548c b b \u7684\u6bcf\u4e2a\u957f\u5ea6\u4e3a S S \u7684\u5b50\u4e32\uff0c\u5219\u603b\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002\u4f46\u7531\u4e8e\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a 2 2 \uff0c\u6211\u4eec\u53ef\u4ee5\u7528 FFT \u4ee5 O\\left(\\dfrac{nm\\log m}{S}\\right) O\\left(\\dfrac{nm\\log m}{S}\\right) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa\u6bcf\u4e00\u5757\u4e0e b b \u7684\u6bcf\u4e00\u4e2a\u76f8\u7b49\u957f\u5ea6\u7684\u5b50\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u4e4b\u540e\u6bcf\u6b21\u8be2\u95ee\u6211\u4eec\u53ef\u4ee5 O\\left(\\dfrac{n}{S}+S\\right) O\\left(\\dfrac{n}{S}+S\\right) \u56de\u7b54\u3002\u53d6 S=\\sqrt{n\\log n} S=\\sqrt{n\\log n} \u5f97\u5230\u7406\u8bba\u6700\u4f18\u590d\u6742\u5ea6 O(n\\sqrt{n\\log n}) O(n\\sqrt{n\\log n}) \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 3e5 + 19 , mod = 1004535809 , maxs = 200 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int rev [ maxn ]; void dft ( int * f , int n , int b = 1 ){ for ( int i = 0 ; i < n ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); static int w [ maxn ]; for ( int i = 2 ; i <= n ; i <<= 1 ){ w [ 0 ] = 1 , w [ 1 ] = qpow ( 3 , ( mod - 1 ) / i ); if ( b == -1 ) w [ 1 ] = qpow ( w [ 1 ], mod - 2 ); for ( int j = 2 ; j < i / 2 ; ++ j ) w [ j ] = ( ll ) w [ j - 1 ] * w [ 1 ] % mod ; for ( int j = 0 ; j < n ; j += i ){ int * g = f + j , * h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ int p = g [ k ], q = ( ll ) h [ k ] * w [ k ] % mod ; g [ k ] = ( p + q ) % mod , h [ k ] = ( p - q ) % mod ; } } } if ( b == -1 ) for ( int i = 0 , inv = qpow ( n , mod - 2 ); i < n ; ++ i ) f [ i ] = (( ll ) f [ i ] * inv % mod + mod ) % mod ; } int n , m , S ; int belong [ maxn ], dif [ maxs ][ maxn ]; char a [ maxn ], b [ maxn ]; int f [ maxn ], g [ maxn ]; int main (){ std :: scanf ( \"%s%s\" , a , b ); n = std :: strlen ( a ), m = std :: strlen ( b ); S = std :: max < int > ( std :: sqrt ( std :: max ( n , m ) * std :: log ( std :: max ( n , m ))), n / ( maxs - 2 ) + 1 ); for ( int i = 0 ; i < n ; ++ i ) belong [ i ] = i / S ; for ( int i = 0 ; i < m ; ++ i ) f [ i ] = b [ m - 1 - i ] - '0' ; static int sumg , sumf [ maxn ]; sumf [ 0 ] = b [ 0 ] - '0' ; for ( int i = 1 ; i < m ; ++ i ) sumf [ i ] = sumf [ i - 1 ] + b [ i ] - '0' ; int N = 2 ; while ( N < m + S - 1 ) N <<= 1 ; for ( int i = 0 ; i < N ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? N >> 1 : 0 ); dft ( f , N ); for ( int i = 0 ; i * S < n ; ++ i ){ int l = i * S , r = std :: min ( l + S , n ) - 1 , len = r - l + 1 ; sumg = 0 ; for ( int j = 0 ; j < N ; ++ j ) g [ j ] = 0 ; for ( int j = 0 ; j < len ; ++ j ) g [ j ] = a [ l + j ] - '0' , sumg += g [ j ]; dft ( g , N ); for ( int j = 0 ; j < N ; ++ j ) g [ j ] = ( ll ) g [ j ] * f [ j ] % mod ; dft ( g , N , -1 ); for ( int j = 0 ; j + len - 1 < m ; ++ j ) dif [ i ][ j ] = -2 * g [ m - 1 - j ] + sumf [ j + len - 1 ] - sumf [ j ] + ( b [ j ] - '0' ) + sumg ; } std :: scanf ( \"%d\" , & m ); while ( m -- ){ static int p1 , p2 , len , res ; std :: scanf ( \"%d%d%d\" , & p1 , & p2 , & len ), res = 0 ; while ( p1 % S && len ) res += a [ p1 ++ ] != b [ p2 ++ ], -- len ; while ( len % S && len ) res += a [ p1 + len - 1 ] != b [ p2 + len - 1 ], -- len ; int l = p1 / S , r = l + len / S - 1 ; for ( int i = l ; i <= r ; ++ i ) res += dif [ i ][ p2 + ( i - l ) * S ]; std :: printf ( \"%d \\n \" , res ); } } \u6765\u6e90 \u00b6 Codeforces Round #270 G. Design Tutorial: Increase the Constraints","title":"Design Tutorial: Increase the Constraints"},{"location":"problem/2021/march/cf472g/#design-tutorial-increase-the-constraints","text":"","title":"Design Tutorial: Increase the Constraints"},{"location":"problem/2021/march/cf472g/#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a 01 \u4e32 a a \u548c b b \uff0c\u6bcf\u6b21\u8be2\u95ee a a \u548c b b \u7684\u957f\u5ea6\u76f8\u540c\u7684\u5b50\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/cf472g/#_2","text":"\u8003\u8651\u5c06 a a \u4e32\u5206\u5757\uff0c\u7136\u540e\u8ba1\u7b97\u6bcf\u4e00\u5757\u4e0e b b \u7684\u6bcf\u4e2a\u957f\u5ea6\u4e0e\u4e4b\u76f8\u540c\u7684\u5b50\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002\u8bbe\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u4e3a S S \uff0c\u5219\u8fd9\u6837\u8981\u5360\u7528 O\\left(\\dfrac{nm}{S}\\right) O\\left(\\dfrac{nm}{S}\\right) \u7684\u7a7a\u95f4\u3002 \u5982\u679c\u66b4\u529b\u5339\u914d a[iS\\ldots (i+1)S-1] a[iS\\ldots (i+1)S-1] \u548c b b \u7684\u6bcf\u4e2a\u957f\u5ea6\u4e3a S S \u7684\u5b50\u4e32\uff0c\u5219\u603b\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002\u4f46\u7531\u4e8e\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a 2 2 \uff0c\u6211\u4eec\u53ef\u4ee5\u7528 FFT \u4ee5 O\\left(\\dfrac{nm\\log m}{S}\\right) O\\left(\\dfrac{nm\\log m}{S}\\right) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa\u6bcf\u4e00\u5757\u4e0e b b \u7684\u6bcf\u4e00\u4e2a\u76f8\u7b49\u957f\u5ea6\u7684\u5b50\u4e32\u7684\u6c49\u660e\u8ddd\u79bb\u3002 \u4e4b\u540e\u6bcf\u6b21\u8be2\u95ee\u6211\u4eec\u53ef\u4ee5 O\\left(\\dfrac{n}{S}+S\\right) O\\left(\\dfrac{n}{S}+S\\right) \u56de\u7b54\u3002\u53d6 S=\\sqrt{n\\log n} S=\\sqrt{n\\log n} \u5f97\u5230\u7406\u8bba\u6700\u4f18\u590d\u6742\u5ea6 O(n\\sqrt{n\\log n}) O(n\\sqrt{n\\log n}) \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/cf472g/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 3e5 + 19 , mod = 1004535809 , maxs = 200 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int rev [ maxn ]; void dft ( int * f , int n , int b = 1 ){ for ( int i = 0 ; i < n ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); static int w [ maxn ]; for ( int i = 2 ; i <= n ; i <<= 1 ){ w [ 0 ] = 1 , w [ 1 ] = qpow ( 3 , ( mod - 1 ) / i ); if ( b == -1 ) w [ 1 ] = qpow ( w [ 1 ], mod - 2 ); for ( int j = 2 ; j < i / 2 ; ++ j ) w [ j ] = ( ll ) w [ j - 1 ] * w [ 1 ] % mod ; for ( int j = 0 ; j < n ; j += i ){ int * g = f + j , * h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ int p = g [ k ], q = ( ll ) h [ k ] * w [ k ] % mod ; g [ k ] = ( p + q ) % mod , h [ k ] = ( p - q ) % mod ; } } } if ( b == -1 ) for ( int i = 0 , inv = qpow ( n , mod - 2 ); i < n ; ++ i ) f [ i ] = (( ll ) f [ i ] * inv % mod + mod ) % mod ; } int n , m , S ; int belong [ maxn ], dif [ maxs ][ maxn ]; char a [ maxn ], b [ maxn ]; int f [ maxn ], g [ maxn ]; int main (){ std :: scanf ( \"%s%s\" , a , b ); n = std :: strlen ( a ), m = std :: strlen ( b ); S = std :: max < int > ( std :: sqrt ( std :: max ( n , m ) * std :: log ( std :: max ( n , m ))), n / ( maxs - 2 ) + 1 ); for ( int i = 0 ; i < n ; ++ i ) belong [ i ] = i / S ; for ( int i = 0 ; i < m ; ++ i ) f [ i ] = b [ m - 1 - i ] - '0' ; static int sumg , sumf [ maxn ]; sumf [ 0 ] = b [ 0 ] - '0' ; for ( int i = 1 ; i < m ; ++ i ) sumf [ i ] = sumf [ i - 1 ] + b [ i ] - '0' ; int N = 2 ; while ( N < m + S - 1 ) N <<= 1 ; for ( int i = 0 ; i < N ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? N >> 1 : 0 ); dft ( f , N ); for ( int i = 0 ; i * S < n ; ++ i ){ int l = i * S , r = std :: min ( l + S , n ) - 1 , len = r - l + 1 ; sumg = 0 ; for ( int j = 0 ; j < N ; ++ j ) g [ j ] = 0 ; for ( int j = 0 ; j < len ; ++ j ) g [ j ] = a [ l + j ] - '0' , sumg += g [ j ]; dft ( g , N ); for ( int j = 0 ; j < N ; ++ j ) g [ j ] = ( ll ) g [ j ] * f [ j ] % mod ; dft ( g , N , -1 ); for ( int j = 0 ; j + len - 1 < m ; ++ j ) dif [ i ][ j ] = -2 * g [ m - 1 - j ] + sumf [ j + len - 1 ] - sumf [ j ] + ( b [ j ] - '0' ) + sumg ; } std :: scanf ( \"%d\" , & m ); while ( m -- ){ static int p1 , p2 , len , res ; std :: scanf ( \"%d%d%d\" , & p1 , & p2 , & len ), res = 0 ; while ( p1 % S && len ) res += a [ p1 ++ ] != b [ p2 ++ ], -- len ; while ( len % S && len ) res += a [ p1 + len - 1 ] != b [ p2 + len - 1 ], -- len ; int l = p1 / S , r = l + len / S - 1 ; for ( int i = l ; i <= r ; ++ i ) res += dif [ i ][ p2 + ( i - l ) * S ]; std :: printf ( \"%d \\n \" , res ); } }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/cf472g/#_4","text":"Codeforces Round #270 G. Design Tutorial: Increase the Constraints","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2007/","text":"Light \u00b6 \u9898\u610f \u00b6 \u6709\u4e00\u6392 n n \u4e2a\u706f\u3002\u6240\u6709\u706f\u90fd\u5e26\u6709\u989c\u8272\uff0c\u7528 1 1 \u81f3 m m \u7684\u6b63\u6574\u6570\u8868\u793a\u3002\u521d\u59cb\u65f6\u6240\u6709\u706f\u90fd\u662f\u5173\u7740\u7684\u3002 \u6709 q q \u7ec4\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53cd\u8f6c\u6240\u6709\u67d0\u79cd\u989c\u8272\u7684\u706f\u7684\u72b6\u6001\u3002\u5728\u6bcf\u6b21\u64cd\u4f5c\u540e\u56de\u7b54\u6240\u6709\u5f00\u7740\u7684\u706f\u6784\u6210\u4e86\u591a\u5c11\u4e2a\u4e0d\u53ef\u6269\u5c55\u7684\u8fde\u7eed\u5b50\u6bb5\u3002 \u89e3\u6790 \u00b6 \u8bbe\u5b9a\u4e00\u4e2a\u5e38\u6570 k k \u3002\u5f53\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e\u7b49\u4e8e k k \u7684\u989c\u8272\u65f6\uff0c\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u3002 \u5bf9\u4e8e\u51fa\u73b0\u6b21\u6570\u5927\u4e8e k k \u7684\u989c\u8272\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053\u6709\u591a\u5c11\u5f00\u7740\u7684\u706f\u4e0e\u5176\u76f8\u90bb\u5c31\u53ef\u4ee5\u95f4\u63a5\u5730\u8ba1\u7b97\u7b54\u6848\u3002\u8fd9\u4e2a\u503c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4 \\text{adj} \\text{adj} \u5b58\u50a8\uff0c\u5728\u66b4\u529b\u4fee\u6539\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e\u7b49\u4e8e k k \u7684\u989c\u8272\u65f6\u6211\u4eec\u4e5f\u540c\u65f6\u7ef4\u62a4\u8fd9\u4e2a\u6570\u7ec4\u3002 \u4f46\u5982\u4f55\u5728\u4fee\u6539\u51fa\u73b0\u6b21\u6570\u5927\u4e8e k k \u7684\u989c\u8272\u65f6\u7ef4\u62a4 \\text{adj} \\text{adj} \u5462\uff1f\u6ce8\u610f\u5230\u8fd9\u4e00\u7c7b\u989c\u8272\u6700\u591a\u6709 \\dfrac{n}{k} \\dfrac{n}{k} \u79cd\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6240\u6709\u4e0e\u5f53\u524d\u989c\u8272\u76f8\u90bb\u4e14\u51fa\u73b0\u6b21\u6570\u5927\u4e8e k k \u7684\u989c\u8272\uff0c\u76f8\u5e94\u5730\u4fee\u6539\u8fd9\u81f3\u591a \\dfrac{n}{k}-1 \\dfrac{n}{k}-1 \u4e2a\u989c\u8272\u7684 \\text{adj} \\text{adj} \u6570\u7ec4\u3002 \u603b\u590d\u6742\u5ea6\u4e3a O\\left(nk+\\dfrac{n^2}{k}\\right) O\\left(nk+\\dfrac{n^2}{k}\\right) \uff0c\u5728 k=\\sqrt{n} k=\\sqrt{n} \u65f6\u53d6\u6700\u4f18\u503c O(n\\sqrt{n}) O(n\\sqrt{n}) \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 1e5 + 19 , maxb = 400 ; int a , b ; int n , m , q , B ; int cnt [ maxn ], tmp [ maxn ], cor [ maxn ], deg [ maxn ][ maxb ], ind , adj [ maxb ], dec [ maxn ]; std :: vector < int > pos [ maxn ]; bool vist [ maxn ]; int main (){ std :: scanf ( \"%d%d%d\" , & n , & m , & q ), B = std :: sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ){ std :: scanf ( \"%d\" , cor + i ); ++ cnt [ cor [ i ]]; } for ( int i = 1 ; i <= n ; ++ i ) if ( cnt [ i ] > B ) tmp [ i ] = ++ ind ; int B_cnt = ind ; for ( int i = 1 ; i <= n ; ++ i ) if ( cnt [ i ] && cnt [ i ] <= B ) tmp [ i ] = ++ ind ; std :: fill ( cnt + 1 , cnt + 1 + n , 0 ); for ( int i = 1 ; i <= n ; ++ i ){ cor [ i ] = tmp [ cor [ i ]]; pos [ cor [ i ]]. push_back ( i ), ++ cnt [ cor [ i ]]; if ( cor [ i - 1 ] == cor [ i ]) ++ dec [ cor [ i ]]; } for ( int i = 1 ; i <= n ; ++ i ){ if ( cor [ i ] != cor [ i - 1 ] && cnt [ cor [ i - 1 ]] > B ) ++ deg [ cor [ i ]][ cor [ i - 1 ]]; if ( cor [ i ] != cor [ i + 1 ] && cnt [ cor [ i + 1 ]] > B ) ++ deg [ cor [ i ]][ cor [ i + 1 ]]; } while ( q -- ){ static int v ; std :: scanf ( \"%d\" , & v ), v = tmp [ v ]; if ( ! v ){ std :: printf ( \"%d \\n \" , a - b ); continue ; } if ( cnt [ v ] <= B ){ if ( ! vist [ v ]){ assert ( cnt [ v ] == ( int ) pos [ v ]. size ()); for ( int i = 0 ; i < cnt [ v ]; ++ i ){ int node = pos [ v ][ i ]; if ( vist [ cor [ node - 1 ]] && cor [ node - 1 ] != cor [ node ]) ++ b ; if ( vist [ cor [ node + 1 ]] && cor [ node + 1 ] != cor [ node ]) ++ b ; ++ a ; } for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] += deg [ v ][ i ]; b += dec [ v ]; } else { assert ( cnt [ v ] == ( int ) pos [ v ]. size ()); for ( int i = 0 ; i < cnt [ v ]; ++ i ){ int node = pos [ v ][ i ]; if ( vist [ cor [ node - 1 ]] && cor [ node - 1 ] != cor [ node ]) -- b ; if ( vist [ cor [ node + 1 ]] && cor [ node + 1 ] != cor [ node ]) -- b ; -- a ; } for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] -= deg [ v ][ i ]; b -= dec [ v ]; } vist [ v ] ^= 1 ; } else { if ( ! vist [ v ]){ b += dec [ v ] + adj [ v ], a += cnt [ v ]; for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] += deg [ v ][ i ]; } else { b -= dec [ v ] + adj [ v ], a -= cnt [ v ]; for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] -= deg [ v ][ i ]; } vist [ v ] ^= 1 ; } std :: printf ( \"%d \\n \" , a - b ); } return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2007 light","title":"Light"},{"location":"problem/2021/march/noi2007/#light","text":"","title":"Light"},{"location":"problem/2021/march/noi2007/#_1","text":"\u6709\u4e00\u6392 n n \u4e2a\u706f\u3002\u6240\u6709\u706f\u90fd\u5e26\u6709\u989c\u8272\uff0c\u7528 1 1 \u81f3 m m \u7684\u6b63\u6574\u6570\u8868\u793a\u3002\u521d\u59cb\u65f6\u6240\u6709\u706f\u90fd\u662f\u5173\u7740\u7684\u3002 \u6709 q q \u7ec4\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53cd\u8f6c\u6240\u6709\u67d0\u79cd\u989c\u8272\u7684\u706f\u7684\u72b6\u6001\u3002\u5728\u6bcf\u6b21\u64cd\u4f5c\u540e\u56de\u7b54\u6240\u6709\u5f00\u7740\u7684\u706f\u6784\u6210\u4e86\u591a\u5c11\u4e2a\u4e0d\u53ef\u6269\u5c55\u7684\u8fde\u7eed\u5b50\u6bb5\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2007/#_2","text":"\u8bbe\u5b9a\u4e00\u4e2a\u5e38\u6570 k k \u3002\u5f53\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e\u7b49\u4e8e k k \u7684\u989c\u8272\u65f6\uff0c\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u3002 \u5bf9\u4e8e\u51fa\u73b0\u6b21\u6570\u5927\u4e8e k k \u7684\u989c\u8272\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053\u6709\u591a\u5c11\u5f00\u7740\u7684\u706f\u4e0e\u5176\u76f8\u90bb\u5c31\u53ef\u4ee5\u95f4\u63a5\u5730\u8ba1\u7b97\u7b54\u6848\u3002\u8fd9\u4e2a\u503c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4 \\text{adj} \\text{adj} \u5b58\u50a8\uff0c\u5728\u66b4\u529b\u4fee\u6539\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e\u7b49\u4e8e k k \u7684\u989c\u8272\u65f6\u6211\u4eec\u4e5f\u540c\u65f6\u7ef4\u62a4\u8fd9\u4e2a\u6570\u7ec4\u3002 \u4f46\u5982\u4f55\u5728\u4fee\u6539\u51fa\u73b0\u6b21\u6570\u5927\u4e8e k k \u7684\u989c\u8272\u65f6\u7ef4\u62a4 \\text{adj} \\text{adj} \u5462\uff1f\u6ce8\u610f\u5230\u8fd9\u4e00\u7c7b\u989c\u8272\u6700\u591a\u6709 \\dfrac{n}{k} \\dfrac{n}{k} \u79cd\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6240\u6709\u4e0e\u5f53\u524d\u989c\u8272\u76f8\u90bb\u4e14\u51fa\u73b0\u6b21\u6570\u5927\u4e8e k k \u7684\u989c\u8272\uff0c\u76f8\u5e94\u5730\u4fee\u6539\u8fd9\u81f3\u591a \\dfrac{n}{k}-1 \\dfrac{n}{k}-1 \u4e2a\u989c\u8272\u7684 \\text{adj} \\text{adj} \u6570\u7ec4\u3002 \u603b\u590d\u6742\u5ea6\u4e3a O\\left(nk+\\dfrac{n^2}{k}\\right) O\\left(nk+\\dfrac{n^2}{k}\\right) \uff0c\u5728 k=\\sqrt{n} k=\\sqrt{n} \u65f6\u53d6\u6700\u4f18\u503c O(n\\sqrt{n}) O(n\\sqrt{n}) \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2007/#_3","text":"#include <bits/stdc++.h> const int maxn = 1e5 + 19 , maxb = 400 ; int a , b ; int n , m , q , B ; int cnt [ maxn ], tmp [ maxn ], cor [ maxn ], deg [ maxn ][ maxb ], ind , adj [ maxb ], dec [ maxn ]; std :: vector < int > pos [ maxn ]; bool vist [ maxn ]; int main (){ std :: scanf ( \"%d%d%d\" , & n , & m , & q ), B = std :: sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ){ std :: scanf ( \"%d\" , cor + i ); ++ cnt [ cor [ i ]]; } for ( int i = 1 ; i <= n ; ++ i ) if ( cnt [ i ] > B ) tmp [ i ] = ++ ind ; int B_cnt = ind ; for ( int i = 1 ; i <= n ; ++ i ) if ( cnt [ i ] && cnt [ i ] <= B ) tmp [ i ] = ++ ind ; std :: fill ( cnt + 1 , cnt + 1 + n , 0 ); for ( int i = 1 ; i <= n ; ++ i ){ cor [ i ] = tmp [ cor [ i ]]; pos [ cor [ i ]]. push_back ( i ), ++ cnt [ cor [ i ]]; if ( cor [ i - 1 ] == cor [ i ]) ++ dec [ cor [ i ]]; } for ( int i = 1 ; i <= n ; ++ i ){ if ( cor [ i ] != cor [ i - 1 ] && cnt [ cor [ i - 1 ]] > B ) ++ deg [ cor [ i ]][ cor [ i - 1 ]]; if ( cor [ i ] != cor [ i + 1 ] && cnt [ cor [ i + 1 ]] > B ) ++ deg [ cor [ i ]][ cor [ i + 1 ]]; } while ( q -- ){ static int v ; std :: scanf ( \"%d\" , & v ), v = tmp [ v ]; if ( ! v ){ std :: printf ( \"%d \\n \" , a - b ); continue ; } if ( cnt [ v ] <= B ){ if ( ! vist [ v ]){ assert ( cnt [ v ] == ( int ) pos [ v ]. size ()); for ( int i = 0 ; i < cnt [ v ]; ++ i ){ int node = pos [ v ][ i ]; if ( vist [ cor [ node - 1 ]] && cor [ node - 1 ] != cor [ node ]) ++ b ; if ( vist [ cor [ node + 1 ]] && cor [ node + 1 ] != cor [ node ]) ++ b ; ++ a ; } for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] += deg [ v ][ i ]; b += dec [ v ]; } else { assert ( cnt [ v ] == ( int ) pos [ v ]. size ()); for ( int i = 0 ; i < cnt [ v ]; ++ i ){ int node = pos [ v ][ i ]; if ( vist [ cor [ node - 1 ]] && cor [ node - 1 ] != cor [ node ]) -- b ; if ( vist [ cor [ node + 1 ]] && cor [ node + 1 ] != cor [ node ]) -- b ; -- a ; } for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] -= deg [ v ][ i ]; b -= dec [ v ]; } vist [ v ] ^= 1 ; } else { if ( ! vist [ v ]){ b += dec [ v ] + adj [ v ], a += cnt [ v ]; for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] += deg [ v ][ i ]; } else { b -= dec [ v ] + adj [ v ], a -= cnt [ v ]; for ( int i = 1 ; i <= B_cnt ; ++ i ) if ( i != v ) adj [ i ] -= deg [ v ][ i ]; } vist [ v ] ^= 1 ; } std :: printf ( \"%d \\n \" , a - b ); } return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2007/#_4","text":"NOI.AC #2007 light","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2010/","text":"\u9ed1\u767d\u6c99\u6f20 \u00b6 \u9898\u610f \u00b6 \u5728\u9ed1\u767d\u6c99\u6f20\u4e2d\u6709 n n \u5e62\u5efa\u7b51\uff0c\u5206\u522b\u4f4d\u4e8e x_i x_i \uff0c\u4e14\u80fd\u591f\u5728\u5927\u98ce\u4e2d\u575a\u6301 y_i y_i \u5355\u4f4d\u65f6\u95f4\u800c\u4e0d\u5012\u584c\u3002 \u521d\u59cb\u65f6 [L,R] [L,R] \u662f\u65e0\u98ce\u533a\u3002\u968f\u7740\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u65e0\u98ce\u533a\u4f1a\u7f29\u5c0f\u3002\u65e0\u98ce\u533a\u7684\u957f\u5ea6\u4f1a\u4ee5 1 1 \u6bcf\u5355\u4f4d\u65f6\u95f4\u7684\u901f\u5ea6\u7f29\u5c0f\uff0c\u76f4\u81f3\u7f29\u81f3\u4e00\u4e2a\u5728 [L,R] [L,R] \u4e2d\u5747\u5300\u968f\u673a\u751f\u6210\u7684\u70b9 M M \u5904\u3002\u5728\u65e0\u98ce\u533a\u7f29\u5c0f\u7684\u8fc7\u7a0b\u4e2d\uff0c \\dfrac{M-L}{R-M} \\dfrac{M-L}{R-M} \u4fdd\u6301\u4e0d\u53d8\u3002 \u8bf7\u5bf9\u6bcf\u4e00\u5e62\u5efa\u7b51\uff0c\u6c42\u51fa\u5176\u6210\u4e3a\u6700\u540e\u4e00\u5e62\u5012\u584c\u7684\u5efa\u7b51\u7684\u6982\u7387\u3002 \u89e3\u6790 \u00b6 \u9996\u5148\u6211\u4eec\u53bb\u9664\u65e0\u610f\u4e49\u7684 L L \uff0c\u4ee4 x\\gets x-L, R\\gets R - L x\\gets x-L, R\\gets R - L \u3002\u5bf9\u4e8e\u7b2c i i \u5e62\u5efa\u7b51\u7269\uff0c\u5176\u80fd\u591f\u575a\u6301\u7684\u65f6\u95f4\u4e3a T_i(M)=\\begin{cases} y_i+R\\dfrac{R-x_i}{R-M}&\\text{if } M < x_i\\\\ y_i+R\\dfrac{x_i}{M}&\\text{if } M > x_i \\end{cases} T_i(M)=\\begin{cases} y_i+R\\dfrac{R-x_i}{R-M}&\\text{if } M < x_i\\\\ y_i+R\\dfrac{x_i}{M}&\\text{if } M > x_i \\end{cases} \u7531\u4e8e M<x_i M<x_i \u548c M>x_i M>x_i \u7684\u60c5\u51b5\u662f\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u8003\u8651 M<x_i M<x_i \u5373\u53ef\u3002 \u6ce8\u610f\u5230 T_i T_i \u8868\u73b0\u51fa\u7c7b\u53cd\u6bd4\u4f8b\u51fd\u6570\u7684\u5f62\u5f0f\uff0c\u5219\u6709 T_i^\\prime(M)>0 T_i^\\prime(M)>0 \u4e14 T_i^\\prime(M)>T_{i+1}^\\prime(M) T_i^\\prime(M)>T_{i+1}^\\prime(M) \u3002\u8fd9\u6837\uff0c\u53ea\u8981\u5728\u67d0\u4e2a\u70b9 M_1 M_1 \u65f6\u6709 T_{i}(M_1)>T_{i+1}(M_1) T_{i}(M_1)>T_{i+1}(M_1) \uff0c\u5219\u5bf9\u4efb\u610f M_2>M_1 M_2>M_1 \uff0c T_{i}(M_2)>T_{i+1}(M_2) T_{i}(M_2)>T_{i+1}(M_2) \u4e5f\u6210\u7acb\u3002 \u90a3\u4e48\u6211\u4eec\u6309 x_i x_i \u4ece\u5927\u5230\u5c0f\u5c06\u5efa\u7b51\u7269\u52a0\u5165\u5355\u8c03\u6808\uff0c\u5219\u5355\u8c03\u6808\u4e2d\u7684\u5efa\u7b51\u7684\u659c\u7387\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u6211\u4eec\u7528\u7c7b\u4f3c\u51b3\u7b56\u5355\u8c03\u6027\u7684\u65b9\u6cd5\u5f97\u5230\u4f7f\u6bcf\u4e2a\u5efa\u7b51\u5f00\u59cb\u6210\u4e3a\u6700\u4f18\u7684\u5efa\u7b51\u7684\u6700\u5c0f\u7684 M M \u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> #define binary_search for(int _ = 0; _ < 40; ++_) typedef long double real ; const int maxn = 2e5 + 19 ; const real eps = 1e-6 ; struct node { real l , r ; int id ; }; int T , n , L , R , x [ maxn ], y [ maxn ]; std :: vector < node > m_less_than_x , m_greater_than_x ; std :: vector < std :: pair < real , int > > tmp ; std :: vector < real > all ; std :: vector < std :: pair < int , int > > max ; real begin [ maxn ], ans [ maxn ]; int st [ maxn ], top ; inline real f_1 ( int i , real m ){ return y [ i ] + R * real ( R - x [ i ]) / real ( R - m ); } inline real f_2 ( int i , real m ){ return y [ i ] + R * real ( x [ i ]) / real ( m ); } real bound_1 ( int i , int j ){ real l = 0 , r = x [ i ]; binary_search { real mid = ( l + r ) / 2 ; if ( f_1 ( i , mid ) >= f_1 ( j , mid )) r = mid ; else l = mid ; } return l ; } real bound_2 ( int i , int j ){ real l = x [ i ], r = R ; binary_search { real mid = ( l + r ) / 2 ; if ( f_2 ( i , mid ) >= f_2 ( j , mid )) l = mid ; else r = mid ; } return l ; } inline bool cmp ( const real & x , const real & y ){ return std :: fabs ( x - y ) <= eps ; } inline bool cmpl ( const std :: pair < real , int > & x , const std :: pair < real , int > & y ){ return std :: fabs ( x . first - y . first ) < eps ? x . second > y . second : x . first < y . first ; } inline bool cmpg ( const std :: pair < real , int > & x , const std :: pair < real , int > & y ){ return std :: fabs ( x . first - y . first ) < eps ? x . second < y . second : x . first > y . first ; } int main (){ std :: scanf ( \"%d%d%d%d\" , & T , & n , & L , & R ), R -= L ; for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , x + i ), x [ i ] -= L ; for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , y + i ); begin [ n ] = 0 , st [ top = 1 ] = n ; for ( int i = n - 1 ; i >= 1 ; -- i ){ while ( top > 1 && begin [ st [ top ]] >= x [ i ]) -- top ; while ( top && bound_1 ( i , st [ top ]) <= begin [ st [ top ]] + eps ) begin [ st [ top -- ]] = x [ i ]; if ( top ) begin [ i ] = bound_1 ( i , st [ top ]), st [ ++ top ] = i ; else begin [ i ] = 0 , st [ ++ top ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) if ( std :: fabs ( begin [ i ] - x [ i ]) > eps ) tmp . push_back ( std :: make_pair ( begin [ i ], i )), tmp . push_back ( std :: make_pair ( x [ i ], 0 )); std :: sort ( tmp . begin (), tmp . end (), cmpl ); top = 0 ; for ( int i = 0 ; i < ( int ) tmp . size (); ++ i ){ if ( tmp [ i ]. second ) st [ ++ top ] = tmp [ i ]. second ; while ( top && x [ st [ top ]] < tmp [ i ]. first + eps ) -- top ; if ( top && i + 1 < ( int ) tmp . size ()) m_less_than_x . push_back (( node ){ tmp [ i ]. first , tmp [ i + 1 ]. first , st [ top ]}); } tmp . clear (); begin [ 1 ] = R , st [ top = 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ){ while ( top > 1 && begin [ st [ top ]] <= x [ i ]) -- top ; while ( top && bound_2 ( i , st [ top ]) >= begin [ st [ top ]] - eps ) begin [ st [ top -- ]] = x [ i ]; if ( top ) begin [ i ] = bound_2 ( i , st [ top ]), st [ ++ top ] = i ; else begin [ i ] = R , st [ ++ top ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) if ( std :: fabs ( begin [ i ] - x [ i ]) > eps ) tmp . push_back ( std :: make_pair ( begin [ i ], i )), tmp . push_back ( std :: make_pair ( x [ i ], 0 )); std :: sort ( tmp . begin (), tmp . end (), cmpg ); top = 0 ; for ( int i = 0 ; i < ( int ) tmp . size (); ++ i ){ if ( tmp [ i ]. second ) st [ ++ top ] = tmp [ i ]. second ; while ( top && x [ st [ top ]] > tmp [ i ]. first - eps ) -- top ; if ( top && i + 1 < ( int ) tmp . size ()) m_greater_than_x . push_back (( node ){ tmp [ i + 1 ]. first , tmp [ i ]. first , st [ top ]}); } for ( int i = 0 ; i < ( int ) m_less_than_x . size (); ++ i ) all . push_back ( m_less_than_x [ i ]. l ), all . push_back ( m_less_than_x [ i ]. r ); for ( int i = 0 ; i < ( int ) m_greater_than_x . size (); ++ i ) all . push_back ( m_greater_than_x [ i ]. l ), all . push_back ( m_greater_than_x [ i ]. r ); std :: sort ( all . begin (), all . end ()); all . resize ( std :: unique ( all . begin (), all . end (), cmp ) - all . begin ()); max . resize ( all . size ()); for ( int i = 0 ; i < ( int ) m_less_than_x . size (); ++ i ){ int l = std :: lower_bound ( all . begin (), all . end (), m_less_than_x [ i ]. l - eps * 2 ) - all . begin (), r = std :: lower_bound ( all . begin (), all . end (), m_less_than_x [ i ]. r - eps * 2 ) - all . begin (); for ( int j = l ; j < r ; ++ j ) max [ j ]. first = m_less_than_x [ i ]. id ; } for ( int i = 0 ; i < ( int ) m_greater_than_x . size (); ++ i ){ int l = std :: lower_bound ( all . begin (), all . end (), m_greater_than_x [ i ]. l - eps * 2 ) - all . begin (), r = std :: lower_bound ( all . begin (), all . end (), m_greater_than_x [ i ]. r - eps * 2 ) - all . begin (); for ( int j = l ; j < r ; ++ j ) max [ j ]. second = m_greater_than_x [ i ]. id ; } for ( int i = 0 ; i + 1 < ( int ) all . size (); ++ i ) if ( max [ i ]. first || max [ i ]. second ){ if ( ! max [ i ]. first || ! max [ i ]. second ){ ans [ max [ i ]. first + max [ i ]. second ] += all [ i + 1 ] - all [ i ]; continue ; } real l = all [ i ], r = all [ i + 1 ]; binary_search { real mid = ( l + r ) / 2 ; if ( f_1 ( max [ i ]. first , mid ) >= f_2 ( max [ i ]. second , mid )) r = mid ; else l = mid ; } ans [ max [ i ]. first ] += all [ i + 1 ] - l ; ans [ max [ i ]. second ] += l - all [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) std :: printf ( \"%.10Lf \\n \" , ans [ i ] / R ); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2010 \u9ed1\u767d\u6c99\u6f20","title":"\u9ed1\u767d\u6c99\u6f20"},{"location":"problem/2021/march/noi2010/#_1","text":"","title":"\u9ed1\u767d\u6c99\u6f20"},{"location":"problem/2021/march/noi2010/#_2","text":"\u5728\u9ed1\u767d\u6c99\u6f20\u4e2d\u6709 n n \u5e62\u5efa\u7b51\uff0c\u5206\u522b\u4f4d\u4e8e x_i x_i \uff0c\u4e14\u80fd\u591f\u5728\u5927\u98ce\u4e2d\u575a\u6301 y_i y_i \u5355\u4f4d\u65f6\u95f4\u800c\u4e0d\u5012\u584c\u3002 \u521d\u59cb\u65f6 [L,R] [L,R] \u662f\u65e0\u98ce\u533a\u3002\u968f\u7740\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u65e0\u98ce\u533a\u4f1a\u7f29\u5c0f\u3002\u65e0\u98ce\u533a\u7684\u957f\u5ea6\u4f1a\u4ee5 1 1 \u6bcf\u5355\u4f4d\u65f6\u95f4\u7684\u901f\u5ea6\u7f29\u5c0f\uff0c\u76f4\u81f3\u7f29\u81f3\u4e00\u4e2a\u5728 [L,R] [L,R] \u4e2d\u5747\u5300\u968f\u673a\u751f\u6210\u7684\u70b9 M M \u5904\u3002\u5728\u65e0\u98ce\u533a\u7f29\u5c0f\u7684\u8fc7\u7a0b\u4e2d\uff0c \\dfrac{M-L}{R-M} \\dfrac{M-L}{R-M} \u4fdd\u6301\u4e0d\u53d8\u3002 \u8bf7\u5bf9\u6bcf\u4e00\u5e62\u5efa\u7b51\uff0c\u6c42\u51fa\u5176\u6210\u4e3a\u6700\u540e\u4e00\u5e62\u5012\u584c\u7684\u5efa\u7b51\u7684\u6982\u7387\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2010/#_3","text":"\u9996\u5148\u6211\u4eec\u53bb\u9664\u65e0\u610f\u4e49\u7684 L L \uff0c\u4ee4 x\\gets x-L, R\\gets R - L x\\gets x-L, R\\gets R - L \u3002\u5bf9\u4e8e\u7b2c i i \u5e62\u5efa\u7b51\u7269\uff0c\u5176\u80fd\u591f\u575a\u6301\u7684\u65f6\u95f4\u4e3a T_i(M)=\\begin{cases} y_i+R\\dfrac{R-x_i}{R-M}&\\text{if } M < x_i\\\\ y_i+R\\dfrac{x_i}{M}&\\text{if } M > x_i \\end{cases} T_i(M)=\\begin{cases} y_i+R\\dfrac{R-x_i}{R-M}&\\text{if } M < x_i\\\\ y_i+R\\dfrac{x_i}{M}&\\text{if } M > x_i \\end{cases} \u7531\u4e8e M<x_i M<x_i \u548c M>x_i M>x_i \u7684\u60c5\u51b5\u662f\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u8003\u8651 M<x_i M<x_i \u5373\u53ef\u3002 \u6ce8\u610f\u5230 T_i T_i \u8868\u73b0\u51fa\u7c7b\u53cd\u6bd4\u4f8b\u51fd\u6570\u7684\u5f62\u5f0f\uff0c\u5219\u6709 T_i^\\prime(M)>0 T_i^\\prime(M)>0 \u4e14 T_i^\\prime(M)>T_{i+1}^\\prime(M) T_i^\\prime(M)>T_{i+1}^\\prime(M) \u3002\u8fd9\u6837\uff0c\u53ea\u8981\u5728\u67d0\u4e2a\u70b9 M_1 M_1 \u65f6\u6709 T_{i}(M_1)>T_{i+1}(M_1) T_{i}(M_1)>T_{i+1}(M_1) \uff0c\u5219\u5bf9\u4efb\u610f M_2>M_1 M_2>M_1 \uff0c T_{i}(M_2)>T_{i+1}(M_2) T_{i}(M_2)>T_{i+1}(M_2) \u4e5f\u6210\u7acb\u3002 \u90a3\u4e48\u6211\u4eec\u6309 x_i x_i \u4ece\u5927\u5230\u5c0f\u5c06\u5efa\u7b51\u7269\u52a0\u5165\u5355\u8c03\u6808\uff0c\u5219\u5355\u8c03\u6808\u4e2d\u7684\u5efa\u7b51\u7684\u659c\u7387\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u6211\u4eec\u7528\u7c7b\u4f3c\u51b3\u7b56\u5355\u8c03\u6027\u7684\u65b9\u6cd5\u5f97\u5230\u4f7f\u6bcf\u4e2a\u5efa\u7b51\u5f00\u59cb\u6210\u4e3a\u6700\u4f18\u7684\u5efa\u7b51\u7684\u6700\u5c0f\u7684 M M \u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2010/#_4","text":"#include <bits/stdc++.h> #define binary_search for(int _ = 0; _ < 40; ++_) typedef long double real ; const int maxn = 2e5 + 19 ; const real eps = 1e-6 ; struct node { real l , r ; int id ; }; int T , n , L , R , x [ maxn ], y [ maxn ]; std :: vector < node > m_less_than_x , m_greater_than_x ; std :: vector < std :: pair < real , int > > tmp ; std :: vector < real > all ; std :: vector < std :: pair < int , int > > max ; real begin [ maxn ], ans [ maxn ]; int st [ maxn ], top ; inline real f_1 ( int i , real m ){ return y [ i ] + R * real ( R - x [ i ]) / real ( R - m ); } inline real f_2 ( int i , real m ){ return y [ i ] + R * real ( x [ i ]) / real ( m ); } real bound_1 ( int i , int j ){ real l = 0 , r = x [ i ]; binary_search { real mid = ( l + r ) / 2 ; if ( f_1 ( i , mid ) >= f_1 ( j , mid )) r = mid ; else l = mid ; } return l ; } real bound_2 ( int i , int j ){ real l = x [ i ], r = R ; binary_search { real mid = ( l + r ) / 2 ; if ( f_2 ( i , mid ) >= f_2 ( j , mid )) l = mid ; else r = mid ; } return l ; } inline bool cmp ( const real & x , const real & y ){ return std :: fabs ( x - y ) <= eps ; } inline bool cmpl ( const std :: pair < real , int > & x , const std :: pair < real , int > & y ){ return std :: fabs ( x . first - y . first ) < eps ? x . second > y . second : x . first < y . first ; } inline bool cmpg ( const std :: pair < real , int > & x , const std :: pair < real , int > & y ){ return std :: fabs ( x . first - y . first ) < eps ? x . second < y . second : x . first > y . first ; } int main (){ std :: scanf ( \"%d%d%d%d\" , & T , & n , & L , & R ), R -= L ; for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , x + i ), x [ i ] -= L ; for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , y + i ); begin [ n ] = 0 , st [ top = 1 ] = n ; for ( int i = n - 1 ; i >= 1 ; -- i ){ while ( top > 1 && begin [ st [ top ]] >= x [ i ]) -- top ; while ( top && bound_1 ( i , st [ top ]) <= begin [ st [ top ]] + eps ) begin [ st [ top -- ]] = x [ i ]; if ( top ) begin [ i ] = bound_1 ( i , st [ top ]), st [ ++ top ] = i ; else begin [ i ] = 0 , st [ ++ top ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) if ( std :: fabs ( begin [ i ] - x [ i ]) > eps ) tmp . push_back ( std :: make_pair ( begin [ i ], i )), tmp . push_back ( std :: make_pair ( x [ i ], 0 )); std :: sort ( tmp . begin (), tmp . end (), cmpl ); top = 0 ; for ( int i = 0 ; i < ( int ) tmp . size (); ++ i ){ if ( tmp [ i ]. second ) st [ ++ top ] = tmp [ i ]. second ; while ( top && x [ st [ top ]] < tmp [ i ]. first + eps ) -- top ; if ( top && i + 1 < ( int ) tmp . size ()) m_less_than_x . push_back (( node ){ tmp [ i ]. first , tmp [ i + 1 ]. first , st [ top ]}); } tmp . clear (); begin [ 1 ] = R , st [ top = 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ){ while ( top > 1 && begin [ st [ top ]] <= x [ i ]) -- top ; while ( top && bound_2 ( i , st [ top ]) >= begin [ st [ top ]] - eps ) begin [ st [ top -- ]] = x [ i ]; if ( top ) begin [ i ] = bound_2 ( i , st [ top ]), st [ ++ top ] = i ; else begin [ i ] = R , st [ ++ top ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) if ( std :: fabs ( begin [ i ] - x [ i ]) > eps ) tmp . push_back ( std :: make_pair ( begin [ i ], i )), tmp . push_back ( std :: make_pair ( x [ i ], 0 )); std :: sort ( tmp . begin (), tmp . end (), cmpg ); top = 0 ; for ( int i = 0 ; i < ( int ) tmp . size (); ++ i ){ if ( tmp [ i ]. second ) st [ ++ top ] = tmp [ i ]. second ; while ( top && x [ st [ top ]] > tmp [ i ]. first - eps ) -- top ; if ( top && i + 1 < ( int ) tmp . size ()) m_greater_than_x . push_back (( node ){ tmp [ i + 1 ]. first , tmp [ i ]. first , st [ top ]}); } for ( int i = 0 ; i < ( int ) m_less_than_x . size (); ++ i ) all . push_back ( m_less_than_x [ i ]. l ), all . push_back ( m_less_than_x [ i ]. r ); for ( int i = 0 ; i < ( int ) m_greater_than_x . size (); ++ i ) all . push_back ( m_greater_than_x [ i ]. l ), all . push_back ( m_greater_than_x [ i ]. r ); std :: sort ( all . begin (), all . end ()); all . resize ( std :: unique ( all . begin (), all . end (), cmp ) - all . begin ()); max . resize ( all . size ()); for ( int i = 0 ; i < ( int ) m_less_than_x . size (); ++ i ){ int l = std :: lower_bound ( all . begin (), all . end (), m_less_than_x [ i ]. l - eps * 2 ) - all . begin (), r = std :: lower_bound ( all . begin (), all . end (), m_less_than_x [ i ]. r - eps * 2 ) - all . begin (); for ( int j = l ; j < r ; ++ j ) max [ j ]. first = m_less_than_x [ i ]. id ; } for ( int i = 0 ; i < ( int ) m_greater_than_x . size (); ++ i ){ int l = std :: lower_bound ( all . begin (), all . end (), m_greater_than_x [ i ]. l - eps * 2 ) - all . begin (), r = std :: lower_bound ( all . begin (), all . end (), m_greater_than_x [ i ]. r - eps * 2 ) - all . begin (); for ( int j = l ; j < r ; ++ j ) max [ j ]. second = m_greater_than_x [ i ]. id ; } for ( int i = 0 ; i + 1 < ( int ) all . size (); ++ i ) if ( max [ i ]. first || max [ i ]. second ){ if ( ! max [ i ]. first || ! max [ i ]. second ){ ans [ max [ i ]. first + max [ i ]. second ] += all [ i + 1 ] - all [ i ]; continue ; } real l = all [ i ], r = all [ i + 1 ]; binary_search { real mid = ( l + r ) / 2 ; if ( f_1 ( max [ i ]. first , mid ) >= f_2 ( max [ i ]. second , mid )) r = mid ; else l = mid ; } ans [ max [ i ]. first ] += all [ i + 1 ] - l ; ans [ max [ i ]. second ] += l - all [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) std :: printf ( \"%.10Lf \\n \" , ans [ i ] / R ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2010/#_5","text":"NOI.AC #2010 \u9ed1\u767d\u6c99\u6f20","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2011/","text":"\u8352\u91ce\u805a\u9910 \u00b6 \u9898\u610f \u00b6 \u6709 2n 2n \u4f4d\u9e1f\u4eba\u53c2\u4e0e\u805a\u9910\uff0c\u5176\u4e2d n n \u4f4d\u662f\u96c4\u6027\u9e1f\u4eba\uff0c n n \u4f4d\u662f\u96cc\u6027\u9e1f\u4eba\u3002\u7b2c i i \u4f4d\u96c4\u6027\u9e1f\u4eba\u548c\u7b2c j j \u4f4d\u96cc\u6027\u9e1f\u4eba\u7684\u4eb2\u548c\u5ea6\u662f a_{i,j} a_{i,j} \u3002 \u795e\u901f\u9e1f\u4eba\u8981\u4e3a\u8fd9 2n 2n \u4f4d\u9e1f\u4eba\u5206\u914d\u7ecf\u8d39\uff0c\u6ee1\u8db3\u4efb\u610f\u4e00\u5bf9\u96cc\u96c4\u9e1f\u4eba\u88ab\u5206\u914d\u7684\u7ecf\u8d39\u603b\u548c\u5927\u4e8e\u5b83\u4eec\u7684\u4eb2\u548c\u5ea6\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u795e\u901f\u9e1f\u4eba\u8fd8\u53ef\u4ee5\u9009\u62e9\u5728\u97f3\u4e50\u8bbe\u5907\u4e0a\u7684\u5f00\u9500 S S \uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u9e1f\u4eba\u5bf9\u7ecf\u8d39\u7684\u8981\u6c42\u90fd\u964d\u4f4e \\dfrac{S}{C} \\dfrac{S}{C} \u3002 \u5bf9\u591a\u4e2a\u4e0d\u540c\u7684 C C \uff0c\u6c42\u51fa\u5206\u914d\u7684\u6700\u5c11\u7ecf\u8d39\u3002 \u89e3\u6790 \u00b6 \u5199\u51fa\u9898\u76ee\u7684\u7ebf\u6027\u89c4\u5212\u5f62\u5f0f \\min f = \\sum_{i=1}^nx_i+\\sum_{i=1}^ny_i+S\\\\ s.t.\\forall i, j:x_i+y_j+\\dfrac{S}{C}\\ge a_{i,j} \\min f = \\sum_{i=1}^nx_i+\\sum_{i=1}^ny_i+S\\\\ s.t.\\forall i, j:x_i+y_j+\\dfrac{S}{C}\\ge a_{i,j} \u5b83\u7684\u5bf9\u5076\u7ebf\u6027\u89c4\u5212\u662f \\max f^\\prime=\\sum_{i=1}^n\\sum_{j=1}^nx_{i,j}a_{i,j}\\\\ s.t.\\begin{cases} \\forall i:\\sum\\limits_{j=1}^n x_{i,j}\\le 1\\\\ \\forall i:\\sum\\limits_{j=1}^n x_{j,i}\\le 1\\\\ \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^mx_{i,j}\\le C \\end{cases} \\max f^\\prime=\\sum_{i=1}^n\\sum_{j=1}^nx_{i,j}a_{i,j}\\\\ s.t.\\begin{cases} \\forall i:\\sum\\limits_{j=1}^n x_{i,j}\\le 1\\\\ \\forall i:\\sum\\limits_{j=1}^n x_{j,i}\\le 1\\\\ \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^mx_{i,j}\\le C \\end{cases} \u8fd9\u4e00\u5bf9\u5bf9\u5076\u7ebf\u6027\u89c4\u5212\u6b63\u662f KM \u7b97\u6cd5\u4e2d\u9876\u6807\u548c\u76f8\u7b49\u5b50\u56fe\u7684\u5173\u7cfb\uff01 \u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6b63\u662f\u4e8c\u5206\u56fe\u9650\u5236\u5339\u914d\u6570\u4e3a C C \u7684\u6700\u5927\u6743\u5339\u914d\u3002\u7531\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u5bb9\u91cf\u4e3a\u6574\u6570\u7684\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u95ee\u9898\uff0c\u5b83\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u89e3\u4e3a\u6574\u6570\u89e3 (\u9898\u9762\u4e2d\u6240\u8c13\u4fdd\u8bc1\u7b54\u6848\u6700\u540e\u4e00\u4f4d\u4e0d\u662f 4 4 \u6216 5 5 \u5b9e\u9645\u4e0a\u662f\u5728\u8499\u4eba)\u3002 \u4f7f\u7528 KM \u7b97\u6cd5\u5373\u53ef\u5728 O(n^3) O(n^3) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e2 + 19 ; int n , q ; namespace km { int q [ maxn ], h , t ; int w [ maxn ][ maxn ], mx [ maxn ], my [ maxn ], pre [ maxn ], sla [ maxn ], lx [ maxn ], ly [ maxn ]; bool vist_x [ maxn ], vist_y [ maxn ]; bool check ( int node ){ vist_y [ node ] = true ; if ( my [ node ]){ q [ ++ t ] = my [ node ], vist_x [ my [ node ]] = true ; return false ; } while ( node ){ my [ node ] = pre [ node ]; std :: swap ( mx [ pre [ node ]], node ); } return true ; } void bfs ( void ){ std :: fill ( vist_x + 1 , vist_x + 1 + n , false ); std :: fill ( vist_y + 1 , vist_y + 1 + n , false ); std :: fill ( sla + 1 , sla + 1 + n , 2e9 ); h = 1 , t = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! mx [ i ]) q [ ++ t ] = i , vist_x [ i ] = true ; while ( true ){ while ( h <= t ){ int node = q [ h ++ ]; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist_y [ i ]){ int d = lx [ node ] + ly [ i ] - w [ node ][ i ]; if ( d <= sla [ i ]){ pre [ i ] = node ; if ( d ) sla [ i ] = d ; else if ( check ( i )) return ; } } } int a = 2e9 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist_y [ i ]) a = std :: min ( a , sla [ i ]); for ( int i = 1 ; i <= n ; ++ i ){ if ( vist_x [ i ]) lx [ i ] -= a ; if ( vist_y [ i ]) ly [ i ] += a ; else sla [ i ] -= a ; } for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist_y [ i ] && ! sla [ i ] && check ( i )) return ; } } } ll ans [ maxn ]; int T ; int main (){ std :: scanf ( \"%d\" , & T ); std :: scanf ( \"%d%d\" , & n , & q ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) std :: scanf ( \"%d\" , km :: w [ i ] + j ); std :: fill ( km :: lx + 1 , km :: lx + n + 1 , 1e9 ); for ( int i = 1 ; i <= n ; ++ i ){ km :: bfs (); for ( int j = 1 ; j <= n ; ++ j ) if ( km :: mx [ j ]) ans [ i ] += km :: w [ j ][ km :: mx [ j ]]; } while ( q -- ){ static int c ; std :: scanf ( \"%d\" , & c ); std :: printf ( \"%lld.0 \\n \" , ans [ std :: min ( n , c )]); } return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2011 \u8352\u91ce\u805a\u9910","title":"\u8352\u91ce\u805a\u9910"},{"location":"problem/2021/march/noi2011/#_1","text":"","title":"\u8352\u91ce\u805a\u9910"},{"location":"problem/2021/march/noi2011/#_2","text":"\u6709 2n 2n \u4f4d\u9e1f\u4eba\u53c2\u4e0e\u805a\u9910\uff0c\u5176\u4e2d n n \u4f4d\u662f\u96c4\u6027\u9e1f\u4eba\uff0c n n \u4f4d\u662f\u96cc\u6027\u9e1f\u4eba\u3002\u7b2c i i \u4f4d\u96c4\u6027\u9e1f\u4eba\u548c\u7b2c j j \u4f4d\u96cc\u6027\u9e1f\u4eba\u7684\u4eb2\u548c\u5ea6\u662f a_{i,j} a_{i,j} \u3002 \u795e\u901f\u9e1f\u4eba\u8981\u4e3a\u8fd9 2n 2n \u4f4d\u9e1f\u4eba\u5206\u914d\u7ecf\u8d39\uff0c\u6ee1\u8db3\u4efb\u610f\u4e00\u5bf9\u96cc\u96c4\u9e1f\u4eba\u88ab\u5206\u914d\u7684\u7ecf\u8d39\u603b\u548c\u5927\u4e8e\u5b83\u4eec\u7684\u4eb2\u548c\u5ea6\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u795e\u901f\u9e1f\u4eba\u8fd8\u53ef\u4ee5\u9009\u62e9\u5728\u97f3\u4e50\u8bbe\u5907\u4e0a\u7684\u5f00\u9500 S S \uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u9e1f\u4eba\u5bf9\u7ecf\u8d39\u7684\u8981\u6c42\u90fd\u964d\u4f4e \\dfrac{S}{C} \\dfrac{S}{C} \u3002 \u5bf9\u591a\u4e2a\u4e0d\u540c\u7684 C C \uff0c\u6c42\u51fa\u5206\u914d\u7684\u6700\u5c11\u7ecf\u8d39\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2011/#_3","text":"\u5199\u51fa\u9898\u76ee\u7684\u7ebf\u6027\u89c4\u5212\u5f62\u5f0f \\min f = \\sum_{i=1}^nx_i+\\sum_{i=1}^ny_i+S\\\\ s.t.\\forall i, j:x_i+y_j+\\dfrac{S}{C}\\ge a_{i,j} \\min f = \\sum_{i=1}^nx_i+\\sum_{i=1}^ny_i+S\\\\ s.t.\\forall i, j:x_i+y_j+\\dfrac{S}{C}\\ge a_{i,j} \u5b83\u7684\u5bf9\u5076\u7ebf\u6027\u89c4\u5212\u662f \\max f^\\prime=\\sum_{i=1}^n\\sum_{j=1}^nx_{i,j}a_{i,j}\\\\ s.t.\\begin{cases} \\forall i:\\sum\\limits_{j=1}^n x_{i,j}\\le 1\\\\ \\forall i:\\sum\\limits_{j=1}^n x_{j,i}\\le 1\\\\ \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^mx_{i,j}\\le C \\end{cases} \\max f^\\prime=\\sum_{i=1}^n\\sum_{j=1}^nx_{i,j}a_{i,j}\\\\ s.t.\\begin{cases} \\forall i:\\sum\\limits_{j=1}^n x_{i,j}\\le 1\\\\ \\forall i:\\sum\\limits_{j=1}^n x_{j,i}\\le 1\\\\ \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^mx_{i,j}\\le C \\end{cases} \u8fd9\u4e00\u5bf9\u5bf9\u5076\u7ebf\u6027\u89c4\u5212\u6b63\u662f KM \u7b97\u6cd5\u4e2d\u9876\u6807\u548c\u76f8\u7b49\u5b50\u56fe\u7684\u5173\u7cfb\uff01 \u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6b63\u662f\u4e8c\u5206\u56fe\u9650\u5236\u5339\u914d\u6570\u4e3a C C \u7684\u6700\u5927\u6743\u5339\u914d\u3002\u7531\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u89c6\u4f5c\u4e00\u4e2a\u5bb9\u91cf\u4e3a\u6574\u6570\u7684\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u95ee\u9898\uff0c\u5b83\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u89e3\u4e3a\u6574\u6570\u89e3 (\u9898\u9762\u4e2d\u6240\u8c13\u4fdd\u8bc1\u7b54\u6848\u6700\u540e\u4e00\u4f4d\u4e0d\u662f 4 4 \u6216 5 5 \u5b9e\u9645\u4e0a\u662f\u5728\u8499\u4eba)\u3002 \u4f7f\u7528 KM \u7b97\u6cd5\u5373\u53ef\u5728 O(n^3) O(n^3) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2011/#_4","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e2 + 19 ; int n , q ; namespace km { int q [ maxn ], h , t ; int w [ maxn ][ maxn ], mx [ maxn ], my [ maxn ], pre [ maxn ], sla [ maxn ], lx [ maxn ], ly [ maxn ]; bool vist_x [ maxn ], vist_y [ maxn ]; bool check ( int node ){ vist_y [ node ] = true ; if ( my [ node ]){ q [ ++ t ] = my [ node ], vist_x [ my [ node ]] = true ; return false ; } while ( node ){ my [ node ] = pre [ node ]; std :: swap ( mx [ pre [ node ]], node ); } return true ; } void bfs ( void ){ std :: fill ( vist_x + 1 , vist_x + 1 + n , false ); std :: fill ( vist_y + 1 , vist_y + 1 + n , false ); std :: fill ( sla + 1 , sla + 1 + n , 2e9 ); h = 1 , t = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! mx [ i ]) q [ ++ t ] = i , vist_x [ i ] = true ; while ( true ){ while ( h <= t ){ int node = q [ h ++ ]; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist_y [ i ]){ int d = lx [ node ] + ly [ i ] - w [ node ][ i ]; if ( d <= sla [ i ]){ pre [ i ] = node ; if ( d ) sla [ i ] = d ; else if ( check ( i )) return ; } } } int a = 2e9 ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist_y [ i ]) a = std :: min ( a , sla [ i ]); for ( int i = 1 ; i <= n ; ++ i ){ if ( vist_x [ i ]) lx [ i ] -= a ; if ( vist_y [ i ]) ly [ i ] += a ; else sla [ i ] -= a ; } for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist_y [ i ] && ! sla [ i ] && check ( i )) return ; } } } ll ans [ maxn ]; int T ; int main (){ std :: scanf ( \"%d\" , & T ); std :: scanf ( \"%d%d\" , & n , & q ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) std :: scanf ( \"%d\" , km :: w [ i ] + j ); std :: fill ( km :: lx + 1 , km :: lx + n + 1 , 1e9 ); for ( int i = 1 ; i <= n ; ++ i ){ km :: bfs (); for ( int j = 1 ; j <= n ; ++ j ) if ( km :: mx [ j ]) ans [ i ] += km :: w [ j ][ km :: mx [ j ]]; } while ( q -- ){ static int c ; std :: scanf ( \"%d\" , & c ); std :: printf ( \"%lld.0 \\n \" , ans [ std :: min ( n , c )]); } return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2011/#_5","text":"NOI.AC #2011 \u8352\u91ce\u805a\u9910","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2013/","text":"\u9501 \u00b6 \u9898\u610f \u00b6 \u623f\u5b50\u5185\u4e00\u5171\u6709 n n \u4f4d\u5c45\u6c11\uff0c\u623f\u95e8\u4e0a\u6709 k k \u79cd\u9501\uff0c\u6bcf\u79cd\u9501\u90fd\u5bf9\u5e94\u4e00\u79cd\u94a5\u5319\u3002\u6bcf\u79cd\u94a5\u5319\u90fd\u6709\u8db3\u591f\u591a\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u4efb\u610f\u5206\u914d\u7ed9\u5c45\u6c11\u3002\u4e00\u4e2a\u5c45\u6c11\u65e2\u53ef\u4ee5\u6ca1\u6709\u94a5\u5319\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u591a\u628a\u94a5\u5319\u3002 \u4e00\u4e2a\u6751\u6c11\u7684\u96c6\u5408\u80fd\u591f\u5f00\u9501\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6751\u6c11\u638c\u63e1\u4e86 k k \u79cd\u94a5\u5319\u4e2d\u7684\u6bcf\u4e00\u79cd\u3002 \u6bcf\u4e2a\u5c45\u6c11\u6709\u4e00\u4e2a\u91cd\u8981\u5ea6 a_i a_i \uff0c\u4e00\u4e2a\u6751\u6c11\u7684\u96c6\u5408\u662f\u91cd\u8981\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u4e2d\u6240\u6709\u6751\u6c11\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8e m m \u3002\u8bf7\u4f60\u6c42\u51fa k k \u7684\u6700\u5c0f\u503c\uff0c\u4f7f\u5f97\u5b58\u5728\u4e00\u79cd\u5206\u914d\u94a5\u5319\u7684\u65b9\u6848\uff0c\u6ee1\u8db3\u4efb\u4f55\u4e00\u4e2a\u91cd\u8981\u7684\u6751\u6c11\u96c6\u5408\u80fd\u591f\u5f00\u9501\uff0c\u4efb\u4f55\u4e00\u4e2a\u4e0d\u91cd\u8981\u7684\u6751\u6c11\u96c6\u5408\u4e0d\u80fd\u5f00\u9501\u3002 \u89e3\u6790 \u00b6 \u81ea\u7136\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u7684\u96c6\u5408\u90fd\u65b0\u589e\u4e00\u79cd\u94a5\u5319\uff0c\u5c06\u5176\u5206\u53d1\u7ed9\u8fd9\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\u7684\u8865\u96c6\u3002\u8fd9\u6837\u4e00\u5b9a\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u201c\u4e0d\u91cd\u8981\u201d\u7684\u96c6\u5408\u90fd\u65e0\u6cd5\u6253\u5f00\u623f\u95e8\uff1b\u7531\u4e8e\u4efb\u4f55\u201c\u91cd\u8981\u201d\u96c6\u5408\u4e00\u5b9a\u4e0d\u542b\u4e8e\u4efb\u4f55\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\uff0c\u5219\u5176\u4e5f\u4e00\u5b9a\u542b\u6709\u6240\u6709\u94a5\u5319\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\u662f\u53e6\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\u7684\u5b50\u96c6\uff0c\u5219\u6ca1\u5fc5\u8981\u4e3a\u5176\u65b0\u589e\u4e00\u79cd\u94a5\u5319\uff0c\u56e0\u4e3a\u5b83\u7684\u94a5\u5319\u4e0d\u662f\u5168\u96c6\u7684\u9650\u5236\u5df2\u7ecf\u7531\u5b83\u7684\u8d85\u96c6\u6ee1\u8db3\u4e86\u3002 \u8fd9\u79cd\u6784\u9020\u65b9\u6cd5\u663e\u7136\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u5426\u662f\u6700\u4f18\u7684\uff1f\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u6bd4\u8f83\u7384\u5b66\u7684\u8bc1\u660e\uff1a \u8bc1\u660e \u8bbe\u6309\u7167\u4ee5\u4e0a\u65b9\u6cd5\u9700\u8981 x x \u79cd\u94a5\u5319\uff0c\u4e5f\u5c31\u662f\u8bf4\u6781\u5927\u4e0d\u91cd\u8981\u96c6\u5408\u7684\u6570\u91cf\u4e3a x x \u3002\u82e5\u5b58\u5728\u4e00\u79cd\u66f4\u4f18\u7684\u65b9\u6cd5\u4f7f\u7528\u5c11\u4e8e x x \u79cd\u94a5\u5319\uff0c\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u5fc5\u7136\u5b58\u5728\u4e24\u4e2a\u6781\u5927\u4e0d\u91cd\u8981\u96c6\u5408\u90fd\u4e0d\u542b\u540c\u4e00\u79cd\u94a5\u5319\uff0c\u5b83\u4eec\u7684\u5e76\u96c6\u4e0d\u80fd\u5f00\u95e8\u3002\u6545\u4e0d\u5b58\u5728\u4f7f\u7528\u5c11\u4e8e x x \u79cd\u94a5\u5319\u7684\u5206\u914d\u65b9\u6848\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> int n , m , a [ 20 ]; long long int sum [ 1 << 20 ]; bool vist [ 1 << 20 ]; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; ++ i ) std :: scanf ( \"%d\" , a + i ); for ( int s = 1 ; s < ( 1 << n ); ++ s ){ for ( int i = 0 ; i < n ; ++ i ) if ( s & ( 1 << i )){ sum [ s ] = sum [ s ^ ( 1 << i )] + a [ i ]; break ; } if ( sum [ s ] < m ) for ( int i = 0 ; i < n ; ++ i ) if ( s & ( 1 << i )) vist [ s ^ ( 1 << i )] = true ; } int ans = 0 ; for ( int s = 1 ; s < ( 1 << n ); ++ s ) //s=0? whether emptyset is taken into consideration is not defined. if ( sum [ s ] < m && ! vist [ s ]) ++ ans ; std :: printf ( \"%d \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2013 \u9501","title":"\u9501"},{"location":"problem/2021/march/noi2013/#_1","text":"","title":"\u9501"},{"location":"problem/2021/march/noi2013/#_2","text":"\u623f\u5b50\u5185\u4e00\u5171\u6709 n n \u4f4d\u5c45\u6c11\uff0c\u623f\u95e8\u4e0a\u6709 k k \u79cd\u9501\uff0c\u6bcf\u79cd\u9501\u90fd\u5bf9\u5e94\u4e00\u79cd\u94a5\u5319\u3002\u6bcf\u79cd\u94a5\u5319\u90fd\u6709\u8db3\u591f\u591a\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u4efb\u610f\u5206\u914d\u7ed9\u5c45\u6c11\u3002\u4e00\u4e2a\u5c45\u6c11\u65e2\u53ef\u4ee5\u6ca1\u6709\u94a5\u5319\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u591a\u628a\u94a5\u5319\u3002 \u4e00\u4e2a\u6751\u6c11\u7684\u96c6\u5408\u80fd\u591f\u5f00\u9501\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6751\u6c11\u638c\u63e1\u4e86 k k \u79cd\u94a5\u5319\u4e2d\u7684\u6bcf\u4e00\u79cd\u3002 \u6bcf\u4e2a\u5c45\u6c11\u6709\u4e00\u4e2a\u91cd\u8981\u5ea6 a_i a_i \uff0c\u4e00\u4e2a\u6751\u6c11\u7684\u96c6\u5408\u662f\u91cd\u8981\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u4e2d\u6240\u6709\u6751\u6c11\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8e m m \u3002\u8bf7\u4f60\u6c42\u51fa k k \u7684\u6700\u5c0f\u503c\uff0c\u4f7f\u5f97\u5b58\u5728\u4e00\u79cd\u5206\u914d\u94a5\u5319\u7684\u65b9\u6848\uff0c\u6ee1\u8db3\u4efb\u4f55\u4e00\u4e2a\u91cd\u8981\u7684\u6751\u6c11\u96c6\u5408\u80fd\u591f\u5f00\u9501\uff0c\u4efb\u4f55\u4e00\u4e2a\u4e0d\u91cd\u8981\u7684\u6751\u6c11\u96c6\u5408\u4e0d\u80fd\u5f00\u9501\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2013/#_3","text":"\u81ea\u7136\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u7684\u96c6\u5408\u90fd\u65b0\u589e\u4e00\u79cd\u94a5\u5319\uff0c\u5c06\u5176\u5206\u53d1\u7ed9\u8fd9\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\u7684\u8865\u96c6\u3002\u8fd9\u6837\u4e00\u5b9a\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u201c\u4e0d\u91cd\u8981\u201d\u7684\u96c6\u5408\u90fd\u65e0\u6cd5\u6253\u5f00\u623f\u95e8\uff1b\u7531\u4e8e\u4efb\u4f55\u201c\u91cd\u8981\u201d\u96c6\u5408\u4e00\u5b9a\u4e0d\u542b\u4e8e\u4efb\u4f55\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\uff0c\u5219\u5176\u4e5f\u4e00\u5b9a\u542b\u6709\u6240\u6709\u94a5\u5319\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\u662f\u53e6\u4e00\u4e2a\u201c\u4e0d\u91cd\u8981\u201d\u96c6\u5408\u7684\u5b50\u96c6\uff0c\u5219\u6ca1\u5fc5\u8981\u4e3a\u5176\u65b0\u589e\u4e00\u79cd\u94a5\u5319\uff0c\u56e0\u4e3a\u5b83\u7684\u94a5\u5319\u4e0d\u662f\u5168\u96c6\u7684\u9650\u5236\u5df2\u7ecf\u7531\u5b83\u7684\u8d85\u96c6\u6ee1\u8db3\u4e86\u3002 \u8fd9\u79cd\u6784\u9020\u65b9\u6cd5\u663e\u7136\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u5426\u662f\u6700\u4f18\u7684\uff1f\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u6bd4\u8f83\u7384\u5b66\u7684\u8bc1\u660e\uff1a \u8bc1\u660e \u8bbe\u6309\u7167\u4ee5\u4e0a\u65b9\u6cd5\u9700\u8981 x x \u79cd\u94a5\u5319\uff0c\u4e5f\u5c31\u662f\u8bf4\u6781\u5927\u4e0d\u91cd\u8981\u96c6\u5408\u7684\u6570\u91cf\u4e3a x x \u3002\u82e5\u5b58\u5728\u4e00\u79cd\u66f4\u4f18\u7684\u65b9\u6cd5\u4f7f\u7528\u5c11\u4e8e x x \u79cd\u94a5\u5319\uff0c\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u5fc5\u7136\u5b58\u5728\u4e24\u4e2a\u6781\u5927\u4e0d\u91cd\u8981\u96c6\u5408\u90fd\u4e0d\u542b\u540c\u4e00\u79cd\u94a5\u5319\uff0c\u5b83\u4eec\u7684\u5e76\u96c6\u4e0d\u80fd\u5f00\u95e8\u3002\u6545\u4e0d\u5b58\u5728\u4f7f\u7528\u5c11\u4e8e x x \u79cd\u94a5\u5319\u7684\u5206\u914d\u65b9\u6848\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2013/#_4","text":"#include <bits/stdc++.h> int n , m , a [ 20 ]; long long int sum [ 1 << 20 ]; bool vist [ 1 << 20 ]; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; ++ i ) std :: scanf ( \"%d\" , a + i ); for ( int s = 1 ; s < ( 1 << n ); ++ s ){ for ( int i = 0 ; i < n ; ++ i ) if ( s & ( 1 << i )){ sum [ s ] = sum [ s ^ ( 1 << i )] + a [ i ]; break ; } if ( sum [ s ] < m ) for ( int i = 0 ; i < n ; ++ i ) if ( s & ( 1 << i )) vist [ s ^ ( 1 << i )] = true ; } int ans = 0 ; for ( int s = 1 ; s < ( 1 << n ); ++ s ) //s=0? whether emptyset is taken into consideration is not defined. if ( sum [ s ] < m && ! vist [ s ]) ++ ans ; std :: printf ( \"%d \\n \" , ans ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2013/#_5","text":"NOI.AC #2013 \u9501","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2016/","text":"\u9ed1\u5fc3\u5de5\u5382 \u00b6 \u9898\u610f \u00b6 \u9ed1\u5fc3\u5de5\u5382\u6709 n n \u540d\u5de5\u4eba\u548c p p \u6761\u6d41\u6c34\u7ebf\u3002\u7b2c i i \u540d\u5de5\u4eba\u4f1a\u5728 [s_i,t_i] [s_i,t_i] \u65f6\u95f4\u6bb5\u5185\u5de5\u4f5c\u3002 \u6bcf\u540d\u5de5\u4eba\u5fc5\u987b\u88ab\u5206\u914d\u5230\u4e00\u6761\u6d41\u6c34\u7ebf\u3002\u6d41\u6c34\u7ebf\u5de5\u4f5c\u7684\u65f6\u95f4\u662f\u6240\u6709\u5de5\u4eba\u5de5\u4f5c\u65f6\u95f4\u7684\u4ea4\u96c6\uff0c\u4e14\u9700\u4fdd\u8bc1\u6ca1\u6709\u6d41\u6c34\u7ebf\u5de5\u4f5c\u65f6\u95f4\u4e3a 0 0 \u3002\u6c42\u6240\u6709\u6d41\u6c34\u7ebf\u7684\u6700\u5927\u5de5\u4f5c\u65f6\u95f4\u603b\u548c\u3002 \u89e3\u6790 \u00b6 \u8003\u8651\u4e24\u540d\u5de5\u4eba i,j i,j \u6ee1\u8db3 s_i\\le s_j\\le t_j\\le t_i s_i\\le s_j\\le t_j\\le t_i \u3002\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u89e3\uff0c i i \u8981\u4e48\u548c j j \u5c5e\u4e8e\u540c\u4e00\u6d41\u6c34\u7ebf\uff0c\u8981\u4e48\u72ec\u81ea\u5c5e\u4e8e\u4e00\u6761\u53ea\u6709\u4e00\u4eba\u7684\u6d41\u6c34\u7ebf\u3002 \u8bc1\u660e \u82e5 i i \u4e0e j j \u5c5e\u4e8e\u4e0d\u540c\u7684\u6d41\u6c34\u7ebf\uff0c\u4e14 i i \u7684\u6d41\u6c34\u7ebf\u4e2d\u8fd8\u6709\u5176\u5b83\u7684\u5de5\u4eba\uff0c\u5219\u5c06 i i \u8c03\u5f80 j j \u7684\u6d41\u6c34\u7ebf\u540e\uff0c i i \u539f\u672c\u6240\u5728\u7684\u6d41\u6c34\u7ebf\u5de5\u4f5c\u65f6\u95f4\u4e0d\u4f1a\u53d8\u77ed\uff0c j j \u6240\u5728\u7684\u6d41\u6c34\u7ebf\u5de5\u4f5c\u65f6\u95f4\u4e0d\u53d8\u3002 \u56e0\u6b64\u53ea\u8981\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u89e3\u6ee1\u8db3 i i \u548c j j \u4e0d\u5c5e\u4e8e\u540c\u4e00\u6d41\u6c34\u7ebf\uff0c\u4e14 i i \u6240\u5728\u6d41\u6c34\u7ebf\u8fd8\u6709\u5176\u5b83\u5de5\u4eba\uff0c\u5c31\u4e00\u5b9a\u5b58\u5728\u53e6\u4e00\u79cd\u6700\u4f18\u89e3\u6ee1\u8db3 i i \u548c j j \u5c5e\u4e8e\u540c\u4e00\u6d41\u6c34\u7ebf\u3002 \u6211\u4eec\u5c06\u6240\u6709\u5de5\u4eba\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408 S S \u548c T T \uff1a\u5bf9\u4e8e S S \u4e2d\u6240\u6709\u5de5\u4eba i i \u90fd\u5b58\u5728\u4e00\u4e2a\u5de5\u4eba j j \u6ee1\u8db3 s_i\\le s_j \\le t_j \\le t_i s_i\\le s_j \\le t_j \\le t_i \uff0c\u800c T T \u662f S S \u5173\u4e8e\u5168\u96c6\u7684\u8865\u96c6\u3002\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c S S \u4e2d\u7684\u5de5\u4eba\u8981\u4e48\u88ab\u72ec\u81ea\u5206\u914d\u5230\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u8981\u4e48\u4e0d\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u6c42\u51fa S S \u4e2d\u4ea7\u751f i i \u6761\u6d41\u6c34\u7ebf\u7684\u6700\u5927\u5de5\u4f5c\u65f6\u95f4\u3002 \u5bf9\u4e8e\u96c6\u5408 T T \uff0c\u6211\u4eec\u5c06\u5de5\u4eba\u4ee5 s s \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c t t \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7531\u4e8e\u5de5\u4eba\u4e92\u4e0d\u76f8\u4ea4\uff0c\u5219\u6709 s_1\\le s_2\\le \\ldots s_{|T|} s_1\\le s_2\\le \\ldots s_{|T|} \u4ee5\u53ca t_1\\le t_2\\le \\ldots t_{|T|} t_1\\le t_2\\le \\ldots t_{|T|} \u3002\u5bf9\u4e8e\u4efb\u610f i i \u90fd\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5c06 T T \u5206\u4e3a i i \u6761\u6d41\u6c34\u7ebf\u7684\u6700\u4f18\u89e3\uff0c\u6bcf\u6761\u6d41\u6c34\u7ebf\u5305\u542b\u7684\u5de5\u4eba\u90fd\u662f\u76f8\u90bb\u7684\u3002 \u8bc1\u660e \u82e5\u5728\u67d0\u4e2a\u6700\u4f18\u89e3\u4e2d\u5b58\u5728 i<j<k i<j<k \u6ee1\u8db3 i i \u4e0e k k \u5728\u540c\u4e00\u6d41\u6c34\u7ebf\uff0c\u800c j j \u5728\u53e6\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u5219 \u82e5 j j \u6240\u5728\u6d41\u6c34\u7ebf\u53ea\u6709 j j \u4e00\u4eba\uff0c\u5219\u5c06 j j \u52a0\u5165 i i \u6240\u5728\u6d41\u6c34\u7ebf\uff0c\u4f7f k k \u79bb\u5f00 i i \u6240\u5728\u6d41\u6c34\u7ebf\u5e76\u5355\u72ec\u6210\u7acb\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u4e00\u5b9a\u80fd\u591f\u5f97\u5230\u66f4\u957f\u7684\u5de5\u4f5c\u65f6\u95f4 \u82e5 j j \u6240\u5728\u6d41\u6c34\u7ebf\u4e0d\u6b62 j j \u4e00\u4eba\uff0c\u5219\u5c06 j j \u52a0\u5165 i i \u6240\u5728\u6d41\u6c34\u7ebf\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u8fd9\u6761\u6d41\u6c34\u7ebf\u7684\u5de5\u4f5c\u65f6\u95f4\u66f4\u77ed\u3002 \u8fd9\u6837\u4e0d\u65ad\u8c03\u6574\u4e00\u5b9a\u80fd\u5f97\u5230\u4e00\u4e2a\u6240\u6709\u5728\u540c\u4e00\u6d41\u6c34\u7ebf\u4e0a\u7684\u5de5\u4eba\u90fd\u662f\u76f8\u90bb\u7684\u6700\u4f18\u89e3\u3002 \u4e8e\u662f\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6c42\u51fa T T \u7684\u7b54\u6848\uff0c\u7136\u540e\u4e0e S S \u7684\u7b54\u6848\u5408\u5e76\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 2e2 + 19 ; bool vist [ maxn ]; std :: pair < int , int > a [ maxn ], st [ maxn ]; int top ; int n , p , dp [ maxn ][ maxn ], s [ maxn ]; int main (){ std :: scanf ( \"%d%d\" , & n , & p ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) if ( j != i && a [ i ]. first <= a [ j ]. first && a [ i ]. second >= a [ j ]. second && a [ i ]. second - a [ i ]. first > a [ j ]. second - a [ j ]. first ){ vist [ i ] = true ; break ; } for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist [ i ]) st [ ++ top ] = a [ i ]; std :: sort ( st + 1 , st + 1 + top ); std :: memset ( dp , -0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int k = 1 ; k <= p ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) if ( st [ j + 1 ]. second > st [ i ]. first ) dp [ i ][ k ] = std :: max ( dp [ i ][ k ], dp [ j ][ k - 1 ] + st [ j + 1 ]. second - st [ i ]. first ); top = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( vist [ i ]) s [ ++ top ] = a [ i ]. second - a [ i ]. first ; std :: sort ( s + 1 , s + 1 + top , std :: greater < int > ()); for ( int i = 1 ; i <= top ; ++ i ) s [ i ] += s [ i - 1 ]; int ans = 0 ; for ( int i = 1 ; i <= p ; ++ i ) ans = std :: max ( ans , dp [ n - top ][ i ] + s [ p - i ]); std :: printf ( \"%d \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2016 T1","title":"\u9ed1\u5fc3\u5de5\u5382"},{"location":"problem/2021/march/noi2016/#_1","text":"","title":"\u9ed1\u5fc3\u5de5\u5382"},{"location":"problem/2021/march/noi2016/#_2","text":"\u9ed1\u5fc3\u5de5\u5382\u6709 n n \u540d\u5de5\u4eba\u548c p p \u6761\u6d41\u6c34\u7ebf\u3002\u7b2c i i \u540d\u5de5\u4eba\u4f1a\u5728 [s_i,t_i] [s_i,t_i] \u65f6\u95f4\u6bb5\u5185\u5de5\u4f5c\u3002 \u6bcf\u540d\u5de5\u4eba\u5fc5\u987b\u88ab\u5206\u914d\u5230\u4e00\u6761\u6d41\u6c34\u7ebf\u3002\u6d41\u6c34\u7ebf\u5de5\u4f5c\u7684\u65f6\u95f4\u662f\u6240\u6709\u5de5\u4eba\u5de5\u4f5c\u65f6\u95f4\u7684\u4ea4\u96c6\uff0c\u4e14\u9700\u4fdd\u8bc1\u6ca1\u6709\u6d41\u6c34\u7ebf\u5de5\u4f5c\u65f6\u95f4\u4e3a 0 0 \u3002\u6c42\u6240\u6709\u6d41\u6c34\u7ebf\u7684\u6700\u5927\u5de5\u4f5c\u65f6\u95f4\u603b\u548c\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2016/#_3","text":"\u8003\u8651\u4e24\u540d\u5de5\u4eba i,j i,j \u6ee1\u8db3 s_i\\le s_j\\le t_j\\le t_i s_i\\le s_j\\le t_j\\le t_i \u3002\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u89e3\uff0c i i \u8981\u4e48\u548c j j \u5c5e\u4e8e\u540c\u4e00\u6d41\u6c34\u7ebf\uff0c\u8981\u4e48\u72ec\u81ea\u5c5e\u4e8e\u4e00\u6761\u53ea\u6709\u4e00\u4eba\u7684\u6d41\u6c34\u7ebf\u3002 \u8bc1\u660e \u82e5 i i \u4e0e j j \u5c5e\u4e8e\u4e0d\u540c\u7684\u6d41\u6c34\u7ebf\uff0c\u4e14 i i \u7684\u6d41\u6c34\u7ebf\u4e2d\u8fd8\u6709\u5176\u5b83\u7684\u5de5\u4eba\uff0c\u5219\u5c06 i i \u8c03\u5f80 j j \u7684\u6d41\u6c34\u7ebf\u540e\uff0c i i \u539f\u672c\u6240\u5728\u7684\u6d41\u6c34\u7ebf\u5de5\u4f5c\u65f6\u95f4\u4e0d\u4f1a\u53d8\u77ed\uff0c j j \u6240\u5728\u7684\u6d41\u6c34\u7ebf\u5de5\u4f5c\u65f6\u95f4\u4e0d\u53d8\u3002 \u56e0\u6b64\u53ea\u8981\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u89e3\u6ee1\u8db3 i i \u548c j j \u4e0d\u5c5e\u4e8e\u540c\u4e00\u6d41\u6c34\u7ebf\uff0c\u4e14 i i \u6240\u5728\u6d41\u6c34\u7ebf\u8fd8\u6709\u5176\u5b83\u5de5\u4eba\uff0c\u5c31\u4e00\u5b9a\u5b58\u5728\u53e6\u4e00\u79cd\u6700\u4f18\u89e3\u6ee1\u8db3 i i \u548c j j \u5c5e\u4e8e\u540c\u4e00\u6d41\u6c34\u7ebf\u3002 \u6211\u4eec\u5c06\u6240\u6709\u5de5\u4eba\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408 S S \u548c T T \uff1a\u5bf9\u4e8e S S \u4e2d\u6240\u6709\u5de5\u4eba i i \u90fd\u5b58\u5728\u4e00\u4e2a\u5de5\u4eba j j \u6ee1\u8db3 s_i\\le s_j \\le t_j \\le t_i s_i\\le s_j \\le t_j \\le t_i \uff0c\u800c T T \u662f S S \u5173\u4e8e\u5168\u96c6\u7684\u8865\u96c6\u3002\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c S S \u4e2d\u7684\u5de5\u4eba\u8981\u4e48\u88ab\u72ec\u81ea\u5206\u914d\u5230\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u8981\u4e48\u4e0d\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u6c42\u51fa S S \u4e2d\u4ea7\u751f i i \u6761\u6d41\u6c34\u7ebf\u7684\u6700\u5927\u5de5\u4f5c\u65f6\u95f4\u3002 \u5bf9\u4e8e\u96c6\u5408 T T \uff0c\u6211\u4eec\u5c06\u5de5\u4eba\u4ee5 s s \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c t t \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7531\u4e8e\u5de5\u4eba\u4e92\u4e0d\u76f8\u4ea4\uff0c\u5219\u6709 s_1\\le s_2\\le \\ldots s_{|T|} s_1\\le s_2\\le \\ldots s_{|T|} \u4ee5\u53ca t_1\\le t_2\\le \\ldots t_{|T|} t_1\\le t_2\\le \\ldots t_{|T|} \u3002\u5bf9\u4e8e\u4efb\u610f i i \u90fd\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u5c06 T T \u5206\u4e3a i i \u6761\u6d41\u6c34\u7ebf\u7684\u6700\u4f18\u89e3\uff0c\u6bcf\u6761\u6d41\u6c34\u7ebf\u5305\u542b\u7684\u5de5\u4eba\u90fd\u662f\u76f8\u90bb\u7684\u3002 \u8bc1\u660e \u82e5\u5728\u67d0\u4e2a\u6700\u4f18\u89e3\u4e2d\u5b58\u5728 i<j<k i<j<k \u6ee1\u8db3 i i \u4e0e k k \u5728\u540c\u4e00\u6d41\u6c34\u7ebf\uff0c\u800c j j \u5728\u53e6\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u5219 \u82e5 j j \u6240\u5728\u6d41\u6c34\u7ebf\u53ea\u6709 j j \u4e00\u4eba\uff0c\u5219\u5c06 j j \u52a0\u5165 i i \u6240\u5728\u6d41\u6c34\u7ebf\uff0c\u4f7f k k \u79bb\u5f00 i i \u6240\u5728\u6d41\u6c34\u7ebf\u5e76\u5355\u72ec\u6210\u7acb\u4e00\u6761\u6d41\u6c34\u7ebf\uff0c\u4e00\u5b9a\u80fd\u591f\u5f97\u5230\u66f4\u957f\u7684\u5de5\u4f5c\u65f6\u95f4 \u82e5 j j \u6240\u5728\u6d41\u6c34\u7ebf\u4e0d\u6b62 j j \u4e00\u4eba\uff0c\u5219\u5c06 j j \u52a0\u5165 i i \u6240\u5728\u6d41\u6c34\u7ebf\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u8fd9\u6761\u6d41\u6c34\u7ebf\u7684\u5de5\u4f5c\u65f6\u95f4\u66f4\u77ed\u3002 \u8fd9\u6837\u4e0d\u65ad\u8c03\u6574\u4e00\u5b9a\u80fd\u5f97\u5230\u4e00\u4e2a\u6240\u6709\u5728\u540c\u4e00\u6d41\u6c34\u7ebf\u4e0a\u7684\u5de5\u4eba\u90fd\u662f\u76f8\u90bb\u7684\u6700\u4f18\u89e3\u3002 \u4e8e\u662f\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6c42\u51fa T T \u7684\u7b54\u6848\uff0c\u7136\u540e\u4e0e S S \u7684\u7b54\u6848\u5408\u5e76\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2016/#_4","text":"#include <bits/stdc++.h> const int maxn = 2e2 + 19 ; bool vist [ maxn ]; std :: pair < int , int > a [ maxn ], st [ maxn ]; int top ; int n , p , dp [ maxn ][ maxn ], s [ maxn ]; int main (){ std :: scanf ( \"%d%d\" , & n , & p ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) if ( j != i && a [ i ]. first <= a [ j ]. first && a [ i ]. second >= a [ j ]. second && a [ i ]. second - a [ i ]. first > a [ j ]. second - a [ j ]. first ){ vist [ i ] = true ; break ; } for ( int i = 1 ; i <= n ; ++ i ) if ( ! vist [ i ]) st [ ++ top ] = a [ i ]; std :: sort ( st + 1 , st + 1 + top ); std :: memset ( dp , -0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int k = 1 ; k <= p ; ++ k ) for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) if ( st [ j + 1 ]. second > st [ i ]. first ) dp [ i ][ k ] = std :: max ( dp [ i ][ k ], dp [ j ][ k - 1 ] + st [ j + 1 ]. second - st [ i ]. first ); top = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( vist [ i ]) s [ ++ top ] = a [ i ]. second - a [ i ]. first ; std :: sort ( s + 1 , s + 1 + top , std :: greater < int > ()); for ( int i = 1 ; i <= top ; ++ i ) s [ i ] += s [ i - 1 ]; int ans = 0 ; for ( int i = 1 ; i <= p ; ++ i ) ans = std :: max ( ans , dp [ n - top ][ i ] + s [ p - i ]); std :: printf ( \"%d \\n \" , ans ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2016/#_5","text":"NOI.AC #2016 T1","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2017/","text":"\u88c5\u5907\u5408\u6210 \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a k k \u4e2a\u88c5\u5907\uff0c\u6bcf\u4e2a\u88c5\u5907\u6709 n n \u4e2a\u5c5e\u6027\u3002 \u7ef4\u62a4 q q \u7ec4\u64cd\u4f5c\uff1a \u65b0\u5efa\u4e00\u4e2a\u88c5\u5907\uff0c\u5176\u6bcf\u9879\u5c5e\u6027\u4e3a x x \u548c y y \u88c5\u5907\u5bf9\u5e94\u5c5e\u6027\u7684\u6700\u5c0f\u503c \u65b0\u5efa\u4e00\u4e2a\u88c5\u5907\uff0c\u5176\u6bcf\u9879\u5c5e\u6027\u4e3a x x \u548c y y \u88c5\u5907\u5bf9\u5e94\u5c5e\u6027\u7684\u6700\u5927\u503c \u56de\u7b54 x x \u88c5\u5907\u7684 y y \u5c5e\u6027 \u89e3\u6790 \u00b6 \u8fd9\u9053\u9898\u548c\u4eca\u5e74\u51ac\u4ee4\u8425\u6284\u4e86\u540c\u4e00\u9053\u9898 Magic Breeding \uff0c\u800c\u4e14\u8fd9\u9053\u9898\u51e0\u4e4e\u5b8c\u5168\u7167\u6284\u3002 \u867d\u7136 a_{i,j} a_{i,j} \u503c\u57df\u5f88\u5927\uff0c\u4f46\u7b54\u6848\u53ea\u6709\u53ef\u80fd\u662f k k \u4e2a a_{i,j} a_{i,j} \u4e2d\u7684\u4e00\u4e2a\u3002\u679a\u4e3e k k \u4e2a\u521d\u59cb\u88c5\u5907\u5206\u522b\u4f5c\u4e3a\u57fa\u51c6\uff0c\u8bbe 0 0 \u8868\u793a\u5c0f\u4e8e\u57fa\u51c6\u7684\u8fd9\u4e00\u5c5e\u6027\uff0c 1 1 \u8868\u793a\u5927\u4e8e\u7b49\u4e8e\u57fa\u51c6\u7684\u8fd9\u4e00\u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u5c06\u6bcf\u79cd\u88c5\u5907\u8868\u793a\u4e3a\u4e00\u4e2a 01 \u4e32\u3002\u53d6\u6700\u5927\u503c\u5c31\u662f\u6309\u4f4d\u6216\uff0c\u6700\u5c0f\u503c\u5c31\u662f\u6309\u4f4d\u4e0e\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528 std::bitset \u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\frac{nq}{\\omega}) O(\\frac{nq}{\\omega}) \u3002 \u5f53\u7136\u8fd8\u6709\u66f4\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u4e3a O(2^kq) O(2^kq) \u7684\u505a\u6cd5\u3002\u679a\u4e3e\u5f53\u524d\u5c5e\u6027\u7684\u57fa\u51c6\u503c\uff0c\u7528 S S \u538b\u7f29\u6240\u6709\u88c5\u5907\u5bf9\u5e94\u5c5e\u6027\u76f8\u5bf9\u57fa\u51c6\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u3002\u7531\u4e8e S S \u53ea\u6709 2^k 2^k \u79cd\u53d6\u503c\uff0c\u7ef4\u62a4\u6bcf\u4e2a S S \u7684\u7ed3\u679c\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> template < typename Tp > void read ( Tp & res ){ static char ch ; ch = getchar (), res = 0 ; while ( ! std :: isdigit ( ch )) ch = getchar (); while ( std :: isdigit ( ch )) res = res * 10 + ch - 48 , ch = getchar (); } typedef unsigned long long int ull ; const int maxk = 14 , maxn = 1e5 + 19 ; struct bitset { std :: vector < ull > mk ; void set ( int pos , bool val ){ mk [ pos >> 6 ] |= ( 1ull << ( pos & 63 )); if ( ! val ) mk [ pos >> 6 ] ^= ( 1ull << ( pos & 63 )); } bool access ( int pos ){ return mk [ pos >> 6 ] & ( 1ull << ( pos & 63 )); } bitset & operator &= ( const bitset & b ){ int sz = b . mk . size (); for ( int i = 0 ; i < sz ; ++ i ) mk [ i ] &= b . mk [ i ]; return * this ; } bitset & operator |= ( const bitset & b ){ int sz = b . mk . size (); for ( int i = 0 ; i < sz ; ++ i ) mk [ i ] |= b . mk [ i ]; return * this ; } }; int n , k , q , a [ maxk ][ maxn ]; bool vist [ maxn ]; int tmp [ maxn ], tot , id [ maxn ]; int op [ maxn ], x [ maxn ], y [ maxn ], ans [ maxn ]; bitset t [ maxn ]; int main (){ read ( n ), read ( k ), read ( q ); for ( int i = 1 ; i <= k ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) read ( a [ i ][ j ]); for ( int i = 1 ; i <= q ; ++ i ){ read ( op [ i ]), read ( x [ i ]), read ( y [ i ]); if ( op [ i ] == 3 ) vist [ y [ i ]] = true ; } for ( int i = 1 ; i <= n ; ++ i ) if ( vist [ i ]) tmp [ ++ tot ] = i , id [ i ] = tot ; for ( int i = 1 ; i <= k ; ++ i ) t [ i ]. mk . resize ( tot / 64 + 1 ); for ( int i = 1 ; i <= k ; ++ i ){ int m = k ; for ( int j = 1 ; j <= k ; ++ j ){ for ( int p = 1 ; p <= tot ; ++ p ) t [ j ]. set ( p , a [ j ][ tmp [ p ]] >= a [ i ][ tmp [ p ]]); } for ( int j = 1 ; j <= q ; ++ j ){ if ( op [ j ] == 1 ){ t [ ++ m ] = t [ x [ j ]]; t [ m ] |= t [ y [ j ]]; } else if ( op [ j ] == 2 ){ t [ ++ m ] = t [ x [ j ]]; t [ m ] &= t [ y [ j ]]; } else { if ( t [ x [ j ]]. access ( id [ y [ j ]])) ans [ j ] = std :: max ( ans [ j ], a [ i ][ y [ j ]]); } } } for ( int i = 1 ; i <= q ; ++ i ) if ( op [ i ] == 3 ) std :: printf ( \"%d \\n \" , ans [ i ]); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2017 T2","title":"\u88c5\u5907\u5408\u6210"},{"location":"problem/2021/march/noi2017/#_1","text":"","title":"\u88c5\u5907\u5408\u6210"},{"location":"problem/2021/march/noi2017/#_2","text":"\u7ed9\u5b9a k k \u4e2a\u88c5\u5907\uff0c\u6bcf\u4e2a\u88c5\u5907\u6709 n n \u4e2a\u5c5e\u6027\u3002 \u7ef4\u62a4 q q \u7ec4\u64cd\u4f5c\uff1a \u65b0\u5efa\u4e00\u4e2a\u88c5\u5907\uff0c\u5176\u6bcf\u9879\u5c5e\u6027\u4e3a x x \u548c y y \u88c5\u5907\u5bf9\u5e94\u5c5e\u6027\u7684\u6700\u5c0f\u503c \u65b0\u5efa\u4e00\u4e2a\u88c5\u5907\uff0c\u5176\u6bcf\u9879\u5c5e\u6027\u4e3a x x \u548c y y \u88c5\u5907\u5bf9\u5e94\u5c5e\u6027\u7684\u6700\u5927\u503c \u56de\u7b54 x x \u88c5\u5907\u7684 y y \u5c5e\u6027","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2017/#_3","text":"\u8fd9\u9053\u9898\u548c\u4eca\u5e74\u51ac\u4ee4\u8425\u6284\u4e86\u540c\u4e00\u9053\u9898 Magic Breeding \uff0c\u800c\u4e14\u8fd9\u9053\u9898\u51e0\u4e4e\u5b8c\u5168\u7167\u6284\u3002 \u867d\u7136 a_{i,j} a_{i,j} \u503c\u57df\u5f88\u5927\uff0c\u4f46\u7b54\u6848\u53ea\u6709\u53ef\u80fd\u662f k k \u4e2a a_{i,j} a_{i,j} \u4e2d\u7684\u4e00\u4e2a\u3002\u679a\u4e3e k k \u4e2a\u521d\u59cb\u88c5\u5907\u5206\u522b\u4f5c\u4e3a\u57fa\u51c6\uff0c\u8bbe 0 0 \u8868\u793a\u5c0f\u4e8e\u57fa\u51c6\u7684\u8fd9\u4e00\u5c5e\u6027\uff0c 1 1 \u8868\u793a\u5927\u4e8e\u7b49\u4e8e\u57fa\u51c6\u7684\u8fd9\u4e00\u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u5c06\u6bcf\u79cd\u88c5\u5907\u8868\u793a\u4e3a\u4e00\u4e2a 01 \u4e32\u3002\u53d6\u6700\u5927\u503c\u5c31\u662f\u6309\u4f4d\u6216\uff0c\u6700\u5c0f\u503c\u5c31\u662f\u6309\u4f4d\u4e0e\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528 std::bitset \u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\frac{nq}{\\omega}) O(\\frac{nq}{\\omega}) \u3002 \u5f53\u7136\u8fd8\u6709\u66f4\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u4e3a O(2^kq) O(2^kq) \u7684\u505a\u6cd5\u3002\u679a\u4e3e\u5f53\u524d\u5c5e\u6027\u7684\u57fa\u51c6\u503c\uff0c\u7528 S S \u538b\u7f29\u6240\u6709\u88c5\u5907\u5bf9\u5e94\u5c5e\u6027\u76f8\u5bf9\u57fa\u51c6\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u3002\u7531\u4e8e S S \u53ea\u6709 2^k 2^k \u79cd\u53d6\u503c\uff0c\u7ef4\u62a4\u6bcf\u4e2a S S \u7684\u7ed3\u679c\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2017/#_4","text":"#include <bits/stdc++.h> template < typename Tp > void read ( Tp & res ){ static char ch ; ch = getchar (), res = 0 ; while ( ! std :: isdigit ( ch )) ch = getchar (); while ( std :: isdigit ( ch )) res = res * 10 + ch - 48 , ch = getchar (); } typedef unsigned long long int ull ; const int maxk = 14 , maxn = 1e5 + 19 ; struct bitset { std :: vector < ull > mk ; void set ( int pos , bool val ){ mk [ pos >> 6 ] |= ( 1ull << ( pos & 63 )); if ( ! val ) mk [ pos >> 6 ] ^= ( 1ull << ( pos & 63 )); } bool access ( int pos ){ return mk [ pos >> 6 ] & ( 1ull << ( pos & 63 )); } bitset & operator &= ( const bitset & b ){ int sz = b . mk . size (); for ( int i = 0 ; i < sz ; ++ i ) mk [ i ] &= b . mk [ i ]; return * this ; } bitset & operator |= ( const bitset & b ){ int sz = b . mk . size (); for ( int i = 0 ; i < sz ; ++ i ) mk [ i ] |= b . mk [ i ]; return * this ; } }; int n , k , q , a [ maxk ][ maxn ]; bool vist [ maxn ]; int tmp [ maxn ], tot , id [ maxn ]; int op [ maxn ], x [ maxn ], y [ maxn ], ans [ maxn ]; bitset t [ maxn ]; int main (){ read ( n ), read ( k ), read ( q ); for ( int i = 1 ; i <= k ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) read ( a [ i ][ j ]); for ( int i = 1 ; i <= q ; ++ i ){ read ( op [ i ]), read ( x [ i ]), read ( y [ i ]); if ( op [ i ] == 3 ) vist [ y [ i ]] = true ; } for ( int i = 1 ; i <= n ; ++ i ) if ( vist [ i ]) tmp [ ++ tot ] = i , id [ i ] = tot ; for ( int i = 1 ; i <= k ; ++ i ) t [ i ]. mk . resize ( tot / 64 + 1 ); for ( int i = 1 ; i <= k ; ++ i ){ int m = k ; for ( int j = 1 ; j <= k ; ++ j ){ for ( int p = 1 ; p <= tot ; ++ p ) t [ j ]. set ( p , a [ j ][ tmp [ p ]] >= a [ i ][ tmp [ p ]]); } for ( int j = 1 ; j <= q ; ++ j ){ if ( op [ j ] == 1 ){ t [ ++ m ] = t [ x [ j ]]; t [ m ] |= t [ y [ j ]]; } else if ( op [ j ] == 2 ){ t [ ++ m ] = t [ x [ j ]]; t [ m ] &= t [ y [ j ]]; } else { if ( t [ x [ j ]]. access ( id [ y [ j ]])) ans [ j ] = std :: max ( ans [ j ], a [ i ][ y [ j ]]); } } } for ( int i = 1 ; i <= q ; ++ i ) if ( op [ i ] == 3 ) std :: printf ( \"%d \\n \" , ans [ i ]); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2017/#_5","text":"NOI.AC #2017 T2","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2030/","text":"\u6570\u5b66\u9898 \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a n,m n,m \uff0c\u6c42 \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^m\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\gcd(i,j) \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^m\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\gcd(i,j) \u3002 \u89e3\u6790 \u00b6 \u8fd9\u4e2a GCD \u663e\u7136\u8981\u53cd\u6f14\u6389\u3002\u53cd\u6f14\u6700\u5927\u516c\u7ea6\u6570\u5e38\u7528\u7684\u65b9\u6cd5\u6709\u6b27\u62c9\u53cd\u6f14\u548c\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u6b27\u62c9\u53cd\u6f14\u3002 \u5219\u539f\u5f0f\u8f6c\u5316\u4e3a \\sum_{d=1}^m\\varphi(d)\\sum_{i=1}^{\\lfloor\\frac nd\\rfloor}\\sum_{j=1}^{\\lfloor\\frac md\\rfloor}\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor \\sum_{d=1}^m\\varphi(d)\\sum_{i=1}^{\\lfloor\\frac nd\\rfloor}\\sum_{j=1}^{\\lfloor\\frac md\\rfloor}\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor \u8bbe f(x,y)=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor f(x,y)=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor \u3002\u82e5\u6211\u4eec\u80fd O(y) O(y) \u6c42\u51fa f(x,y) f(x,y) \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4ee5\u8c03\u548c\u7ea7\u6570\u590d\u6742\u5ea6\u6c42\u51fa\u7b54\u6848\u4e86\u3002 \\begin{aligned} f(x,y)&=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y\\left[\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\ge k\\right]\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y[i\\ge jk]\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^x\\max(x-ik+1,0)\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^{\\lfloor\\frac{x+1}{i}\\rfloor}(x-ik+1) \\end{aligned} \\begin{aligned} f(x,y)&=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y\\left[\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\ge k\\right]\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y[i\\ge jk]\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^x\\max(x-ik+1,0)\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^{\\lfloor\\frac{x+1}{i}\\rfloor}(x-ik+1) \\end{aligned} \u91cc\u9762\u662f\u4e2a\u7b49\u5dee\u6570\u5217\u6c42\u548c\u3002\u4e8e\u662f\u6211\u4eec\u4ee5 O(m\\log m) O(m\\log m) \u7684\u590d\u6742\u5ea6\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\u3002 #include <bits/stdc++.h> typedef unsigned long long int ull ; const int maxn = 1e7 + 19 ; ull f ( int x , int y ){ ull res = 0ull ; for ( int i = 1 ; i <= y ; ++ i ){ int mx = ( x + 1 ) / i ; res += ((( ull ) x - i + 1 + x - ( ull ) mx * i + 1 ) * mx ) >> 1 ; } return res ; } int n , m ; int prime [ maxn ], cnt , phi [ maxn ]; bool vist [ maxn ]; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); phi [ 1 ] = 1 ; for ( int i = 2 ; i <= m ; ++ i ){ if ( ! vist [ i ]) prime [ ++ cnt ] = i , phi [ i ] = i - 1 ; for ( int j = 1 ; j <= cnt && i * prime [ j ] <= m ; ++ j ){ vist [ i * prime [ j ]] = true ; if ( i % prime [ j ]) phi [ i * prime [ j ]] = phi [ i ] * ( prime [ j ] - 1 ); else { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } } } ull ans = 0ull ; for ( int i = 1 ; i <= m ; ++ i ) ans += ( ull ) phi [ i ] * f ( n / i , m / i ); ans &= ( 1ull << 60 ) - 1 ; std :: printf ( \"%llu \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2030 \u6570\u5b66\u9898","title":"\u6570\u5b66\u9898"},{"location":"problem/2021/march/noi2030/#_1","text":"","title":"\u6570\u5b66\u9898"},{"location":"problem/2021/march/noi2030/#_2","text":"\u7ed9\u5b9a n,m n,m \uff0c\u6c42 \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^m\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\gcd(i,j) \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^m\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\gcd(i,j) \u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2030/#_3","text":"\u8fd9\u4e2a GCD \u663e\u7136\u8981\u53cd\u6f14\u6389\u3002\u53cd\u6f14\u6700\u5927\u516c\u7ea6\u6570\u5e38\u7528\u7684\u65b9\u6cd5\u6709\u6b27\u62c9\u53cd\u6f14\u548c\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u6b27\u62c9\u53cd\u6f14\u3002 \u5219\u539f\u5f0f\u8f6c\u5316\u4e3a \\sum_{d=1}^m\\varphi(d)\\sum_{i=1}^{\\lfloor\\frac nd\\rfloor}\\sum_{j=1}^{\\lfloor\\frac md\\rfloor}\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor \\sum_{d=1}^m\\varphi(d)\\sum_{i=1}^{\\lfloor\\frac nd\\rfloor}\\sum_{j=1}^{\\lfloor\\frac md\\rfloor}\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor \u8bbe f(x,y)=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor f(x,y)=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor \u3002\u82e5\u6211\u4eec\u80fd O(y) O(y) \u6c42\u51fa f(x,y) f(x,y) \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4ee5\u8c03\u548c\u7ea7\u6570\u590d\u6742\u5ea6\u6c42\u51fa\u7b54\u6848\u4e86\u3002 \\begin{aligned} f(x,y)&=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y\\left[\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\ge k\\right]\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y[i\\ge jk]\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^x\\max(x-ik+1,0)\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^{\\lfloor\\frac{x+1}{i}\\rfloor}(x-ik+1) \\end{aligned} \\begin{aligned} f(x,y)&=\\sum_{i=1}^x\\sum_{j=1}^y\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y\\left[\\left\\lfloor\\dfrac{i}{j}\\right\\rfloor\\ge k\\right]\\\\ &=\\sum_{k=1}^x\\sum_{i=1}^x\\sum_{j=1}^y[i\\ge jk]\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^x\\max(x-ik+1,0)\\\\ &=\\sum_{i=1}^y\\sum_{k=1}^{\\lfloor\\frac{x+1}{i}\\rfloor}(x-ik+1) \\end{aligned} \u91cc\u9762\u662f\u4e2a\u7b49\u5dee\u6570\u5217\u6c42\u548c\u3002\u4e8e\u662f\u6211\u4eec\u4ee5 O(m\\log m) O(m\\log m) \u7684\u590d\u6742\u5ea6\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\u3002 #include <bits/stdc++.h> typedef unsigned long long int ull ; const int maxn = 1e7 + 19 ; ull f ( int x , int y ){ ull res = 0ull ; for ( int i = 1 ; i <= y ; ++ i ){ int mx = ( x + 1 ) / i ; res += ((( ull ) x - i + 1 + x - ( ull ) mx * i + 1 ) * mx ) >> 1 ; } return res ; } int n , m ; int prime [ maxn ], cnt , phi [ maxn ]; bool vist [ maxn ]; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); phi [ 1 ] = 1 ; for ( int i = 2 ; i <= m ; ++ i ){ if ( ! vist [ i ]) prime [ ++ cnt ] = i , phi [ i ] = i - 1 ; for ( int j = 1 ; j <= cnt && i * prime [ j ] <= m ; ++ j ){ vist [ i * prime [ j ]] = true ; if ( i % prime [ j ]) phi [ i * prime [ j ]] = phi [ i ] * ( prime [ j ] - 1 ); else { phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; break ; } } } ull ans = 0ull ; for ( int i = 1 ; i <= m ; ++ i ) ans += ( ull ) phi [ i ] * f ( n / i , m / i ); ans &= ( 1ull << 60 ) - 1 ; std :: printf ( \"%llu \\n \" , ans ); return 0 ; }","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2030/#_4","text":"NOI.AC #2030 \u6570\u5b66\u9898","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2034/","text":"\u6b6a\u6bd4\u6b6a\u6bd4 \u00b6 \u9898\u610f \u00b6 \u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u5e8f\u5217\u5bf9 (A,B) (A,B) \u7684\u4e2a\u6570\uff1a A,B A,B \u4e2d\u53ea\u542b -m -m \u548c 1 1 A,B A,B \u4e2d -m -m \u7684\u4e2a\u6570\u7684\u603b\u548c\u4e3a n n A A \u4e2d\u6240\u6709\u6570\u7684\u548c\u4e3a S_A S_A \uff0c B B \u4e2d\u6240\u6709\u6570\u7684\u548c\u4e3a S_B S_B A,B A,B \u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u591a\u7ec4\u8be2\u95ee\u3002 \u89e3\u6790 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u53ea\u542b\u8d1f\u6570\u548c 1 1 \uff0c\u4e14\u6240\u6709\u6570\u603b\u548c\u4e3a S S ( S>0 S>0 ) \u7684 \u4e0d\u5faa\u73af \u5e8f\u5217 A A \uff0c\u5176\u6709\u6070\u597d S S \u4e2a\u5faa\u73af\u540c\u6784\u4e32\u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u3002 \u8bc1\u660e \u8003\u8651\u5c06 A A \u5faa\u73af\u5730\u5199\u51fa\uff0c\u5373 B=[A_1,A_2,\\ldots,A_{|A|},A_1,A_2,\\ldots,A_{|A|},A_1,\\ldots] B=[A_1,A_2,\\ldots,A_{|A|},A_1,A_2,\\ldots,A_{|A|},A_1,\\ldots] \u3002\u8fd9\u4e2a\u5faa\u73af\u6570\u5217\u7684\u524d\u7f00\u548c\u53ef\u4ee5\u8868\u793a\u4e3a s_1,s_2,\\ldots,s_1+S,s_2+S,\\ldots s_1,s_2,\\ldots,s_1+S,s_2+S,\\ldots \u3002 \u5bf9\u4e8e i\\in[0,n) i\\in[0,n) \uff0c B B \u4ece i+1 i+1 \u5f00\u59cb\u7684\u957f\u5ea6\u4e3a |A| |A| \u7684\u5b50\u4e32\u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \uff0c\u5f53\u4e14\u4ec5\u5f53 \\forall j>i,s_j> s_i \\forall j>i,s_j> s_i \u3002\u8fd9\u4e00\u70b9\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a S>0 S>0 \uff0c\u5219 \\forall j\\in[i+1,i+n],s_j>s_i\\iff\\forall j>i,s_j>s_i \\forall j\\in[i+1,i+n],s_j>s_i\\iff\\forall j>i,s_j>s_i \u3002 \u82e5 \\exists j>i,s_j\\le s_i \\exists j>i,s_j\\le s_i \uff0c\u5219\u4e00\u5b9a\u6709 \\exists j>i,s_j=s_i \\exists j>i,s_j=s_i \uff0c\u56e0\u4e3a s s \u603b\u4f53\u662f\u589e\u52a0\u7684\uff0c\u800c\u589e\u52a0\u91cf\u603b\u662f\u4e3a 1 1 \u3002\u4e8e\u662f\uff0c \\forall j>i,s_j>s_i \\forall j>i,s_j>s_i \u4e0e \\forall j>i,s_j\\neq s_i \\forall j>i,s_j\\neq s_i \u662f\u7b49\u4ef7\u7684 (\u56e0\u4e3a\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u4e0d\u6210\u7acb\u65f6\uff0c\u53e6\u4e00\u4e2a\u4e5f\u4e0d\u6210\u7acb)\u3002 \u4e8e\u662f A A \u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u7684\u5faa\u73af\u540c\u6784\u4e32\u7684\u4e2a\u6570\u5c31\u662f \\sum\\limits_{i=0}^{|A|-1}[\\forall j>i,s_j\\neq s_i] \\sum\\limits_{i=0}^{|A|-1}[\\forall j>i,s_j\\neq s_i] \u3002\u5bf9\u4e8e [0,|A|-1] [0,|A|-1] \u8303\u56f4\u7684\u6240\u6709 s_i s_i \u6a21 S S \u540c\u4f59\u7684 i i \uff0c\u5b83\u4eec\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u80fd\u8ba1\u5165\u7b54\u6848\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a s_i s_i \uff0c s_i+S,s_i+2S,s_i+3S,\\ldots s_i+S,s_i+2S,s_i+3S,\\ldots \u603b\u662f\u4f1a\u51fa\u73b0\u5728\u524d\u7f00\u548c\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u800c\u53c8\u7531\u4e8e s s \u7684\u589e\u91cf\u81f3\u591a\u4e3a 1 1 \uff0c\u4e8e\u662f\u6240\u6709 s_i\\bmod S s_i\\bmod S \u6b63\u597d\u6784\u6210 S S \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\uff0c\u6b63\u597d\u6709 S S \u4e2a\u8ba1\u5165\u7b54\u6848\u3002 \u6211\u4eec\u8981\u6c42\u51fa\u542b n n \u4e2a -m -m \uff0c\u603b\u548c\u4e3a S S \u4e14\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u7684\u5e8f\u5217 A A \u7684\u4e2a\u6570\u3002\u5728\u6240\u6709\u542b n n \u4e2a -m -m \u4e14\u603b\u548c\u4e3a S S \u7684\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u4e0d\u5faa\u73af\u5e8f\u5217\u4f1a\u8d21\u732e \\frac{S}{|A|} \\frac{S}{|A|} \u81f3\u7b54\u6848\uff0c\u6bcf\u4e2a\u5faa\u73af x x \u7684\u5e8f\u5217\u4f1a\u8d21\u732e \\frac{\\frac{S}{x}}{\\frac{|A|}{x}}=\\frac{S}{|A|} \\frac{\\frac{S}{x}}{\\frac{|A|}{x}}=\\frac{S}{|A|} \u81f3\u7b54\u6848\uff0c\u6545\u7b54\u6848\u4e3a \\frac{S}{|A|}\\binom{|A|}{n} \\frac{S}{|A|}\\binom{|A|}{n} \u3002 \u5982\u679c\u679a\u4e3e n n \u4e2a -m -m \u4e2d\u88ab\u5206\u914d\u5230 A A \u7684\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5 O(n) O(n) \u5f97\u5230\u5355\u7ec4\u8be2\u95ee\u7684\u7b54\u6848\u4e86\u3002\u4e0d\u8fc7\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u6bcf\u4e2a\u542b n n \u4e2a -m -m \uff0c\u603b\u548c\u4e3a S_A+S_B S_A+S_B \u7684\u5408\u6cd5\u5e8f\u5217\u90fd\u5b58\u5728\u552f\u4e00\u7684\u4e00\u4e2a\u4f4d\u7f6e i i \u6ee1\u8db3 s_i=S_A,\\forall j>i,s_j\\neq S_A s_i=S_A,\\forall j>i,s_j\\neq S_A \uff0c\u4ece\u90a3\u91cc\u65ad\u5f00\u53ef\u4ee5\u5f97\u5230\u5408\u6cd5\u7684 A A \u548c B B \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 3e7 + 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( long long int ) res * a % mod ; a = ( long long int ) a * a % mod , b >>= 1 ; } return res ; } int fact [ maxn ], ifact [ maxn ]; void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( long long int ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( long long int ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int inv ( int n ){ return ( long long int ) ifact [ n ] * fact [ n - 1 ] % mod ; } inline int binom ( int n , int m ){ return ( long long int ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ init ( 3e7 ); int T ; std :: scanf ( \"%d\" , & T ); while ( T -- ){ static int n , m , Sa , Sb ; std :: scanf ( \"%d%d%d%d\" , & n , & m , & Sa , & Sb ); int len = n * ( m + 1 ) + Sa + Sb , ans = ( long long int ) binom ( len , n ) * ( Sa + Sb ) % mod * inv ( len ) % mod ; std :: printf ( \"%d \\n \" , ans ); } } \u6765\u6e90 \u00b6 NOI.AC #2034 \u6b6a\u6bd4\u6b6a\u6bd4","title":"\u6b6a\u6bd4\u6b6a\u6bd4"},{"location":"problem/2021/march/noi2034/#_1","text":"","title":"\u6b6a\u6bd4\u6b6a\u6bd4"},{"location":"problem/2021/march/noi2034/#_2","text":"\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u5e8f\u5217\u5bf9 (A,B) (A,B) \u7684\u4e2a\u6570\uff1a A,B A,B \u4e2d\u53ea\u542b -m -m \u548c 1 1 A,B A,B \u4e2d -m -m \u7684\u4e2a\u6570\u7684\u603b\u548c\u4e3a n n A A \u4e2d\u6240\u6709\u6570\u7684\u548c\u4e3a S_A S_A \uff0c B B \u4e2d\u6240\u6709\u6570\u7684\u548c\u4e3a S_B S_B A,B A,B \u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u591a\u7ec4\u8be2\u95ee\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2034/#_3","text":"\u5bf9\u4e8e\u4e00\u4e2a\u53ea\u542b\u8d1f\u6570\u548c 1 1 \uff0c\u4e14\u6240\u6709\u6570\u603b\u548c\u4e3a S S ( S>0 S>0 ) \u7684 \u4e0d\u5faa\u73af \u5e8f\u5217 A A \uff0c\u5176\u6709\u6070\u597d S S \u4e2a\u5faa\u73af\u540c\u6784\u4e32\u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u3002 \u8bc1\u660e \u8003\u8651\u5c06 A A \u5faa\u73af\u5730\u5199\u51fa\uff0c\u5373 B=[A_1,A_2,\\ldots,A_{|A|},A_1,A_2,\\ldots,A_{|A|},A_1,\\ldots] B=[A_1,A_2,\\ldots,A_{|A|},A_1,A_2,\\ldots,A_{|A|},A_1,\\ldots] \u3002\u8fd9\u4e2a\u5faa\u73af\u6570\u5217\u7684\u524d\u7f00\u548c\u53ef\u4ee5\u8868\u793a\u4e3a s_1,s_2,\\ldots,s_1+S,s_2+S,\\ldots s_1,s_2,\\ldots,s_1+S,s_2+S,\\ldots \u3002 \u5bf9\u4e8e i\\in[0,n) i\\in[0,n) \uff0c B B \u4ece i+1 i+1 \u5f00\u59cb\u7684\u957f\u5ea6\u4e3a |A| |A| \u7684\u5b50\u4e32\u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \uff0c\u5f53\u4e14\u4ec5\u5f53 \\forall j>i,s_j> s_i \\forall j>i,s_j> s_i \u3002\u8fd9\u4e00\u70b9\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u56e0\u4e3a S>0 S>0 \uff0c\u5219 \\forall j\\in[i+1,i+n],s_j>s_i\\iff\\forall j>i,s_j>s_i \\forall j\\in[i+1,i+n],s_j>s_i\\iff\\forall j>i,s_j>s_i \u3002 \u82e5 \\exists j>i,s_j\\le s_i \\exists j>i,s_j\\le s_i \uff0c\u5219\u4e00\u5b9a\u6709 \\exists j>i,s_j=s_i \\exists j>i,s_j=s_i \uff0c\u56e0\u4e3a s s \u603b\u4f53\u662f\u589e\u52a0\u7684\uff0c\u800c\u589e\u52a0\u91cf\u603b\u662f\u4e3a 1 1 \u3002\u4e8e\u662f\uff0c \\forall j>i,s_j>s_i \\forall j>i,s_j>s_i \u4e0e \\forall j>i,s_j\\neq s_i \\forall j>i,s_j\\neq s_i \u662f\u7b49\u4ef7\u7684 (\u56e0\u4e3a\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u4e0d\u6210\u7acb\u65f6\uff0c\u53e6\u4e00\u4e2a\u4e5f\u4e0d\u6210\u7acb)\u3002 \u4e8e\u662f A A \u7684\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u7684\u5faa\u73af\u540c\u6784\u4e32\u7684\u4e2a\u6570\u5c31\u662f \\sum\\limits_{i=0}^{|A|-1}[\\forall j>i,s_j\\neq s_i] \\sum\\limits_{i=0}^{|A|-1}[\\forall j>i,s_j\\neq s_i] \u3002\u5bf9\u4e8e [0,|A|-1] [0,|A|-1] \u8303\u56f4\u7684\u6240\u6709 s_i s_i \u6a21 S S \u540c\u4f59\u7684 i i \uff0c\u5b83\u4eec\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u80fd\u8ba1\u5165\u7b54\u6848\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a s_i s_i \uff0c s_i+S,s_i+2S,s_i+3S,\\ldots s_i+S,s_i+2S,s_i+3S,\\ldots \u603b\u662f\u4f1a\u51fa\u73b0\u5728\u524d\u7f00\u548c\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u800c\u53c8\u7531\u4e8e s s \u7684\u589e\u91cf\u81f3\u591a\u4e3a 1 1 \uff0c\u4e8e\u662f\u6240\u6709 s_i\\bmod S s_i\\bmod S \u6b63\u597d\u6784\u6210 S S \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\uff0c\u6b63\u597d\u6709 S S \u4e2a\u8ba1\u5165\u7b54\u6848\u3002 \u6211\u4eec\u8981\u6c42\u51fa\u542b n n \u4e2a -m -m \uff0c\u603b\u548c\u4e3a S S \u4e14\u6240\u6709\u524d\u7f00\u548c\u90fd\u5927\u4e8e 0 0 \u7684\u5e8f\u5217 A A \u7684\u4e2a\u6570\u3002\u5728\u6240\u6709\u542b n n \u4e2a -m -m \u4e14\u603b\u548c\u4e3a S S \u7684\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u4e0d\u5faa\u73af\u5e8f\u5217\u4f1a\u8d21\u732e \\frac{S}{|A|} \\frac{S}{|A|} \u81f3\u7b54\u6848\uff0c\u6bcf\u4e2a\u5faa\u73af x x \u7684\u5e8f\u5217\u4f1a\u8d21\u732e \\frac{\\frac{S}{x}}{\\frac{|A|}{x}}=\\frac{S}{|A|} \\frac{\\frac{S}{x}}{\\frac{|A|}{x}}=\\frac{S}{|A|} \u81f3\u7b54\u6848\uff0c\u6545\u7b54\u6848\u4e3a \\frac{S}{|A|}\\binom{|A|}{n} \\frac{S}{|A|}\\binom{|A|}{n} \u3002 \u5982\u679c\u679a\u4e3e n n \u4e2a -m -m \u4e2d\u88ab\u5206\u914d\u5230 A A \u7684\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5 O(n) O(n) \u5f97\u5230\u5355\u7ec4\u8be2\u95ee\u7684\u7b54\u6848\u4e86\u3002\u4e0d\u8fc7\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u6bcf\u4e2a\u542b n n \u4e2a -m -m \uff0c\u603b\u548c\u4e3a S_A+S_B S_A+S_B \u7684\u5408\u6cd5\u5e8f\u5217\u90fd\u5b58\u5728\u552f\u4e00\u7684\u4e00\u4e2a\u4f4d\u7f6e i i \u6ee1\u8db3 s_i=S_A,\\forall j>i,s_j\\neq S_A s_i=S_A,\\forall j>i,s_j\\neq S_A \uff0c\u4ece\u90a3\u91cc\u65ad\u5f00\u53ef\u4ee5\u5f97\u5230\u5408\u6cd5\u7684 A A \u548c B B \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2034/#_4","text":"#include <bits/stdc++.h> const int maxn = 3e7 + 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( long long int ) res * a % mod ; a = ( long long int ) a * a % mod , b >>= 1 ; } return res ; } int fact [ maxn ], ifact [ maxn ]; void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( long long int ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( long long int ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int inv ( int n ){ return ( long long int ) ifact [ n ] * fact [ n - 1 ] % mod ; } inline int binom ( int n , int m ){ return ( long long int ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ init ( 3e7 ); int T ; std :: scanf ( \"%d\" , & T ); while ( T -- ){ static int n , m , Sa , Sb ; std :: scanf ( \"%d%d%d%d\" , & n , & m , & Sa , & Sb ); int len = n * ( m + 1 ) + Sa + Sb , ans = ( long long int ) binom ( len , n ) * ( Sa + Sb ) % mod * inv ( len ) % mod ; std :: printf ( \"%d \\n \" , ans ); } }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2034/#_5","text":"NOI.AC #2034 \u6b6a\u6bd4\u6b6a\u6bd4","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2121/","text":"\u6811\u4e0a\u7684\u535a\u5f08 \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e00\u68f5 n n \u4e2a\u70b9\u7684\u65e0\u6839\u6811\uff0c\u70b9\u7f16\u53f7\u4e3a 1,2,\\ldots,n 1,2,\\ldots,n \u3002\u5728\u7b2c x x \u5929\uff0c\u7b2c i i \u6761\u8fb9\u7684\u8fb9\u6743\u4e3a k_ix+b_i k_ix+b_i \u3002 Bob \u6709\u4e24\u4e2a\u68cb\u5b50\uff0c\u521d\u59cb\u65f6\u4f4d\u7f6e\u5206\u522b\u4e3a a=1 a=1 \u548c b=2 b=2 \u3002Bob \u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u4e24\u79cd\u64cd\u4f5c\u4e4b\u4e00\uff1a \u5c06 a a \u4ece\u5f53\u524d\u4f4d\u7f6e\u79fb\u52a8\u81f3\u4e00\u4e2a\u672a\u904d\u5386\u8fc7\u7684\u70b9 a^\\prime a^\\prime ( a^\\prime>a a^\\prime>a )\uff0c\u5e76\u83b7\u53d6\u7b49\u4e8e\u5b83\u4eec\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u603b\u548c\u7684\u5206\u6570\u3002\u9664\u4e86 a^\\prime a^\\prime \uff0c\u8def\u5f84\u4e0a\u7684\u5176\u4ed6\u70b9\u4e0d\u7b97\u88ab\u904d\u5386\u8fc7\u3002 \u5c06 b b \u4ece\u5f53\u524d\u4f4d\u7f6e\u79fb\u52a8\u81f3\u4e00\u4e2a\u672a\u904d\u5386\u8fc7\u7684\u70b9 b^\\prime b^\\prime ( b^\\prime>b b^\\prime>b )\uff0c\u5e76\u83b7\u53d6\u7b49\u4e8e\u5b83\u4eec\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u603b\u548c\u7684\u5206\u6570\u3002\u9664\u4e86 b^\\prime b^\\prime \uff0c\u8def\u5f84\u4e0a\u7684\u5176\u4ed6\u70b9\u4e0d\u7b97\u88ab\u904d\u5386\u8fc7\u3002 Bob \u4f1a\u6267\u884c n-2 n-2 \u6b21\u64cd\u4f5c\uff0c\u904d\u5386\u6811\u4e0a\u6240\u6709\u7684\u70b9\uff0c\u5e76\u603b\u662f\u4ee5\u6700\u4f18\u65b9\u6848\u5f97\u5230\u6700\u591a\u7684\u5206\u6570\u3002\u8bf7\u9009\u62e9\u4e00\u5929 x x \u8ba9 Bob \u83b7\u5f97\u7684\u5206\u6570\u6700\u5c0f\u3002 \u89e3\u6790 \u00b6 \u5982\u679c\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86 x x \uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 O(n^2) O(n^2) \u7684\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u51fa Bob \u80fd\u591f\u5f97\u5230\u7684\u6700\u591a\u5206\u6570\u3002\u8bbe dp_{i,j} dp_{i,j} \u8868\u793a\u4e24\u4e2a\u68cb\u5b50\u5206\u522b\u5728 i,j i,j ( i>j i>j ) \u65f6 Bob \u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\uff0c\u5219\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a \u82e5\u5c06 i i \u79fb\u52a8\u81f3 i+1 i+1 \uff0c\u7528 dp_{i,j}+\\operatorname{dist}(i,i+1) dp_{i,j}+\\operatorname{dist}(i,i+1) \u66f4\u65b0 dp_{i+1,j} dp_{i+1,j} \u82e5\u5c06 j j \u79fb\u52a8\u81f3 i+1 i+1 \uff0c\u7528 dp_{i,j}+\\operatorname{dist}(j,i+1) dp_{i,j}+\\operatorname{dist}(j,i+1) \u66f4\u65b0 dp_{i+1,i} dp_{i+1,i} \u8fd9\u4e2a DP \u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002 dp_{i+1} dp_{i+1} \u548c dp_i dp_i \u7684\u4e0d\u540c\u4e4b\u5904\u53ea\u5728\u4e8e\uff0c dp_{i+1} dp_{i+1} \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u6bd4 dp_i dp_i \u4e2d\u7684\u591a\u51fa\u4e86 \\operatorname{dist}(i,i+1) \\operatorname{dist}(i,i+1) \uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5143\u7d20 dp_{i+1,i}=\\max (dp_{i,j}+\\operatorname{dist}(j,i+1)) dp_{i+1,i}=\\max (dp_{i,j}+\\operatorname{dist}(j,i+1)) \u3002 \u5bf9\u4e8e\u5168\u4f53\u589e\u52a0 \\operatorname{dist}(i,i+1) \\operatorname{dist}(i,i+1) \u8fd9\u4e00\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf\u8f7b\u677e\u7ef4\u62a4\u3002\u552f\u4e00\u56f0\u96be\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u8981\u5728\u4f4e\u4e8e O(n) O(n) \u65f6\u95f4\u5185\u627e\u5230\u4e00\u4e2a\u80fd\u6700\u5927\u5316 dp_{i,j}+\\operatorname{dist}(j,i+1) dp_{i,j}+\\operatorname{dist}(j,i+1) \u7684 j j \uff0c\u7528\u5b83\u6765\u66f4\u65b0 dp_{i+1,i} dp_{i+1,i} \u3002 \u8003\u8651\u6784\u5efa\u539f\u6811\u7684\u70b9\u5206\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u5176\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u6bcf\u4e00\u6b21\u6211\u4eec\u53ef\u4ee5 O(\\log^2 n) O(\\log^2 n) (\u8fd8\u6709\u4e00\u4e2a log \u662f\u6c42\u8ddd\u79bb\u4ea7\u751f\u7684) \u67e5\u8be2\u6700\u5927\u7684 dp_{i,j}+\\operatorname{dist}(j,i+1) dp_{i,j}+\\operatorname{dist}(j,i+1) \u5e76\u4fee\u6539\u3002 \u8fd9\u6837\uff0c\u5bf9\u4e8e\u786e\u5b9a\u7684\u67d0\u4e00\u5929\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5 O(n\\log^2 n) O(n\\log^2 n) \u6c42\u51fa Bob \u7684\u6700\u5927\u5206\u6570\u4e86\u3002\u89c2\u5bdf\u5230\uff0c\u6bcf\u79cd\u65b9\u6848\u7684\u5206\u6570\u662f\u82e5\u5e72\u4e2a\u7ebf\u6027\u51fd\u6570\u7684\u548c\uff0c\u540c\u6837\u662f\u7ebf\u6027\u51fd\u6570\uff1b\u800c\u6bcf\u5929\u7684\u6700\u5927\u5206\u6570\u662f\u6240\u6709\u65b9\u6848\u7684\u6700\u5927\u503c\uff0c\u4f5c\u4e3a\u82e5\u5e72\u7ebf\u6027\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u5f00\u53e3\u5411\u4e0a\u7684\u51f8\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u5206\u6c42\u51fa\u8fd9\u4e2a\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002\u603b\u590d\u6742\u5ea6\u4e3a O(n\\log^2 n\\log m) O(n\\log^2 n\\log m) \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> template < typename T1 , typename T2 > inline void chkmax ( T1 & a , const T2 & b ){ if ( b > a ) a = b ; } typedef long long int ll ; const int maxn = 1e5 + 19 ; const ll inf = 1e18 ; struct Edge { int to , next , k , b ; } edge [ maxn << 1 ]; int head [ maxn ]; inline void add ( int from , int to , int k , int b ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ], k , b }; head [ from ] = head [ 0 ]; } bool vist [ maxn ]; struct TreeEngine { int sz , rt , size [ maxn ], heavy [ maxn ]; int st [ maxn ], tp ; void getsz ( int node , int f ){ st [ ++ tp ] = node ; size [ node ] = 1 , heavy [ node ] = 0 ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != f ){ getsz ( edge [ i ]. to , node ); size [ node ] += size [ edge [ i ]. to ]; heavy [ node ] = std :: max ( heavy [ node ], size [ edge [ i ]. to ]); } } int find ( int node ){ tp = 0 , getsz ( node , 0 ), sz = size [ node ]; rt = st [ 1 ]; for ( int i = 1 ; i <= tp ; ++ i ){ int node = st [ i ]; heavy [ node ] = std :: max ( heavy [ node ], sz - size [ node ]); if ( heavy [ node ] < heavy [ rt ]) rt = node ; } return rt ; } int dep [ maxn ], fa [ maxn ], son [ maxn ], top [ maxn ]; std :: pair < int , ll > d [ maxn ]; void dfs1 ( int node , int f ){ size [ node ] = 1 , fa [ node ] = f , dep [ node ] = dep [ f ] + 1 ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( edge [ i ]. to != f ){ d [ edge [ i ]. to ] = std :: make_pair ( d [ node ]. first + edge [ i ]. k , d [ node ]. second + edge [ i ]. b ); dfs1 ( edge [ i ]. to , node ); size [ node ] += size [ edge [ i ]. to ]; if ( size [ edge [ i ]. to ] > size [ son [ node ]]) son [ node ] = edge [ i ]. to ; } } void dfs2 ( int node , int f , int t ){ top [ node ] = t ; if ( son [ node ]) dfs2 ( son [ node ], node , t ); for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( edge [ i ]. to != f && edge [ i ]. to != son [ node ]) dfs2 ( edge [ i ]. to , node , edge [ i ]. to ); } int lca ( int x , int y ){ while ( top [ x ] != top [ y ]) if ( dep [ top [ x ]] > dep [ top [ y ]]) x = fa [ top [ x ]]; else y = fa [ top [ y ]]; return dep [ x ] < dep [ y ] ? x : y ; } ll dist ( int u , int v , int x ){ int l = lca ( u , v ); int k = d [ u ]. first + d [ v ]. first - d [ l ]. first * 2 ; ll b = d [ u ]. second + d [ v ]. second - d [ l ]. second * 2 ; return ( ll ) k * x + b ; } } mt ; int fa [ maxn ]; int build ( int node ){ node = mt . find ( node ); vist [ node ] = true ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ]){ int v = build ( edge [ i ]. to ); fa [ v ] = node ; } return node ; } int n , m ; struct Solver { int x ; ll dp [ maxn ], tag ; std :: pair < ll , int > val [ maxn ][ 2 ]; void push ( int node , const std :: pair < ll , int > & v ){ if ( v . second == val [ node ][ 0 ]. second || v . second == val [ node ][ 1 ]. second ){ if ( v . second == val [ node ][ 0 ]. second ) chkmax ( val [ node ][ 0 ]. first , v . first ); else chkmax ( val [ node ][ 1 ]. first , v . first ); if ( val [ node ][ 1 ] > val [ node ][ 0 ]) std :: swap ( val [ node ][ 0 ], val [ node ][ 1 ]); } else { if ( v . first > val [ node ][ 0 ]. first ) val [ node ][ 1 ] = val [ node ][ 0 ], val [ node ][ 0 ] = v ; else if ( v . first > val [ node ][ 1 ]. first ) val [ node ][ 1 ] = v ; } } ll dist ( int u , int v ){ return mt . dist ( u , v , x ); } void insert ( int node ){ int p = node ; push ( node , std :: make_pair ( dp [ node ], 0 )); while ( fa [ p ]){ push ( fa [ p ], std :: make_pair ( dp [ node ] + dist ( fa [ p ], node ), p )); p = fa [ p ]; } } ll query ( int node ){ int p = node ; ll res = val [ p ][ 0 ]. first ; while ( fa [ p ]){ if ( p == val [ fa [ p ]][ 0 ]. second ) chkmax ( res , val [ fa [ p ]][ 1 ]. first + dist ( fa [ p ], node )); else chkmax ( res , val [ fa [ p ]][ 0 ]. first + dist ( fa [ p ], node )); p = fa [ p ]; } return res ; } ll check ( int x ){ for ( int i = 1 ; i <= n ; ++ i ) val [ i ][ 0 ] = val [ i ][ 1 ] = std :: make_pair ( - inf , 0 ); this -> x = x , tag = 0l l , dp [ 1 ] = 0l l , insert ( 1 ); for ( int i = 3 ; i <= n ; ++ i ){ dp [ i - 1 ] = query ( i ) + tag ; tag += dist ( i , i - 1 ), dp [ i - 1 ] -= tag ; insert ( i - 1 ); } ll res = - inf ; for ( int i = 1 ; i < n ; ++ i ) chkmax ( res , dp [ i ]); return res + tag ; } } sol ; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 2 , u , v , k , b ; i <= n ; ++ i ){ std :: scanf ( \"%d%d%d%d\" , & u , & v , & k , & b ); add ( u , v , k , b ), add ( v , u , k , b ); } build ( 1 ), mt . dfs1 ( 1 , 0 ), mt . dfs2 ( 1 , 0 , 1 ); int l = 1 , r = m ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( sol . check ( mid ) < sol . check ( mid + 1 )) r = mid ; else l = mid + 1 ; } std :: printf ( \"%lld \\n \" , sol . check ( l )); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2021 \u6811\u4e0a\u7684\u535a\u5f08","title":"\u6811\u4e0a\u7684\u535a\u5f08"},{"location":"problem/2021/march/noi2121/#_1","text":"","title":"\u6811\u4e0a\u7684\u535a\u5f08"},{"location":"problem/2021/march/noi2121/#_2","text":"\u7ed9\u5b9a\u4e00\u68f5 n n \u4e2a\u70b9\u7684\u65e0\u6839\u6811\uff0c\u70b9\u7f16\u53f7\u4e3a 1,2,\\ldots,n 1,2,\\ldots,n \u3002\u5728\u7b2c x x \u5929\uff0c\u7b2c i i \u6761\u8fb9\u7684\u8fb9\u6743\u4e3a k_ix+b_i k_ix+b_i \u3002 Bob \u6709\u4e24\u4e2a\u68cb\u5b50\uff0c\u521d\u59cb\u65f6\u4f4d\u7f6e\u5206\u522b\u4e3a a=1 a=1 \u548c b=2 b=2 \u3002Bob \u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u4e24\u79cd\u64cd\u4f5c\u4e4b\u4e00\uff1a \u5c06 a a \u4ece\u5f53\u524d\u4f4d\u7f6e\u79fb\u52a8\u81f3\u4e00\u4e2a\u672a\u904d\u5386\u8fc7\u7684\u70b9 a^\\prime a^\\prime ( a^\\prime>a a^\\prime>a )\uff0c\u5e76\u83b7\u53d6\u7b49\u4e8e\u5b83\u4eec\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u603b\u548c\u7684\u5206\u6570\u3002\u9664\u4e86 a^\\prime a^\\prime \uff0c\u8def\u5f84\u4e0a\u7684\u5176\u4ed6\u70b9\u4e0d\u7b97\u88ab\u904d\u5386\u8fc7\u3002 \u5c06 b b \u4ece\u5f53\u524d\u4f4d\u7f6e\u79fb\u52a8\u81f3\u4e00\u4e2a\u672a\u904d\u5386\u8fc7\u7684\u70b9 b^\\prime b^\\prime ( b^\\prime>b b^\\prime>b )\uff0c\u5e76\u83b7\u53d6\u7b49\u4e8e\u5b83\u4eec\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u603b\u548c\u7684\u5206\u6570\u3002\u9664\u4e86 b^\\prime b^\\prime \uff0c\u8def\u5f84\u4e0a\u7684\u5176\u4ed6\u70b9\u4e0d\u7b97\u88ab\u904d\u5386\u8fc7\u3002 Bob \u4f1a\u6267\u884c n-2 n-2 \u6b21\u64cd\u4f5c\uff0c\u904d\u5386\u6811\u4e0a\u6240\u6709\u7684\u70b9\uff0c\u5e76\u603b\u662f\u4ee5\u6700\u4f18\u65b9\u6848\u5f97\u5230\u6700\u591a\u7684\u5206\u6570\u3002\u8bf7\u9009\u62e9\u4e00\u5929 x x \u8ba9 Bob \u83b7\u5f97\u7684\u5206\u6570\u6700\u5c0f\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2121/#_3","text":"\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86 x x \uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 O(n^2) O(n^2) \u7684\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u51fa Bob \u80fd\u591f\u5f97\u5230\u7684\u6700\u591a\u5206\u6570\u3002\u8bbe dp_{i,j} dp_{i,j} \u8868\u793a\u4e24\u4e2a\u68cb\u5b50\u5206\u522b\u5728 i,j i,j ( i>j i>j ) \u65f6 Bob \u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\uff0c\u5219\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a \u82e5\u5c06 i i \u79fb\u52a8\u81f3 i+1 i+1 \uff0c\u7528 dp_{i,j}+\\operatorname{dist}(i,i+1) dp_{i,j}+\\operatorname{dist}(i,i+1) \u66f4\u65b0 dp_{i+1,j} dp_{i+1,j} \u82e5\u5c06 j j \u79fb\u52a8\u81f3 i+1 i+1 \uff0c\u7528 dp_{i,j}+\\operatorname{dist}(j,i+1) dp_{i,j}+\\operatorname{dist}(j,i+1) \u66f4\u65b0 dp_{i+1,i} dp_{i+1,i} \u8fd9\u4e2a DP \u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002 dp_{i+1} dp_{i+1} \u548c dp_i dp_i \u7684\u4e0d\u540c\u4e4b\u5904\u53ea\u5728\u4e8e\uff0c dp_{i+1} dp_{i+1} \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u6bd4 dp_i dp_i \u4e2d\u7684\u591a\u51fa\u4e86 \\operatorname{dist}(i,i+1) \\operatorname{dist}(i,i+1) \uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5143\u7d20 dp_{i+1,i}=\\max (dp_{i,j}+\\operatorname{dist}(j,i+1)) dp_{i+1,i}=\\max (dp_{i,j}+\\operatorname{dist}(j,i+1)) \u3002 \u5bf9\u4e8e\u5168\u4f53\u589e\u52a0 \\operatorname{dist}(i,i+1) \\operatorname{dist}(i,i+1) \u8fd9\u4e00\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u53d8\u91cf\u8f7b\u677e\u7ef4\u62a4\u3002\u552f\u4e00\u56f0\u96be\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u8981\u5728\u4f4e\u4e8e O(n) O(n) \u65f6\u95f4\u5185\u627e\u5230\u4e00\u4e2a\u80fd\u6700\u5927\u5316 dp_{i,j}+\\operatorname{dist}(j,i+1) dp_{i,j}+\\operatorname{dist}(j,i+1) \u7684 j j \uff0c\u7528\u5b83\u6765\u66f4\u65b0 dp_{i+1,i} dp_{i+1,i} \u3002 \u8003\u8651\u6784\u5efa\u539f\u6811\u7684\u70b9\u5206\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u5176\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u6bcf\u4e00\u6b21\u6211\u4eec\u53ef\u4ee5 O(\\log^2 n) O(\\log^2 n) (\u8fd8\u6709\u4e00\u4e2a log \u662f\u6c42\u8ddd\u79bb\u4ea7\u751f\u7684) \u67e5\u8be2\u6700\u5927\u7684 dp_{i,j}+\\operatorname{dist}(j,i+1) dp_{i,j}+\\operatorname{dist}(j,i+1) \u5e76\u4fee\u6539\u3002 \u8fd9\u6837\uff0c\u5bf9\u4e8e\u786e\u5b9a\u7684\u67d0\u4e00\u5929\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5 O(n\\log^2 n) O(n\\log^2 n) \u6c42\u51fa Bob \u7684\u6700\u5927\u5206\u6570\u4e86\u3002\u89c2\u5bdf\u5230\uff0c\u6bcf\u79cd\u65b9\u6848\u7684\u5206\u6570\u662f\u82e5\u5e72\u4e2a\u7ebf\u6027\u51fd\u6570\u7684\u548c\uff0c\u540c\u6837\u662f\u7ebf\u6027\u51fd\u6570\uff1b\u800c\u6bcf\u5929\u7684\u6700\u5927\u5206\u6570\u662f\u6240\u6709\u65b9\u6848\u7684\u6700\u5927\u503c\uff0c\u4f5c\u4e3a\u82e5\u5e72\u7ebf\u6027\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u5f00\u53e3\u5411\u4e0a\u7684\u51f8\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u5206\u6c42\u51fa\u8fd9\u4e2a\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002\u603b\u590d\u6742\u5ea6\u4e3a O(n\\log^2 n\\log m) O(n\\log^2 n\\log m) \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2121/#_4","text":"#include <bits/stdc++.h> template < typename T1 , typename T2 > inline void chkmax ( T1 & a , const T2 & b ){ if ( b > a ) a = b ; } typedef long long int ll ; const int maxn = 1e5 + 19 ; const ll inf = 1e18 ; struct Edge { int to , next , k , b ; } edge [ maxn << 1 ]; int head [ maxn ]; inline void add ( int from , int to , int k , int b ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ], k , b }; head [ from ] = head [ 0 ]; } bool vist [ maxn ]; struct TreeEngine { int sz , rt , size [ maxn ], heavy [ maxn ]; int st [ maxn ], tp ; void getsz ( int node , int f ){ st [ ++ tp ] = node ; size [ node ] = 1 , heavy [ node ] = 0 ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != f ){ getsz ( edge [ i ]. to , node ); size [ node ] += size [ edge [ i ]. to ]; heavy [ node ] = std :: max ( heavy [ node ], size [ edge [ i ]. to ]); } } int find ( int node ){ tp = 0 , getsz ( node , 0 ), sz = size [ node ]; rt = st [ 1 ]; for ( int i = 1 ; i <= tp ; ++ i ){ int node = st [ i ]; heavy [ node ] = std :: max ( heavy [ node ], sz - size [ node ]); if ( heavy [ node ] < heavy [ rt ]) rt = node ; } return rt ; } int dep [ maxn ], fa [ maxn ], son [ maxn ], top [ maxn ]; std :: pair < int , ll > d [ maxn ]; void dfs1 ( int node , int f ){ size [ node ] = 1 , fa [ node ] = f , dep [ node ] = dep [ f ] + 1 ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( edge [ i ]. to != f ){ d [ edge [ i ]. to ] = std :: make_pair ( d [ node ]. first + edge [ i ]. k , d [ node ]. second + edge [ i ]. b ); dfs1 ( edge [ i ]. to , node ); size [ node ] += size [ edge [ i ]. to ]; if ( size [ edge [ i ]. to ] > size [ son [ node ]]) son [ node ] = edge [ i ]. to ; } } void dfs2 ( int node , int f , int t ){ top [ node ] = t ; if ( son [ node ]) dfs2 ( son [ node ], node , t ); for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( edge [ i ]. to != f && edge [ i ]. to != son [ node ]) dfs2 ( edge [ i ]. to , node , edge [ i ]. to ); } int lca ( int x , int y ){ while ( top [ x ] != top [ y ]) if ( dep [ top [ x ]] > dep [ top [ y ]]) x = fa [ top [ x ]]; else y = fa [ top [ y ]]; return dep [ x ] < dep [ y ] ? x : y ; } ll dist ( int u , int v , int x ){ int l = lca ( u , v ); int k = d [ u ]. first + d [ v ]. first - d [ l ]. first * 2 ; ll b = d [ u ]. second + d [ v ]. second - d [ l ]. second * 2 ; return ( ll ) k * x + b ; } } mt ; int fa [ maxn ]; int build ( int node ){ node = mt . find ( node ); vist [ node ] = true ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ]){ int v = build ( edge [ i ]. to ); fa [ v ] = node ; } return node ; } int n , m ; struct Solver { int x ; ll dp [ maxn ], tag ; std :: pair < ll , int > val [ maxn ][ 2 ]; void push ( int node , const std :: pair < ll , int > & v ){ if ( v . second == val [ node ][ 0 ]. second || v . second == val [ node ][ 1 ]. second ){ if ( v . second == val [ node ][ 0 ]. second ) chkmax ( val [ node ][ 0 ]. first , v . first ); else chkmax ( val [ node ][ 1 ]. first , v . first ); if ( val [ node ][ 1 ] > val [ node ][ 0 ]) std :: swap ( val [ node ][ 0 ], val [ node ][ 1 ]); } else { if ( v . first > val [ node ][ 0 ]. first ) val [ node ][ 1 ] = val [ node ][ 0 ], val [ node ][ 0 ] = v ; else if ( v . first > val [ node ][ 1 ]. first ) val [ node ][ 1 ] = v ; } } ll dist ( int u , int v ){ return mt . dist ( u , v , x ); } void insert ( int node ){ int p = node ; push ( node , std :: make_pair ( dp [ node ], 0 )); while ( fa [ p ]){ push ( fa [ p ], std :: make_pair ( dp [ node ] + dist ( fa [ p ], node ), p )); p = fa [ p ]; } } ll query ( int node ){ int p = node ; ll res = val [ p ][ 0 ]. first ; while ( fa [ p ]){ if ( p == val [ fa [ p ]][ 0 ]. second ) chkmax ( res , val [ fa [ p ]][ 1 ]. first + dist ( fa [ p ], node )); else chkmax ( res , val [ fa [ p ]][ 0 ]. first + dist ( fa [ p ], node )); p = fa [ p ]; } return res ; } ll check ( int x ){ for ( int i = 1 ; i <= n ; ++ i ) val [ i ][ 0 ] = val [ i ][ 1 ] = std :: make_pair ( - inf , 0 ); this -> x = x , tag = 0l l , dp [ 1 ] = 0l l , insert ( 1 ); for ( int i = 3 ; i <= n ; ++ i ){ dp [ i - 1 ] = query ( i ) + tag ; tag += dist ( i , i - 1 ), dp [ i - 1 ] -= tag ; insert ( i - 1 ); } ll res = - inf ; for ( int i = 1 ; i < n ; ++ i ) chkmax ( res , dp [ i ]); return res + tag ; } } sol ; int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 2 , u , v , k , b ; i <= n ; ++ i ){ std :: scanf ( \"%d%d%d%d\" , & u , & v , & k , & b ); add ( u , v , k , b ), add ( v , u , k , b ); } build ( 1 ), mt . dfs1 ( 1 , 0 ), mt . dfs2 ( 1 , 0 , 1 ); int l = 1 , r = m ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( sol . check ( mid ) < sol . check ( mid + 1 )) r = mid ; else l = mid + 1 ; } std :: printf ( \"%lld \\n \" , sol . check ( l )); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2121/#_5","text":"NOI.AC #2021 \u6811\u4e0a\u7684\u535a\u5f08","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2122/","text":"\u5e93\u4ed1\u529b \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u6570\u8f74\u4e0a\u7684 n n \u4e2a\u7535\u8377\uff0c\u4f4d\u7f6e\u548c\u7535\u91cf\u5206\u522b\u4e3a x_i x_i \u548c q_i q_i \u3002\u6709\u4e24\u4e2a\u96c6\u5408 A,B A,B \uff0c\u4e00\u4e9b\u7535\u8377\u4e8b\u5148\u5df2\u7ecf\u88ab\u5206\u914d\u5230 A,B A,B \u4e2d\u7684\u4e00\u4e2a\u3002\u5c06\u5269\u4e0b\u7684\u7535\u8377\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5206\u914d\u5230 A,B A,B \u4e4b\u4e00\uff0c\u4f7f\u5f97 A,B A,B \u975e\u7a7a\u4e14\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u4e24\u4e2a\u7535\u8377\u4e4b\u95f4\u7684\u6700\u5c0f\u5e93\u4ed1\u529b\u6700\u5927\u3002 \u89e3\u6790 \u00b6 \u8fd9\u4e2a\u6700\u5c0f\u5e93\u4ed1\u529b\u4e00\u5b9a\u662f \\binom{n}{2} \\binom{n}{2} \u4e2a\u7535\u8377\u5bf9\u4e2d\u7684\u67d0\u4e00\u5bf9\u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\u3002\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u90a3\u4e9b\u56e0\u4e3a\u4e4b\u95f4\u5e93\u4ed1\u529b\u5c0f\u4e8e\u7b54\u6848\u800c\u4e0d\u80fd\u5206\u914d\u5230\u540c\u4e00\u96c6\u5408\u7684\u7535\u8377\u5bf9\u8fde\u8fb9\uff0c\u7136\u540e\u5224\u65ad\u80fd\u5426\u9ed1\u767d\u67d3\u8272 (\u662f\u5426\u662f\u4e8c\u5206\u56fe)\uff0c\u5373\u53ef\u505a\u5230 O(n^2\\log n) O(n^2\\log n) \u7684\u590d\u6742\u5ea6\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u8fb9\u6743 (\u4e24\u70b9\u4e4b\u95f4\u8fb9\u7684\u8fb9\u6743\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u5e93\u4ed1\u529b) \u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u5728\u52a0\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u80fd\u5426\u9ed1\u767d\u67d3\u8272\uff0c\u7701\u53bb\u4e8c\u5206\u7684\u8fc7\u7a0b (\u7531\u4e8e\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4ecd\u4e3a O(n^2\\log n) O(n^2\\log n) )\u3002 \u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u52a0\u8fb9\uff1a\u8fd9\u5f88\u50cf Kruskal \u7b97\u6cd5\u7684\u8fc7\u7a0b\u3002\u5982\u679c\u6211\u4eec\u4fdd\u7559\u539f\u56fe\u7684\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5bf9\u5176\u9ed1\u767d\u67d3\u8272\uff0c\u662f\u5426\u4e5f\u80fd\u5f97\u5230\u6700\u4f18\u65b9\u6848\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002 \u8bc1\u660e \u4e0e\u539f\u8fc7\u7a0b\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cKruskal \u7b97\u6cd5\u4e0d\u52a0\u90a3\u4e9b\u6210\u73af\u7684\u8fb9\u3002 \u82e5\u4e00\u6761\u8fb9\u6210\u5947\u73af\uff0c\u5219\u5176\u4e0d\u8bba\u5728\u539f\u8fc7\u7a0b\u8fd8\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u5bf9\u5e94\u7684\u65b9\u6848\u4e2d\u90fd\u56e0\u8fde\u63a5\u4e86\u540c\u8272\u70b9\u4f1a\u88ab\u8ba1\u5165\u7b54\u6848\u3002 \u82e5\u4e00\u6761\u8fb9\u6210\u5076\u73af\uff0c\u5219\u5176\u4e0d\u8bba\u5728\u539f\u8fc7\u7a0b\u8fd8\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u5bf9\u5e94\u7684\u65b9\u6848\u4e2d\u90fd\u56e0\u8fde\u63a5\u4e86\u5f02\u8272\u70b9\u800c\u4e0d\u4f1a\u88ab\u8ba1\u5165\u7b54\u6848\u3002 \u6545\u5ffd\u7565\u8fd9\u4e9b\u70b9\uff0c\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7b54\u6848\u3002 \u5f53\u7136\uff0c\u8fd9\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u80fd\u7528 Kruskal \u6765\u6c42\u3002\u8003\u8651\u4f7f\u7528 Bor\u016fvka \u7b97\u6cd5 \u6c42\u7a20\u5bc6\u56fe\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6bcf\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u6c42\u51fa\u4ece\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u8fde\u5411\u5b83\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002\u6839\u636e\u5e93\u4ed1\u5b9a\u5f8b\uff0c\u4e24\u4e2a\u7535\u8377\u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\u6b63\u6bd4\u4e8e \\dfrac{q_iq_j}{(x_i-x_j)^2} \\dfrac{q_iq_j}{(x_i-x_j)^2} \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e09\u4e2a\u7535\u8377 a,b,c a,b,c ( x_a<x_b<x_c x_a<x_b<x_c )\uff0c\u82e5 b b \u4e0e c c \u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\u5c0f\u4e8e\u7b49\u4e8e a a \u4e0e c c \u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\uff0c\u5373 \\begin{aligned} \\dfrac{q_b}{(x_c-x_b)^2}&\\le\\dfrac{q_a}{(x_c-x_a)^2}\\\\ \\dfrac{q_b}{q_a}&\\le\\left(\\dfrac{x_c-x_b}{x_c-x_a}\\right)^2 \\end{aligned} \\begin{aligned} \\dfrac{q_b}{(x_c-x_b)^2}&\\le\\dfrac{q_a}{(x_c-x_a)^2}\\\\ \\dfrac{q_b}{q_a}&\\le\\left(\\dfrac{x_c-x_b}{x_c-x_a}\\right)^2 \\end{aligned} \u8003\u8651 f(x_a,x_b,x_c)=\\dfrac{x_c-x_b}{x_c-x_a} f(x_a,x_b,x_c)=\\dfrac{x_c-x_b}{x_c-x_a} \u5173\u4e8e x_c x_c \u7684\u504f\u5bfc\u6570\u4e3a f_{x_c}^\\prime(x_a,x_b,x_c)=\\dfrac{x_b-x_a}{(x_c-x_a)^2} f_{x_c}^\\prime(x_a,x_b,x_c)=\\dfrac{x_b-x_a}{(x_c-x_a)^2} \uff0c\u5176\u503c\u603b\u662f\u5927\u4e8e 0 0 \u3002\u6545\u4e00\u65e6 b b \u5728 c c \u5904\u5e93\u4ed1\u529b\u6bd4 a a \u7684\u5c0f\uff0c\u5728 c c \u53f3\u8fb9\u7684\u4efb\u4f55\u4f4d\u7f6e\u5904\u90fd\u5c06\u7ee7\u7eed\u6bd4 a a \u7684\u5e93\u4ed1\u529b\u5c0f\u3002\u8fd9\u662f\u4e00\u4e2a\u81ea\u65e0\u5173\u7684\u51b3\u7b56\u5355\u8c03\u6027\uff0c\u53ef\u4ee5 O(n\\log n) O(n\\log n) \u5206\u6cbb\u6c42\u3002 \u7136\u800c\uff0c\u82e5\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u8fd9\u6837\u6c42\u4e00\u6b21\uff0c\u603b\u590d\u6742\u5ea6\u53ef\u8fbe O(n^2\\log n) O(n^2\\log n) \u3002\u53ea\u8981\u5bf9\u8fde\u901a\u5757\u4e8c\u8fdb\u5236\u5206\u7ec4 (\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u5206\u6cbb) \u5c31\u53ef\u4ee5\u505a\u5230 O(n\\log^2n) O(n\\log^2n) \u7684\u590d\u6742\u5ea6\u3002 \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u6211\u4eec\u518d O(n\\log n) O(n\\log n) \u7edf\u8ba1\u7b54\u6848\u3002Bor\u016fvka \u81f3\u591a\u8fdb\u884c O(\\log n) O(\\log n) \u6b21\u8fed\u4ee3\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(n\\log^3n) O(n\\log^3n) \u3002 \u5b9e\u73b0 \u00b6 \u4e0d\u4f1a\u5199 \u6765\u6e90 \u00b6 NOI.AC #2122 \u5e93\u4ed1\u529b","title":"\u5e93\u4ed1\u529b"},{"location":"problem/2021/march/noi2122/#_1","text":"","title":"\u5e93\u4ed1\u529b"},{"location":"problem/2021/march/noi2122/#_2","text":"\u7ed9\u5b9a\u6570\u8f74\u4e0a\u7684 n n \u4e2a\u7535\u8377\uff0c\u4f4d\u7f6e\u548c\u7535\u91cf\u5206\u522b\u4e3a x_i x_i \u548c q_i q_i \u3002\u6709\u4e24\u4e2a\u96c6\u5408 A,B A,B \uff0c\u4e00\u4e9b\u7535\u8377\u4e8b\u5148\u5df2\u7ecf\u88ab\u5206\u914d\u5230 A,B A,B \u4e2d\u7684\u4e00\u4e2a\u3002\u5c06\u5269\u4e0b\u7684\u7535\u8377\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5206\u914d\u5230 A,B A,B \u4e4b\u4e00\uff0c\u4f7f\u5f97 A,B A,B \u975e\u7a7a\u4e14\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u4e24\u4e2a\u7535\u8377\u4e4b\u95f4\u7684\u6700\u5c0f\u5e93\u4ed1\u529b\u6700\u5927\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2122/#_3","text":"\u8fd9\u4e2a\u6700\u5c0f\u5e93\u4ed1\u529b\u4e00\u5b9a\u662f \\binom{n}{2} \\binom{n}{2} \u4e2a\u7535\u8377\u5bf9\u4e2d\u7684\u67d0\u4e00\u5bf9\u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\u3002\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u90a3\u4e9b\u56e0\u4e3a\u4e4b\u95f4\u5e93\u4ed1\u529b\u5c0f\u4e8e\u7b54\u6848\u800c\u4e0d\u80fd\u5206\u914d\u5230\u540c\u4e00\u96c6\u5408\u7684\u7535\u8377\u5bf9\u8fde\u8fb9\uff0c\u7136\u540e\u5224\u65ad\u80fd\u5426\u9ed1\u767d\u67d3\u8272 (\u662f\u5426\u662f\u4e8c\u5206\u56fe)\uff0c\u5373\u53ef\u505a\u5230 O(n^2\\log n) O(n^2\\log n) \u7684\u590d\u6742\u5ea6\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u8fb9\u6743 (\u4e24\u70b9\u4e4b\u95f4\u8fb9\u7684\u8fb9\u6743\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u5e93\u4ed1\u529b) \u4ece\u5c0f\u5230\u5927\u52a0\u8fb9\uff0c\u5728\u52a0\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u80fd\u5426\u9ed1\u767d\u67d3\u8272\uff0c\u7701\u53bb\u4e8c\u5206\u7684\u8fc7\u7a0b (\u7531\u4e8e\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4ecd\u4e3a O(n^2\\log n) O(n^2\\log n) )\u3002 \u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u52a0\u8fb9\uff1a\u8fd9\u5f88\u50cf Kruskal \u7b97\u6cd5\u7684\u8fc7\u7a0b\u3002\u5982\u679c\u6211\u4eec\u4fdd\u7559\u539f\u56fe\u7684\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5bf9\u5176\u9ed1\u767d\u67d3\u8272\uff0c\u662f\u5426\u4e5f\u80fd\u5f97\u5230\u6700\u4f18\u65b9\u6848\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002 \u8bc1\u660e \u4e0e\u539f\u8fc7\u7a0b\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cKruskal \u7b97\u6cd5\u4e0d\u52a0\u90a3\u4e9b\u6210\u73af\u7684\u8fb9\u3002 \u82e5\u4e00\u6761\u8fb9\u6210\u5947\u73af\uff0c\u5219\u5176\u4e0d\u8bba\u5728\u539f\u8fc7\u7a0b\u8fd8\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u5bf9\u5e94\u7684\u65b9\u6848\u4e2d\u90fd\u56e0\u8fde\u63a5\u4e86\u540c\u8272\u70b9\u4f1a\u88ab\u8ba1\u5165\u7b54\u6848\u3002 \u82e5\u4e00\u6761\u8fb9\u6210\u5076\u73af\uff0c\u5219\u5176\u4e0d\u8bba\u5728\u539f\u8fc7\u7a0b\u8fd8\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u5bf9\u5e94\u7684\u65b9\u6848\u4e2d\u90fd\u56e0\u8fde\u63a5\u4e86\u5f02\u8272\u70b9\u800c\u4e0d\u4f1a\u88ab\u8ba1\u5165\u7b54\u6848\u3002 \u6545\u5ffd\u7565\u8fd9\u4e9b\u70b9\uff0c\u4e5f\u80fd\u5f97\u5230\u540c\u6837\u7684\u7b54\u6848\u3002 \u5f53\u7136\uff0c\u8fd9\u68f5\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u80fd\u7528 Kruskal \u6765\u6c42\u3002\u8003\u8651\u4f7f\u7528 Bor\u016fvka \u7b97\u6cd5 \u6c42\u7a20\u5bc6\u56fe\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6bcf\u6b21\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u6c42\u51fa\u4ece\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u8fde\u5411\u5b83\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002\u6839\u636e\u5e93\u4ed1\u5b9a\u5f8b\uff0c\u4e24\u4e2a\u7535\u8377\u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\u6b63\u6bd4\u4e8e \\dfrac{q_iq_j}{(x_i-x_j)^2} \\dfrac{q_iq_j}{(x_i-x_j)^2} \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e09\u4e2a\u7535\u8377 a,b,c a,b,c ( x_a<x_b<x_c x_a<x_b<x_c )\uff0c\u82e5 b b \u4e0e c c \u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\u5c0f\u4e8e\u7b49\u4e8e a a \u4e0e c c \u4e4b\u95f4\u7684\u5e93\u4ed1\u529b\uff0c\u5373 \\begin{aligned} \\dfrac{q_b}{(x_c-x_b)^2}&\\le\\dfrac{q_a}{(x_c-x_a)^2}\\\\ \\dfrac{q_b}{q_a}&\\le\\left(\\dfrac{x_c-x_b}{x_c-x_a}\\right)^2 \\end{aligned} \\begin{aligned} \\dfrac{q_b}{(x_c-x_b)^2}&\\le\\dfrac{q_a}{(x_c-x_a)^2}\\\\ \\dfrac{q_b}{q_a}&\\le\\left(\\dfrac{x_c-x_b}{x_c-x_a}\\right)^2 \\end{aligned} \u8003\u8651 f(x_a,x_b,x_c)=\\dfrac{x_c-x_b}{x_c-x_a} f(x_a,x_b,x_c)=\\dfrac{x_c-x_b}{x_c-x_a} \u5173\u4e8e x_c x_c \u7684\u504f\u5bfc\u6570\u4e3a f_{x_c}^\\prime(x_a,x_b,x_c)=\\dfrac{x_b-x_a}{(x_c-x_a)^2} f_{x_c}^\\prime(x_a,x_b,x_c)=\\dfrac{x_b-x_a}{(x_c-x_a)^2} \uff0c\u5176\u503c\u603b\u662f\u5927\u4e8e 0 0 \u3002\u6545\u4e00\u65e6 b b \u5728 c c \u5904\u5e93\u4ed1\u529b\u6bd4 a a \u7684\u5c0f\uff0c\u5728 c c \u53f3\u8fb9\u7684\u4efb\u4f55\u4f4d\u7f6e\u5904\u90fd\u5c06\u7ee7\u7eed\u6bd4 a a \u7684\u5e93\u4ed1\u529b\u5c0f\u3002\u8fd9\u662f\u4e00\u4e2a\u81ea\u65e0\u5173\u7684\u51b3\u7b56\u5355\u8c03\u6027\uff0c\u53ef\u4ee5 O(n\\log n) O(n\\log n) \u5206\u6cbb\u6c42\u3002 \u7136\u800c\uff0c\u82e5\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u8fd9\u6837\u6c42\u4e00\u6b21\uff0c\u603b\u590d\u6742\u5ea6\u53ef\u8fbe O(n^2\\log n) O(n^2\\log n) \u3002\u53ea\u8981\u5bf9\u8fde\u901a\u5757\u4e8c\u8fdb\u5236\u5206\u7ec4 (\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u5206\u6cbb) \u5c31\u53ef\u4ee5\u505a\u5230 O(n\\log^2n) O(n\\log^2n) \u7684\u590d\u6742\u5ea6\u3002 \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u6211\u4eec\u518d O(n\\log n) O(n\\log n) \u7edf\u8ba1\u7b54\u6848\u3002Bor\u016fvka \u81f3\u591a\u8fdb\u884c O(\\log n) O(\\log n) \u6b21\u8fed\u4ee3\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(n\\log^3n) O(n\\log^3n) \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2122/#_4","text":"\u4e0d\u4f1a\u5199","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2122/#_5","text":"NOI.AC #2122 \u5e93\u4ed1\u529b","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2242/","text":"\u5f02\u6216 \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 a_1, a_2, \\ldots, a_n a_1, a_2, \\ldots, a_n \u548c\u4e00\u4e2a\u6570 x x \u3002\u6c42\u5e8f\u5217\u6709\u591a\u5c11\u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u6ee1\u8db3\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u5f02\u6216\u548c\u5927\u4e8e\u7b49\u4e8e x x \u3002 \u89e3\u6790 \u00b6 \u5efa\u7acb\u5e8f\u5217\u7684 01-Trie \u6811\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u8003\u8651\u3002\u8bbe dp_i dp_i \u8868\u793a 01-Trie \u6811\u4e0a\uff0c\u53ea\u9009\u62e9 i i \u53f7\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6570\u65f6\u7684\u65b9\u6848\u6570\u3002 \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u6570\u548c\u53f3\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u6570\u7684\u5f02\u6216\u548c\u7684\u8fd9\u4e00\u4f4d\u4e00\u5b9a\u4e3a 1 1 \u3002\u82e5 x x \u7684\u8fd9\u4e00\u4f4d\u4e3a 0 0 \uff0c\u5219\u5de6\u53f3\u5b50\u6811\u7684\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u6ee1\u8db3\u6761\u4ef6\uff0c\u7b54\u6848\u4e3a\u5de6\u53f3\u5b50\u6811\u7b54\u6848\u7684\u79ef\u3002 dp_i=(dp_{\\text{left}}+1)(dp_\\text{right}+1)-1 dp_i=(dp_{\\text{left}}+1)(dp_\\text{right}+1)-1 \u5982\u679c x x \u7684\u8fd9\u4e00\u4f4d\u4e3a 1 1 \uff0c\u5219\u76f8\u540c\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u6570\u7684\u5f02\u6216\u548c\u7684\u8fd9\u4e00\u4f4d\u4e00\u5b9a\u4e3a 0 0 \uff0c\u5c0f\u4e8e x x \u3002\u56e0\u6b64\u6211\u4eec\u53ea\u80fd\u4ece\u5de6\u53f3\u5b50\u6811\u4e2d\u5206\u522b\u9009\u81f3\u591a 1 1 \u4e2a\u6570\u3002\u76f4\u63a5\u67e5\u627e\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> template < typename Tp > void read ( Tp & res ){ static char ch ; ch = getchar (), res = 0 ; while ( ! std :: isdigit ( ch )) ch = getchar (); while ( std :: isdigit ( ch )) res = res * 10 + ch - 48 , ch = getchar (); } typedef long long int ll ; const int maxn = 3e5 + 19 , maxsize = maxn * 60 , mod = 998244353 ; int T , n ; ll a [ maxn ], x ; int son [ maxsize ][ 2 ], size [ maxsize ], ind = 1 ; void ins ( ll x ){ int node = 1 ; ++ size [ node ]; for ( int i = 59 ; i >= 0 ; -- i ){ int & next = son [ node ][ bool ( x & ( 1ull << i ))]; if ( ! next ) next = ++ ind ; node = next ; ++ size [ node ]; } } ll st [ maxn ]; int top ; int szst [ maxn ]; void put_to_stack ( int node , ll val , int b ){ if ( ! node ) return ; if ( b == -1 ){ st [ ++ top ] = val ; szst [ top ] = size [ node ]; return ; } put_to_stack ( son [ node ][ 1 ], val ^ ( 1ull << b ), b - 1 ); put_to_stack ( son [ node ][ 0 ], val , b - 1 ); } int query ( int node , ll val , int b ){ if ( ! node ) return 0 ; if ( b == -1 ) return size [ node ]; if ( x & ( 1ull << b )) return query ( son [ node ][ 1 ^ bool ( val & ( 1ull << b ))], val , b - 1 ); return query ( son [ node ][ bool ( val & ( 1ull << b ))], val , b - 1 ) + size [ son [ node ][ 1 ^ bool ( val & ( 1ull << b ))]]; } int dp [ maxsize ]; void dfs ( int node , int b ){ if ( ! node ) return ; if ( b == -1 ){ dp [ node ] = size [ node ]; return ; } if ( ! ( x & ( 1ull << b ))){ dfs ( son [ node ][ 0 ], b - 1 ); dfs ( son [ node ][ 1 ], b - 1 ); dp [ node ] = (( ll )( dp [ son [ node ][ 0 ]] + 1 ) * ( dp [ son [ node ][ 1 ]] + 1 ) - 1 ) % mod ; return ; } dp [ node ] = size [ node ]; put_to_stack ( son [ node ][ 0 ], 0l l , b - 1 ); while ( top ){ dp [ node ] = ( dp [ node ] + ( ll ) szst [ top ] * query ( son [ node ][ 1 ], st [ top ], b - 1 )) % mod ; -- top ; } } int main (){ read ( T ), read ( n ), read ( x ); for ( int i = 1 ; i <= n ; ++ i ) read ( a [ i ]); if ( x == 0 ){ int res = 1 ; for ( int i = 1 ; i <= n ; ++ i ) res = ( res * 2 ) % mod ; res = ( res + mod - 1 ) % mod ; std :: printf ( \"%d \\n \" , res ); return 0 ; } for ( int i = 1 ; i <= n ; ++ i ) ins ( a [ i ]); dfs ( 1 , 59 ); std :: printf ( \"%d \\n \" , ( dp [ 1 ] + mod ) % mod ); } \u6765\u6e90 \u00b6 NOI.AC #2242 \u5f02\u6216","title":"\u5f02\u6216"},{"location":"problem/2021/march/noi2242/#_1","text":"","title":"\u5f02\u6216"},{"location":"problem/2021/march/noi2242/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 a_1, a_2, \\ldots, a_n a_1, a_2, \\ldots, a_n \u548c\u4e00\u4e2a\u6570 x x \u3002\u6c42\u5e8f\u5217\u6709\u591a\u5c11\u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u6ee1\u8db3\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u5f02\u6216\u548c\u5927\u4e8e\u7b49\u4e8e x x \u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2242/#_3","text":"\u5efa\u7acb\u5e8f\u5217\u7684 01-Trie \u6811\uff0c\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u8003\u8651\u3002\u8bbe dp_i dp_i \u8868\u793a 01-Trie \u6811\u4e0a\uff0c\u53ea\u9009\u62e9 i i \u53f7\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6570\u65f6\u7684\u65b9\u6848\u6570\u3002 \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u6570\u548c\u53f3\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u6570\u7684\u5f02\u6216\u548c\u7684\u8fd9\u4e00\u4f4d\u4e00\u5b9a\u4e3a 1 1 \u3002\u82e5 x x \u7684\u8fd9\u4e00\u4f4d\u4e3a 0 0 \uff0c\u5219\u5de6\u53f3\u5b50\u6811\u7684\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u6ee1\u8db3\u6761\u4ef6\uff0c\u7b54\u6848\u4e3a\u5de6\u53f3\u5b50\u6811\u7b54\u6848\u7684\u79ef\u3002 dp_i=(dp_{\\text{left}}+1)(dp_\\text{right}+1)-1 dp_i=(dp_{\\text{left}}+1)(dp_\\text{right}+1)-1 \u5982\u679c x x \u7684\u8fd9\u4e00\u4f4d\u4e3a 1 1 \uff0c\u5219\u76f8\u540c\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u6570\u7684\u5f02\u6216\u548c\u7684\u8fd9\u4e00\u4f4d\u4e00\u5b9a\u4e3a 0 0 \uff0c\u5c0f\u4e8e x x \u3002\u56e0\u6b64\u6211\u4eec\u53ea\u80fd\u4ece\u5de6\u53f3\u5b50\u6811\u4e2d\u5206\u522b\u9009\u81f3\u591a 1 1 \u4e2a\u6570\u3002\u76f4\u63a5\u67e5\u627e\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2242/#_4","text":"#include <bits/stdc++.h> template < typename Tp > void read ( Tp & res ){ static char ch ; ch = getchar (), res = 0 ; while ( ! std :: isdigit ( ch )) ch = getchar (); while ( std :: isdigit ( ch )) res = res * 10 + ch - 48 , ch = getchar (); } typedef long long int ll ; const int maxn = 3e5 + 19 , maxsize = maxn * 60 , mod = 998244353 ; int T , n ; ll a [ maxn ], x ; int son [ maxsize ][ 2 ], size [ maxsize ], ind = 1 ; void ins ( ll x ){ int node = 1 ; ++ size [ node ]; for ( int i = 59 ; i >= 0 ; -- i ){ int & next = son [ node ][ bool ( x & ( 1ull << i ))]; if ( ! next ) next = ++ ind ; node = next ; ++ size [ node ]; } } ll st [ maxn ]; int top ; int szst [ maxn ]; void put_to_stack ( int node , ll val , int b ){ if ( ! node ) return ; if ( b == -1 ){ st [ ++ top ] = val ; szst [ top ] = size [ node ]; return ; } put_to_stack ( son [ node ][ 1 ], val ^ ( 1ull << b ), b - 1 ); put_to_stack ( son [ node ][ 0 ], val , b - 1 ); } int query ( int node , ll val , int b ){ if ( ! node ) return 0 ; if ( b == -1 ) return size [ node ]; if ( x & ( 1ull << b )) return query ( son [ node ][ 1 ^ bool ( val & ( 1ull << b ))], val , b - 1 ); return query ( son [ node ][ bool ( val & ( 1ull << b ))], val , b - 1 ) + size [ son [ node ][ 1 ^ bool ( val & ( 1ull << b ))]]; } int dp [ maxsize ]; void dfs ( int node , int b ){ if ( ! node ) return ; if ( b == -1 ){ dp [ node ] = size [ node ]; return ; } if ( ! ( x & ( 1ull << b ))){ dfs ( son [ node ][ 0 ], b - 1 ); dfs ( son [ node ][ 1 ], b - 1 ); dp [ node ] = (( ll )( dp [ son [ node ][ 0 ]] + 1 ) * ( dp [ son [ node ][ 1 ]] + 1 ) - 1 ) % mod ; return ; } dp [ node ] = size [ node ]; put_to_stack ( son [ node ][ 0 ], 0l l , b - 1 ); while ( top ){ dp [ node ] = ( dp [ node ] + ( ll ) szst [ top ] * query ( son [ node ][ 1 ], st [ top ], b - 1 )) % mod ; -- top ; } } int main (){ read ( T ), read ( n ), read ( x ); for ( int i = 1 ; i <= n ; ++ i ) read ( a [ i ]); if ( x == 0 ){ int res = 1 ; for ( int i = 1 ; i <= n ; ++ i ) res = ( res * 2 ) % mod ; res = ( res + mod - 1 ) % mod ; std :: printf ( \"%d \\n \" , res ); return 0 ; } for ( int i = 1 ; i <= n ; ++ i ) ins ( a [ i ]); dfs ( 1 , 59 ); std :: printf ( \"%d \\n \" , ( dp [ 1 ] + mod ) % mod ); }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2242/#_5","text":"NOI.AC #2242 \u5f02\u6216","title":"\u6765\u6e90"},{"location":"problem/2021/march/noi2245/","text":"Company \u00b6 \u9898\u610f \u00b6 \u5728\u7b2c i i \u5929\u4f1a\u6709 m_i m_i \u540d\u5458\u5de5\u4e0a\u73ed\uff0c\u516c\u53f8\u6bcf\u5929\u90fd\u8981\u4e3a\u6bcf\u4f4d\u4e0a\u73ed\u7684\u5458\u5de5\u53d1\u4e00\u6761\u6d88\u6bd2\u6bdb\u5dfe\u3002\u4e00\u6761\u6d88\u6bd2\u6bdb\u5dfe\u5728\u4f7f\u7528\u540e\uff0c\u53ef\u4ee5\u9009\u62e9\u82b1\u8d39 a a \u5929 f_a f_a \u5143\u6d88\u6bd2\uff0c\u4e5f\u53ef\u4ee5\u82b1\u8d39 b b \u5929 f_b f_b \u5143\u6d88\u6bd2\u3002\u8d2d\u4e70\u65b0\u7684\u6d88\u6bd2\u6bdb\u5dfe\u8981\u82b1\u8d39 f f \u5143\u3002\u6c42\u516c\u53f8\u6700\u5c11\u8981\u82b1\u8d39\u591a\u5c11\u94b1\u3002 \u89e3\u6790 \u00b6 \u8fd9\u9053\u9898\u662f\u8d39\u7528\u6d41\u7ecf\u5178\u95ee\u9898 \u9910\u5dfe\u8ba1\u5212 \u7684\u52a0\u5f3a\u7248\uff0c n n \u6269\u5927\u5230\u4e86 10^5 10^5 \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528\u8d39\u7528\u6d41\u4e86\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u8d2d\u4e70\u6bdb\u5dfe\u7684\u6570\u91cf x x \u3002\u7ef4\u62a4\u4e09\u4e2a\u53cc\u7aef\u961f\u5217 \\text{qb},\\text{qa},\\text{qf} \\text{qb},\\text{qa},\\text{qf} \uff0c\u6bcf\u6b21\u4f7f\u7528\u5b8c\u6bdb\u5dfe\u540e\u5c31\u5c06\u5176\u63a8\u5165 \\text{qf} \\text{qf} \uff0c\u8868\u793a\u8ddd\u4f7f\u7528\u5b8c\u4e0d\u8db3 a a \u5929\u7684\u6240\u6709\u6bdb\u5dfe\uff1b\u82e5 \\text{qf} \\text{qf} \u7684\u961f\u9996\u8ddd\u4f7f\u7528\u5b8c\u8fbe\u5230 a a \u5929\uff0c\u5219\u63a8\u5165 \\text{qa} \\text{qa} \uff1b\u82e5 \\text{qa} \\text{qa} \u7684\u961f\u9996\u8ddd\u4f7f\u7528\u5b8c\u8fbe\u5230 b b \u5929\uff0c\u5219\u63a8\u5165 \\text{qb} \\text{qb} \u3002\u82e5\u5f53\u524d\u53ef\u7528\u6bdb\u5dfe\u6570\u91cf\u4e0d\u8db3 m_i m_i \uff0c\u5219\u4f18\u5148\u4ece \\text{qb} \\text{qb} \u4e2d\u83b7\u53d6\u6ca1\u6d17\u7684\u6bdb\u5dfe\uff0c\u6bcf\u4ef6\u4ee3\u4ef7\u4e3a f_b f_b \uff1b\u5426\u5219\u4ece \\text{qa} \\text{qa} \u7684\u5c3e\u90e8\u83b7\u53d6\u6ca1\u6d17\u7684\u6bdb\u5dfe\uff0c\u6bcf\u4ef6\u4ee3\u4ef7\u4e3a f_a f_a \u3002 \u4e8e\u662f\u5bf9\u4e8e\u786e\u5b9a\u7684 x x \uff0c\u6211\u4eec\u80fd\u591f\u5728 O(n) O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u7b54\u6848\u4e86\u3002\u611f\u6027\u7406\u89e3\uff0c\u7b54\u6848\u5173\u4e8e x x \u662f\u51f8\u7684\uff0c\u53ef\u4ee5\u4e09\u5206\u53d6\u6700\u4f18\u503c\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 1e5 + 19 ; int n , a , b , f , fa , fb , m [ maxn ]; int check ( int x ){ int res = x * f , now = x ; std :: deque < std :: pair < int , int > > qb , qa , qf ; for ( int i = 1 ; i <= n ; ++ i ){ while ( ! qf . empty () && qf . front (). first + a + 1 <= i ) qa . push_back ( qf . front ()), qf . pop_front (); while ( ! qa . empty () && qa . front (). first + b + 1 <= i ) qb . push_back ( qa . front ()), qa . pop_front (); while ( now < m [ i ]){ if ( ! qb . empty ()){ int d = std :: min ( qb . front (). second , m [ i ] - now ); qb . front (). second -= d , now += d , res += d * fb ; if ( ! qb . front (). second ) qb . pop_front (); } else if ( ! qa . empty ()){ int d = std :: min ( qa . back (). second , m [ i ] - now ); qa . back (). second -= d , now += d , res += d * fa ; if ( ! qa . back (). second ) qa . pop_back (); } else return 1e9 ; } now -= m [ i ], qf . push_back ( std :: make_pair ( i , m [ i ])); } return res ; } int main (){ std :: scanf ( \"%d%d%d%d%d%d\" , & n , & a , & b , & f , & fa , & fb ); int l = 0 , r = 0 ; for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , m + i ), l = std :: max ( l , m [ i ]), r += m [ i ]; while ( r - l > 6 ){ int m1 = l + ( r - l ) / 3 , m2 = r - ( r - l ) / 3 ; if ( check ( m1 ) < check ( m2 )) r = m2 ; else l = m1 ; } int ans = 1e9 ; for ( int i = l ; i <= r ; ++ i ) ans = std :: min ( ans , check ( i )); std :: printf ( \"%d \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 NOI.AC #2245 company","title":"Company"},{"location":"problem/2021/march/noi2245/#company","text":"","title":"Company"},{"location":"problem/2021/march/noi2245/#_1","text":"\u5728\u7b2c i i \u5929\u4f1a\u6709 m_i m_i \u540d\u5458\u5de5\u4e0a\u73ed\uff0c\u516c\u53f8\u6bcf\u5929\u90fd\u8981\u4e3a\u6bcf\u4f4d\u4e0a\u73ed\u7684\u5458\u5de5\u53d1\u4e00\u6761\u6d88\u6bd2\u6bdb\u5dfe\u3002\u4e00\u6761\u6d88\u6bd2\u6bdb\u5dfe\u5728\u4f7f\u7528\u540e\uff0c\u53ef\u4ee5\u9009\u62e9\u82b1\u8d39 a a \u5929 f_a f_a \u5143\u6d88\u6bd2\uff0c\u4e5f\u53ef\u4ee5\u82b1\u8d39 b b \u5929 f_b f_b \u5143\u6d88\u6bd2\u3002\u8d2d\u4e70\u65b0\u7684\u6d88\u6bd2\u6bdb\u5dfe\u8981\u82b1\u8d39 f f \u5143\u3002\u6c42\u516c\u53f8\u6700\u5c11\u8981\u82b1\u8d39\u591a\u5c11\u94b1\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/noi2245/#_2","text":"\u8fd9\u9053\u9898\u662f\u8d39\u7528\u6d41\u7ecf\u5178\u95ee\u9898 \u9910\u5dfe\u8ba1\u5212 \u7684\u52a0\u5f3a\u7248\uff0c n n \u6269\u5927\u5230\u4e86 10^5 10^5 \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528\u8d39\u7528\u6d41\u4e86\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u8d2d\u4e70\u6bdb\u5dfe\u7684\u6570\u91cf x x \u3002\u7ef4\u62a4\u4e09\u4e2a\u53cc\u7aef\u961f\u5217 \\text{qb},\\text{qa},\\text{qf} \\text{qb},\\text{qa},\\text{qf} \uff0c\u6bcf\u6b21\u4f7f\u7528\u5b8c\u6bdb\u5dfe\u540e\u5c31\u5c06\u5176\u63a8\u5165 \\text{qf} \\text{qf} \uff0c\u8868\u793a\u8ddd\u4f7f\u7528\u5b8c\u4e0d\u8db3 a a \u5929\u7684\u6240\u6709\u6bdb\u5dfe\uff1b\u82e5 \\text{qf} \\text{qf} \u7684\u961f\u9996\u8ddd\u4f7f\u7528\u5b8c\u8fbe\u5230 a a \u5929\uff0c\u5219\u63a8\u5165 \\text{qa} \\text{qa} \uff1b\u82e5 \\text{qa} \\text{qa} \u7684\u961f\u9996\u8ddd\u4f7f\u7528\u5b8c\u8fbe\u5230 b b \u5929\uff0c\u5219\u63a8\u5165 \\text{qb} \\text{qb} \u3002\u82e5\u5f53\u524d\u53ef\u7528\u6bdb\u5dfe\u6570\u91cf\u4e0d\u8db3 m_i m_i \uff0c\u5219\u4f18\u5148\u4ece \\text{qb} \\text{qb} \u4e2d\u83b7\u53d6\u6ca1\u6d17\u7684\u6bdb\u5dfe\uff0c\u6bcf\u4ef6\u4ee3\u4ef7\u4e3a f_b f_b \uff1b\u5426\u5219\u4ece \\text{qa} \\text{qa} \u7684\u5c3e\u90e8\u83b7\u53d6\u6ca1\u6d17\u7684\u6bdb\u5dfe\uff0c\u6bcf\u4ef6\u4ee3\u4ef7\u4e3a f_a f_a \u3002 \u4e8e\u662f\u5bf9\u4e8e\u786e\u5b9a\u7684 x x \uff0c\u6211\u4eec\u80fd\u591f\u5728 O(n) O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u7b54\u6848\u4e86\u3002\u611f\u6027\u7406\u89e3\uff0c\u7b54\u6848\u5173\u4e8e x x \u662f\u51f8\u7684\uff0c\u53ef\u4ee5\u4e09\u5206\u53d6\u6700\u4f18\u503c\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/noi2245/#_3","text":"#include <bits/stdc++.h> const int maxn = 1e5 + 19 ; int n , a , b , f , fa , fb , m [ maxn ]; int check ( int x ){ int res = x * f , now = x ; std :: deque < std :: pair < int , int > > qb , qa , qf ; for ( int i = 1 ; i <= n ; ++ i ){ while ( ! qf . empty () && qf . front (). first + a + 1 <= i ) qa . push_back ( qf . front ()), qf . pop_front (); while ( ! qa . empty () && qa . front (). first + b + 1 <= i ) qb . push_back ( qa . front ()), qa . pop_front (); while ( now < m [ i ]){ if ( ! qb . empty ()){ int d = std :: min ( qb . front (). second , m [ i ] - now ); qb . front (). second -= d , now += d , res += d * fb ; if ( ! qb . front (). second ) qb . pop_front (); } else if ( ! qa . empty ()){ int d = std :: min ( qa . back (). second , m [ i ] - now ); qa . back (). second -= d , now += d , res += d * fa ; if ( ! qa . back (). second ) qa . pop_back (); } else return 1e9 ; } now -= m [ i ], qf . push_back ( std :: make_pair ( i , m [ i ])); } return res ; } int main (){ std :: scanf ( \"%d%d%d%d%d%d\" , & n , & a , & b , & f , & fa , & fb ); int l = 0 , r = 0 ; for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , m + i ), l = std :: max ( l , m [ i ]), r += m [ i ]; while ( r - l > 6 ){ int m1 = l + ( r - l ) / 3 , m2 = r - ( r - l ) / 3 ; if ( check ( m1 ) < check ( m2 )) r = m2 ; else l = m1 ; } int ans = 1e9 ; for ( int i = l ; i <= r ; ++ i ) ans = std :: min ( ans , check ( i )); std :: printf ( \"%d \\n \" , ans ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/noi2245/#_4","text":"NOI.AC #2245 company","title":"\u6765\u6e90"},{"location":"problem/2021/march/tc13460/","text":"Frozen Standing \u00b6 \u9898\u610f \u00b6 \u8d5b\u573a\u4e0a\u6709 n n \u540d\u9009\u624b\uff0c\u5176\u4e2d\u7b2c i i \u540d\u5728\u5c01\u699c\u524d\u505a\u51fa\u4e86 x_i x_i \u9053\u9898\u3002\u5728\u5c01\u699c\u671f\u95f4\u4e00\u540d\u9009\u624b\u6700\u591a\u518d\u591a\u505a\u51fa\u4e00\u9898\uff0c\u4e5f\u5c31\u662f\u8bf4\u9009\u624b\u6700\u7ec8\u505a\u51fa\u4e86 x_i x_i \u6216 x_i+1 x_i+1 \u9053\u9898\u3002 \u6240\u6709\u9009\u624b\u6309\u505a\u51fa\u7684\u9898\u6570\u6392\u540d\uff1b\u5982\u679c\u9898\u6570\u76f8\u540c\u5219\u7f16\u53f7\u5c0f\u7684\u6392\u5728\u524d\u9762\u3002\u6c42\u9009\u624b\u6700\u7ec8\u4e00\u5171\u53ef\u80fd\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u540d\uff1f \u89e3\u6790 \u00b6 \u539f\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u6709 n n \u4e2a\u533a\u95f4 [l_i,l_i+L] [l_i,l_i+L] \uff0c\u4e14 l_i l_i \u4e92\u4e0d\u76f8\u540c\uff0c\u6bcf\u4e2a\u533a\u95f4\u7684\u6743\u503c\u5728 l_i l_i \u548c l_i+L l_i+L \u4e2d\u9009\u62e9\uff0c\u6c42\u6700\u7ec8\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u540d\u3002 \u6211\u4eec\u89c4\u5b9a\u4e00\u4e2a\u5408\u6cd5\u7684\u9009\u62e9\u662f\uff1a\u4e0d\u5b58\u5728\u4e00\u4e2a\u533a\u95f4\u7684\u6743\u503c\u4e3a l_i+L l_i+L \u4e14\u5c06\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u6539\u4e3a l_i l_i \u65f6\u6392\u540d\u4e0d\u53d8\u3002\u8fd9\u6837\uff0c\u6240\u6709\u5408\u6cd5\u7684\u9009\u62e9\u548c\u6240\u6709\u53ef\u80fd\u7684\u4e0d\u540c\u6392\u540d\u90fd\u4e00\u4e00\u5bf9\u5e94\u4e86\u3002 \u8bc1\u660e \u663e\u7136\u6bcf\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684\u6392\u540d\u90fd\u5bf9\u5e94\u81f3\u5c11\u4e00\u79cd\u5408\u6cd5\u9009\u62e9\uff0c\u800c\u6bcf\u79cd\u5408\u6cd5\u9009\u62e9\u90fd\u5bf9\u5e94\u6070\u597d\u4e00\u4e2a\u6392\u540d\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8bc1\u660e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u6cd5\u9009\u62e9\u90fd\u5bf9\u5e94\u4e0d\u540c\u7684\u6392\u540d\u3002 \u8bbe\u6392\u540d\u4e3a i i \u7684\u533a\u95f4\u7684\u7f16\u53f7\u4e3a p_i p_i \u3002\u82e5\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u6cd5\u9009\u62e9\u5bf9\u5e94\u540c\u4e00\u79cd\u6392\u540d\uff0c\u5219\u53d6\u6700\u5c0f\u7684\u6ee1\u8db3\u7f16\u53f7\u4e3a p_j p_j \u7684\u533a\u95f4\u5728\u4e24\u79cd\u9009\u62e9\u4e2d\u7684\u6743\u503c\u4e0d\u540c\u7684 j j \u3002\u5bf9\u4e8e\u9009\u62e9 l_{p_j}+L l_{p_j}+L \u7684\u90a3\u4e2a\u9009\u62e9\uff0c\u5c06 p_j p_j \u7684\u6743\u503c\u6539\u4e3a l_{p_j} l_{p_j} \u4e5f\u4ecd\u7136\u5bf9\u5e94\u76f8\u540c\u7684\u6392\u540d\uff0c\u6545\u5176\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u9009\u62e9\u3002\u6545\u4e0d\u5b58\u5728\u4e24\u4e2a\u5408\u6cd5\u9009\u62e9\u5bf9\u5e94\u540c\u6837\u7684\u6392\u540d\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5728\u5408\u6cd5\u7684\u9009\u62e9\u548c\u6392\u540d\u4e4b\u95f4\u5efa\u7acb\u4e86\u53cc\u5c04\u5173\u7cfb\u3002\u5408\u6cd5\u7684\u9009\u62e9\u7684\u6570\u91cf\u5c31\u662f\u53ef\u80fd\u51fa\u73b0\u7684\u6392\u540d\u7684\u6570\u91cf\u3002 \u8003\u8651\u600e\u6837\u7684\u9009\u62e9\u4e0d\u662f\u5408\u6cd5\u7684\u3002\u6211\u4eec\u628a\u6240\u6709\u533a\u95f4\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u4e3a 1 1 \u81f3 n n \uff0c\u5219\u7b2c i i \u4e2a\u533a\u95f4\u4ece\u9009 l_i+L l_i+L \u53d8\u4e3a\u9009 l_i l_i \u65f6\u6392\u540d\u4e0d\u53d8\uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u6bd4 i i \u5c0f\u4e14\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4 j j \u90fd\u9009\u62e9 l_j l_j \uff0c\u6240\u6709\u6bd4 i i \u5927\u4e14\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4 k k \u90fd\u9009\u62e9 l_k+L l_k+L \u3002\u8fd9\u4e00\u70b9\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u6240\u6709\u533a\u95f4\u957f\u5ea6\u76f8\u7b49\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5728 i i \u5de6\u8fb9\u4e14\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4 j j \u9009\u4e86 l_i+L l_i+L \uff0c\u5219\u6709 l_i<l_j+L<l_i+L l_i<l_j+L<l_i+L \uff0c l_i l_i \u548c l_i+L l_i+L \u4f1a\u5bfc\u5411\u4e0d\u540c\u7684\u6392\u540d\u3002 \u90a3\u4e48\uff0c\u8bbe A_i A_i \u8868\u793a\u6700\u5de6\u7684\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4\u7684\u7f16\u53f7\uff0c B_i B_i \u8868\u793a\u6700\u53f3\u7684\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4\u7684\u7f16\u53f7\uff0c\u5219 A_i\\sim i-1 A_i\\sim i-1 \u90fd\u9009\u62e9 l l \uff0c i\\sim B_i i\\sim B_i \u90fd\u9009\u62e9 l+L l+L \u7684\u60c5\u51b5\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u6211\u4eec\u5229\u7528\u8865\u96c6\u8f6c\u5316\uff0c\u53bb\u9664\u8fd9\u4e9b\u9650\u5236\u60c5\u51b5\u5373\u53ef\u3002 \u8bbe dp_i dp_i \u8868\u793a\u6240\u6709\u6ee1\u8db3 B_j\\le i B_j\\le i \u7684 [A_j,B_j] [A_j,B_j] \u9650\u5236\u7684\u5408\u6cd5\u9009\u62e9\u6570\u3002\u5219 dp_i=2dp_{i-1}-\\sum_{j\\le i\\land B_j=i}dp_{A_j-1} dp_i=2dp_{i-1}-\\sum_{j\\le i\\land B_j=i}dp_{A_j-1} \u5176\u4e2d\uff0c 2dp_{i-1} 2dp_{i-1} \u8868\u793a\u7b2c i i \u4e2a\u533a\u95f4\u65e2\u53ef\u4ee5\u9009 l l \uff0c\u4e5f\u53ef\u4ee5\u9009 l+L l+L \uff1b dp_{A_j-1} dp_{A_j-1} \u8868\u793a\u53bb\u9664\u6389 j j \u533a\u95f4\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u3002\u7531\u4e8e 2dp_{i-1} 2dp_{i-1} \u4ee3\u8868\u7684\u6240\u6709\u60c5\u51b5\u4e2d [A_j,B_j=i] [A_j,B_j=i] \u90fd\u6070\u597d\u4e0d\u6ee1\u8db3\u9650\u5236\u4e00\u6b21\uff0c\u4e14\u8fd9\u4e9b\u4e0d\u6ee1\u8db3\u9650\u5236\u7684\u60c5\u51b5\u76f8\u4e92\u4e0d\u4ea4\uff0c\u6240\u4ee5\u8fd9\u6837\u8ba1\u6570\u662f\u4e0d\u91cd\u4e0d\u6f0f\u7684\u3002 \u8fd9\u4e2a DP \u53ef\u4ee5 O(n) O(n) \u8f6c\u79fb\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int mod = 1e9 + 7 , maxn = 5e5 + 19 ; struct Edge { int to , next ; } edge [ maxn ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ]}; head [ from ] = head [ 0 ]; } struct range { ll l , r ; bool operator < ( const range & b ) const { return l < b . l ; } } p [ maxn ]; int X [ maxn ], dp [ maxn ]; class FrozenStandings { public : int countStandings ( int N , int A , int seed ){ ll x = seed ; for ( int i = 1 ; i <= N ; ++ i ){ x = x * 20142014 % mod ; X [ i ] = x % A ; } for ( int i = 1 ; i <= N ; ++ i ) p [ i ]. l = ( ll ) X [ i ] * N + ( N - i ), p [ i ]. r = ( ll ) X [ i ] * N + ( N - i ) + N ; std :: sort ( p + 1 , p + 1 + N ); for ( int i = 1 , a = 1 , b = 1 ; i <= N ; ++ i ){ while ( b + 1 <= N && p [ b + 1 ]. l < p [ i ]. r ) ++ b ; while ( p [ a ]. r < p [ i ]. l ) ++ a ; add ( b , a ); } dp [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ){ dp [ i ] = 2l l * dp [ i - 1 ] % mod ; for ( int j = head [ i ]; j ; j = edge [ j ]. next ) dp [ i ] = ( dp [ i ] - dp [ edge [ j ]. to - 1 ]) % mod ; } return ( dp [ N ] + mod ) % mod ; } }; \u6765\u6e90 \u00b6 2014 TCO Algorithm Finals - Division I, Level Three","title":"Frozen Standing"},{"location":"problem/2021/march/tc13460/#frozen-standing","text":"","title":"Frozen Standing"},{"location":"problem/2021/march/tc13460/#_1","text":"\u8d5b\u573a\u4e0a\u6709 n n \u540d\u9009\u624b\uff0c\u5176\u4e2d\u7b2c i i \u540d\u5728\u5c01\u699c\u524d\u505a\u51fa\u4e86 x_i x_i \u9053\u9898\u3002\u5728\u5c01\u699c\u671f\u95f4\u4e00\u540d\u9009\u624b\u6700\u591a\u518d\u591a\u505a\u51fa\u4e00\u9898\uff0c\u4e5f\u5c31\u662f\u8bf4\u9009\u624b\u6700\u7ec8\u505a\u51fa\u4e86 x_i x_i \u6216 x_i+1 x_i+1 \u9053\u9898\u3002 \u6240\u6709\u9009\u624b\u6309\u505a\u51fa\u7684\u9898\u6570\u6392\u540d\uff1b\u5982\u679c\u9898\u6570\u76f8\u540c\u5219\u7f16\u53f7\u5c0f\u7684\u6392\u5728\u524d\u9762\u3002\u6c42\u9009\u624b\u6700\u7ec8\u4e00\u5171\u53ef\u80fd\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u540d\uff1f","title":"\u9898\u610f"},{"location":"problem/2021/march/tc13460/#_2","text":"\u539f\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u6709 n n \u4e2a\u533a\u95f4 [l_i,l_i+L] [l_i,l_i+L] \uff0c\u4e14 l_i l_i \u4e92\u4e0d\u76f8\u540c\uff0c\u6bcf\u4e2a\u533a\u95f4\u7684\u6743\u503c\u5728 l_i l_i \u548c l_i+L l_i+L \u4e2d\u9009\u62e9\uff0c\u6c42\u6700\u7ec8\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u540d\u3002 \u6211\u4eec\u89c4\u5b9a\u4e00\u4e2a\u5408\u6cd5\u7684\u9009\u62e9\u662f\uff1a\u4e0d\u5b58\u5728\u4e00\u4e2a\u533a\u95f4\u7684\u6743\u503c\u4e3a l_i+L l_i+L \u4e14\u5c06\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u6539\u4e3a l_i l_i \u65f6\u6392\u540d\u4e0d\u53d8\u3002\u8fd9\u6837\uff0c\u6240\u6709\u5408\u6cd5\u7684\u9009\u62e9\u548c\u6240\u6709\u53ef\u80fd\u7684\u4e0d\u540c\u6392\u540d\u90fd\u4e00\u4e00\u5bf9\u5e94\u4e86\u3002 \u8bc1\u660e \u663e\u7136\u6bcf\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684\u6392\u540d\u90fd\u5bf9\u5e94\u81f3\u5c11\u4e00\u79cd\u5408\u6cd5\u9009\u62e9\uff0c\u800c\u6bcf\u79cd\u5408\u6cd5\u9009\u62e9\u90fd\u5bf9\u5e94\u6070\u597d\u4e00\u4e2a\u6392\u540d\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8bc1\u660e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u6cd5\u9009\u62e9\u90fd\u5bf9\u5e94\u4e0d\u540c\u7684\u6392\u540d\u3002 \u8bbe\u6392\u540d\u4e3a i i \u7684\u533a\u95f4\u7684\u7f16\u53f7\u4e3a p_i p_i \u3002\u82e5\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u6cd5\u9009\u62e9\u5bf9\u5e94\u540c\u4e00\u79cd\u6392\u540d\uff0c\u5219\u53d6\u6700\u5c0f\u7684\u6ee1\u8db3\u7f16\u53f7\u4e3a p_j p_j \u7684\u533a\u95f4\u5728\u4e24\u79cd\u9009\u62e9\u4e2d\u7684\u6743\u503c\u4e0d\u540c\u7684 j j \u3002\u5bf9\u4e8e\u9009\u62e9 l_{p_j}+L l_{p_j}+L \u7684\u90a3\u4e2a\u9009\u62e9\uff0c\u5c06 p_j p_j \u7684\u6743\u503c\u6539\u4e3a l_{p_j} l_{p_j} \u4e5f\u4ecd\u7136\u5bf9\u5e94\u76f8\u540c\u7684\u6392\u540d\uff0c\u6545\u5176\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u9009\u62e9\u3002\u6545\u4e0d\u5b58\u5728\u4e24\u4e2a\u5408\u6cd5\u9009\u62e9\u5bf9\u5e94\u540c\u6837\u7684\u6392\u540d\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5728\u5408\u6cd5\u7684\u9009\u62e9\u548c\u6392\u540d\u4e4b\u95f4\u5efa\u7acb\u4e86\u53cc\u5c04\u5173\u7cfb\u3002\u5408\u6cd5\u7684\u9009\u62e9\u7684\u6570\u91cf\u5c31\u662f\u53ef\u80fd\u51fa\u73b0\u7684\u6392\u540d\u7684\u6570\u91cf\u3002 \u8003\u8651\u600e\u6837\u7684\u9009\u62e9\u4e0d\u662f\u5408\u6cd5\u7684\u3002\u6211\u4eec\u628a\u6240\u6709\u533a\u95f4\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u4e3a 1 1 \u81f3 n n \uff0c\u5219\u7b2c i i \u4e2a\u533a\u95f4\u4ece\u9009 l_i+L l_i+L \u53d8\u4e3a\u9009 l_i l_i \u65f6\u6392\u540d\u4e0d\u53d8\uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u6bd4 i i \u5c0f\u4e14\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4 j j \u90fd\u9009\u62e9 l_j l_j \uff0c\u6240\u6709\u6bd4 i i \u5927\u4e14\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4 k k \u90fd\u9009\u62e9 l_k+L l_k+L \u3002\u8fd9\u4e00\u70b9\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u6240\u6709\u533a\u95f4\u957f\u5ea6\u76f8\u7b49\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5728 i i \u5de6\u8fb9\u4e14\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4 j j \u9009\u4e86 l_i+L l_i+L \uff0c\u5219\u6709 l_i<l_j+L<l_i+L l_i<l_j+L<l_i+L \uff0c l_i l_i \u548c l_i+L l_i+L \u4f1a\u5bfc\u5411\u4e0d\u540c\u7684\u6392\u540d\u3002 \u90a3\u4e48\uff0c\u8bbe A_i A_i \u8868\u793a\u6700\u5de6\u7684\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4\u7684\u7f16\u53f7\uff0c B_i B_i \u8868\u793a\u6700\u53f3\u7684\u4e0e i i \u76f8\u4ea4\u7684\u533a\u95f4\u7684\u7f16\u53f7\uff0c\u5219 A_i\\sim i-1 A_i\\sim i-1 \u90fd\u9009\u62e9 l l \uff0c i\\sim B_i i\\sim B_i \u90fd\u9009\u62e9 l+L l+L \u7684\u60c5\u51b5\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u6211\u4eec\u5229\u7528\u8865\u96c6\u8f6c\u5316\uff0c\u53bb\u9664\u8fd9\u4e9b\u9650\u5236\u60c5\u51b5\u5373\u53ef\u3002 \u8bbe dp_i dp_i \u8868\u793a\u6240\u6709\u6ee1\u8db3 B_j\\le i B_j\\le i \u7684 [A_j,B_j] [A_j,B_j] \u9650\u5236\u7684\u5408\u6cd5\u9009\u62e9\u6570\u3002\u5219 dp_i=2dp_{i-1}-\\sum_{j\\le i\\land B_j=i}dp_{A_j-1} dp_i=2dp_{i-1}-\\sum_{j\\le i\\land B_j=i}dp_{A_j-1} \u5176\u4e2d\uff0c 2dp_{i-1} 2dp_{i-1} \u8868\u793a\u7b2c i i \u4e2a\u533a\u95f4\u65e2\u53ef\u4ee5\u9009 l l \uff0c\u4e5f\u53ef\u4ee5\u9009 l+L l+L \uff1b dp_{A_j-1} dp_{A_j-1} \u8868\u793a\u53bb\u9664\u6389 j j \u533a\u95f4\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u3002\u7531\u4e8e 2dp_{i-1} 2dp_{i-1} \u4ee3\u8868\u7684\u6240\u6709\u60c5\u51b5\u4e2d [A_j,B_j=i] [A_j,B_j=i] \u90fd\u6070\u597d\u4e0d\u6ee1\u8db3\u9650\u5236\u4e00\u6b21\uff0c\u4e14\u8fd9\u4e9b\u4e0d\u6ee1\u8db3\u9650\u5236\u7684\u60c5\u51b5\u76f8\u4e92\u4e0d\u4ea4\uff0c\u6240\u4ee5\u8fd9\u6837\u8ba1\u6570\u662f\u4e0d\u91cd\u4e0d\u6f0f\u7684\u3002 \u8fd9\u4e2a DP \u53ef\u4ee5 O(n) O(n) \u8f6c\u79fb\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/tc13460/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int mod = 1e9 + 7 , maxn = 5e5 + 19 ; struct Edge { int to , next ; } edge [ maxn ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ]}; head [ from ] = head [ 0 ]; } struct range { ll l , r ; bool operator < ( const range & b ) const { return l < b . l ; } } p [ maxn ]; int X [ maxn ], dp [ maxn ]; class FrozenStandings { public : int countStandings ( int N , int A , int seed ){ ll x = seed ; for ( int i = 1 ; i <= N ; ++ i ){ x = x * 20142014 % mod ; X [ i ] = x % A ; } for ( int i = 1 ; i <= N ; ++ i ) p [ i ]. l = ( ll ) X [ i ] * N + ( N - i ), p [ i ]. r = ( ll ) X [ i ] * N + ( N - i ) + N ; std :: sort ( p + 1 , p + 1 + N ); for ( int i = 1 , a = 1 , b = 1 ; i <= N ; ++ i ){ while ( b + 1 <= N && p [ b + 1 ]. l < p [ i ]. r ) ++ b ; while ( p [ a ]. r < p [ i ]. l ) ++ a ; add ( b , a ); } dp [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ){ dp [ i ] = 2l l * dp [ i - 1 ] % mod ; for ( int j = head [ i ]; j ; j = edge [ j ]. next ) dp [ i ] = ( dp [ i ] - dp [ edge [ j ]. to - 1 ]) % mod ; } return ( dp [ N ] + mod ) % mod ; } };","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/tc13460/#_4","text":"2014 TCO Algorithm Finals - Division I, Level Three","title":"\u6765\u6e90"},{"location":"problem/2021/march/uoj32/","text":"\u8df3\u86a4\u516c\u8def \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u5e26\u6743\uff0c\u4e14\u5c5e\u4e8e\u4e09\u79cd\u7c7b\u578b\u4e4b\u4e00\uff1a\u7ea2\u8272\u3001\u7eff\u8272\u548c\u767d\u8272\u3002\u8df3\u86a4\u56fd\u738b\u4f1a\u9009\u5b9a\u4e00\u4e2a\u6574\u6570 x x \uff0c\u5c06\u6240\u6709\u7ea2\u8272\u8fb9\u7684\u6743\u503c\u589e\u52a0 x x \uff0c\u7eff\u8272\u8fb9\u7684\u6743\u503c\u51cf\u5c0f x x \u3002\u5bf9 i=1..n i=1..n \uff0c\u6c42\u4f7f\u5f97\u56fe\u4e2d\u4e0d\u5b58\u5728\u4ece 1 1 \u5230 i i \u5305\u542b\u8d1f\u73af\u7684\u8def\u5f84\u7684 x x \u7684\u53d6\u503c\u8303\u56f4\u3002 \u89e3\u6790 \u00b6 \u8003\u8651\u5728 x x \u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8d1f\u73af\u7684\u8fd9\u4e00\u8fc7\u7a0b\u3002 \u5229\u7528 Bellman Ford \u7b97\u6cd5\uff0c\u8bbe F[i][j] F[i][j] \u4e3a\u4ece 1 1 \u51fa\u53d1\uff0c\u81f3\u591a\u7ecf\u8fc7 i i \u6761\u8fb9\uff0c\u5230\u8fbe j j \u7684\u6700\u77ed\u8def\u7a0b\u3002\u5982\u679c\u539f\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219 \\exists u,F[n][u]<F[n-1][u] \\exists u,F[n][u]<F[n-1][u] \uff1b\u5e76\u4e14\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6ee1\u8db3 F[n][u]<F[n-1][u] F[n][u]<F[n-1][u] \u7684\u8282\u70b9 u u \u80fd\u591f\u5230\u8fbe\u7684\u8282\u70b9 i i \uff0c\u4ece 1 1 \u5230 i i \u7684\u8def\u5f84\u90fd\u5305\u542b\u8d1f\u73af\u3002 \u8bbe G[i][j][k] G[i][j][k] \u4e3a\u4ece 1 1 \u51fa\u53d1\uff0c\u81f3\u591a\u7ecf\u8fc7 i i \u6761\u8fb9\uff0c\u8d70\u8fc7\u7684\u7eff\u8272\u8fb9\u6070\u597d\u6bd4\u8d70\u8fc7\u7684\u7ea2\u8272\u8fb9\u591a k k \u6761\u7684\u6700\u77ed\u8def\u3002\u5219 F[i][j]=\\min\\{G[i][j][k]+kx\\} F[i][j]=\\min\\{G[i][j][k]+kx\\} \u3002\u4e8e\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a u u \u6240\u80fd\u5230\u8fbe\u7684\u8282\u70b9 i i \uff0c\u6211\u4eec\u90fd\u8981\u6c42\u8fd9\u4e2a i i \u5bf9\u5e94\u7684\u7b54\u6848 x x \u6ee1\u8db3 F[n][u]=F[n-1][u] F[n][u]=F[n-1][u] \uff0c\u5373 \\min\\{G[n][u][k]+kx\\}\\ge\\min\\{G[n-1][u][j]+jx\\} \\min\\{G[n][u][k]+kx\\}\\ge\\min\\{G[n-1][u][j]+jx\\} \u3002 \u53d1\u73b0 \\min a \\min a \u548c \\min b \\min b \u90fd\u5448\u51f8\u5305\u72b6\uff0c\u89e3\u96c6\u662f\u8fde\u7eed\u7684\u3002\u6839\u636e\u8fd9\u4e00\u70b9\u6027\u8d28\uff0c\u6ca1\u6709\u5fc5\u8981\u50cf\u4e0b\u9762\u7684\u5b9e\u73b0\u90a3\u6837\u590d\u6742\u4e86\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; typedef long double real ; const int maxn = 1e2 + 9 ; const ll inf = 4e18 ; void chkmin ( ll & a , const ll & b ){ if ( b < a ) a = b ; } struct Edge { int to , next , dist , tp ; } edge [ maxn * maxn ]; int head [ maxn ]; inline void add ( int from , int to , int dist , int tp ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ], dist , tp }; head [ from ] = head [ 0 ]; } int n , m , color_cnt [ maxn ], tot , cor [ maxn ]; ll G [ maxn ][ maxn ][ maxn << 1 ]; std :: vector < std :: pair < std :: pair < ll , ll > , int > > ans [ maxn ]; std :: vector < int > to ; bool vist [ maxn ], ok [ maxn ]; inline void ins ( int x ){ tot -= ( bool ) cor [ x ]; ++ cor [ x ]; tot += ( bool ) cor [ x ]; } inline void del ( int x ){ tot -= ( bool ) cor [ x ]; -- cor [ x ]; tot += ( bool ) cor [ x ]; } ll range_union ( const std :: vector < std :: pair < std :: pair < ll , ll > , int > > & s , int cc ){ std :: vector < ll > tmp ; std :: vector < std :: vector < int > > all ; for ( int i = 0 ; i < ( int ) s . size (); ++ i ) tmp . push_back ( s [ i ]. first . first ), tmp . push_back ( s [ i ]. first . second ); std :: sort ( tmp . begin (), tmp . end ()), tmp . resize ( std :: unique ( tmp . begin (), tmp . end ()) - tmp . begin ()); all . resize ( tmp . size ()); for ( int i = 0 ; i < ( int ) s . size (); ++ i ){ int x = std :: lower_bound ( tmp . begin (), tmp . end (), s [ i ]. first . first ) - tmp . begin (), y = std :: lower_bound ( tmp . begin (), tmp . end (), s [ i ]. first . second ) - tmp . begin (); all [ x ]. push_back ( s [ i ]. second ), all [ y ]. push_back ( - s [ i ]. second ); } ll res = 0l l ; for ( int i = 0 ; i < ( int ) tmp . size () - 1 ; ++ i ){ for ( int j = 0 ; j < ( int ) all [ i ]. size (); ++ j ) if ( all [ i ][ j ] > 0 ) ins ( all [ i ][ j ]); else del ( - all [ i ][ j ]); if ( tot == cc ) res += tmp [ i + 1 ] - tmp [ i ]; } std :: fill ( cor + 1 , cor + 1 + n , 0 ), tot = 0 ; if ( res > ll ( 1e18 )) return -1 ; return res ; } void dfs ( int node ){ vist [ node ] = true , to . push_back ( node ), ++ color_cnt [ node ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ]) dfs ( edge [ i ]. to ); } std :: pair < ll , ll > operator & ( const std :: pair < ll , ll > & a , const std :: pair < ll , ll > & b ){ return std :: make_pair ( std :: max ( a . first , b . first ), std :: min ( a . second , b . second )); } int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , v , w , s ; i <= m ; ++ i ){ std :: scanf ( \"%d%d%d%d\" , & u , & v , & w , & s ); add ( u , v , w , s ); } for ( int i = 0 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = - n ; k <= n ; ++ k ) G [ i ][ j ][ k + n ] = inf ; G [ 0 ][ 1 ][ n ] = 0 ; for ( int i = 0 ; i < n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = - i ; k <= i ; ++ k ) if ( G [ i ][ j ][ k + n ] != inf ) for ( int p = head [ j ]; p ; p = edge [ p ]. next ){ chkmin ( G [ i + 1 ][ edge [ p ]. to ][ k + edge [ p ]. tp + n ], G [ i ][ j ][ k + n ] + edge [ p ]. dist ); chkmin ( G [ i + 1 ][ j ][ k + n ], G [ i ][ j ][ k + n ]); } dfs ( 1 ); for ( int i = 0 ; i < ( int ) to . size (); ++ i ) ok [ to [ i ]] = true , -- color_cnt [ to [ i ]]; for ( int i = 1 ; i <= n ; ++ i ){ std :: fill ( vist + 1 , vist + 1 + n , false ); if ( ! ok [ i ]) continue ; to . clear (), dfs ( i ); for ( int j = - n ; j <= n ; ++ j ){ if ( G [ n - 1 ][ i ][ j + n ] == inf ) continue ; std :: pair < ll , ll > res ( - inf , inf ); for ( int k = - n ; k <= n && res . first <= res . second ; ++ k ){ if ( G [ n ][ i ][ k + n ] == inf ) continue ; ll c = j - k , v = G [ n ][ i ][ k + n ] - G [ n - 1 ][ i ][ j + n ]; if ( c == 0 ){ if ( v < 0 ) res = std :: make_pair ( inf , - inf ); continue ; } else if ( c > 0 ) res = res & std :: make_pair ( - inf , std :: floor (( real ) v / ( real ) c )); else res = res & std :: make_pair ( std :: ceil (( real ) v / ( real ) c ), inf ); } if ( res . first <= res . second ){ ++ res . second ; for ( int k = 0 ; k < ( int ) to . size (); ++ k ) ans [ to [ k ]]. push_back ( std :: make_pair ( res , i )); } } } for ( int i = 1 ; i <= n ; ++ i ) if ( ok [ i ]) std :: printf ( \"%lld \\n \" , range_union ( ans [ i ], color_cnt [ i ])); else std :: puts ( \"-1\" ); return 0 ; } \u6765\u6e90 \u00b6 UOJ32 \u8df3\u86a4\u516c\u8def","title":"\u8df3\u86a4\u516c\u8def"},{"location":"problem/2021/march/uoj32/#_1","text":"","title":"\u8df3\u86a4\u516c\u8def"},{"location":"problem/2021/march/uoj32/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u5e26\u6743\uff0c\u4e14\u5c5e\u4e8e\u4e09\u79cd\u7c7b\u578b\u4e4b\u4e00\uff1a\u7ea2\u8272\u3001\u7eff\u8272\u548c\u767d\u8272\u3002\u8df3\u86a4\u56fd\u738b\u4f1a\u9009\u5b9a\u4e00\u4e2a\u6574\u6570 x x \uff0c\u5c06\u6240\u6709\u7ea2\u8272\u8fb9\u7684\u6743\u503c\u589e\u52a0 x x \uff0c\u7eff\u8272\u8fb9\u7684\u6743\u503c\u51cf\u5c0f x x \u3002\u5bf9 i=1..n i=1..n \uff0c\u6c42\u4f7f\u5f97\u56fe\u4e2d\u4e0d\u5b58\u5728\u4ece 1 1 \u5230 i i \u5305\u542b\u8d1f\u73af\u7684\u8def\u5f84\u7684 x x \u7684\u53d6\u503c\u8303\u56f4\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/uoj32/#_3","text":"\u8003\u8651\u5728 x x \u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8d1f\u73af\u7684\u8fd9\u4e00\u8fc7\u7a0b\u3002 \u5229\u7528 Bellman Ford \u7b97\u6cd5\uff0c\u8bbe F[i][j] F[i][j] \u4e3a\u4ece 1 1 \u51fa\u53d1\uff0c\u81f3\u591a\u7ecf\u8fc7 i i \u6761\u8fb9\uff0c\u5230\u8fbe j j \u7684\u6700\u77ed\u8def\u7a0b\u3002\u5982\u679c\u539f\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219 \\exists u,F[n][u]<F[n-1][u] \\exists u,F[n][u]<F[n-1][u] \uff1b\u5e76\u4e14\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6ee1\u8db3 F[n][u]<F[n-1][u] F[n][u]<F[n-1][u] \u7684\u8282\u70b9 u u \u80fd\u591f\u5230\u8fbe\u7684\u8282\u70b9 i i \uff0c\u4ece 1 1 \u5230 i i \u7684\u8def\u5f84\u90fd\u5305\u542b\u8d1f\u73af\u3002 \u8bbe G[i][j][k] G[i][j][k] \u4e3a\u4ece 1 1 \u51fa\u53d1\uff0c\u81f3\u591a\u7ecf\u8fc7 i i \u6761\u8fb9\uff0c\u8d70\u8fc7\u7684\u7eff\u8272\u8fb9\u6070\u597d\u6bd4\u8d70\u8fc7\u7684\u7ea2\u8272\u8fb9\u591a k k \u6761\u7684\u6700\u77ed\u8def\u3002\u5219 F[i][j]=\\min\\{G[i][j][k]+kx\\} F[i][j]=\\min\\{G[i][j][k]+kx\\} \u3002\u4e8e\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a u u \u6240\u80fd\u5230\u8fbe\u7684\u8282\u70b9 i i \uff0c\u6211\u4eec\u90fd\u8981\u6c42\u8fd9\u4e2a i i \u5bf9\u5e94\u7684\u7b54\u6848 x x \u6ee1\u8db3 F[n][u]=F[n-1][u] F[n][u]=F[n-1][u] \uff0c\u5373 \\min\\{G[n][u][k]+kx\\}\\ge\\min\\{G[n-1][u][j]+jx\\} \\min\\{G[n][u][k]+kx\\}\\ge\\min\\{G[n-1][u][j]+jx\\} \u3002 \u53d1\u73b0 \\min a \\min a \u548c \\min b \\min b \u90fd\u5448\u51f8\u5305\u72b6\uff0c\u89e3\u96c6\u662f\u8fde\u7eed\u7684\u3002\u6839\u636e\u8fd9\u4e00\u70b9\u6027\u8d28\uff0c\u6ca1\u6709\u5fc5\u8981\u50cf\u4e0b\u9762\u7684\u5b9e\u73b0\u90a3\u6837\u590d\u6742\u4e86\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/uoj32/#_4","text":"#include <bits/stdc++.h> typedef long long int ll ; typedef long double real ; const int maxn = 1e2 + 9 ; const ll inf = 4e18 ; void chkmin ( ll & a , const ll & b ){ if ( b < a ) a = b ; } struct Edge { int to , next , dist , tp ; } edge [ maxn * maxn ]; int head [ maxn ]; inline void add ( int from , int to , int dist , int tp ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ], dist , tp }; head [ from ] = head [ 0 ]; } int n , m , color_cnt [ maxn ], tot , cor [ maxn ]; ll G [ maxn ][ maxn ][ maxn << 1 ]; std :: vector < std :: pair < std :: pair < ll , ll > , int > > ans [ maxn ]; std :: vector < int > to ; bool vist [ maxn ], ok [ maxn ]; inline void ins ( int x ){ tot -= ( bool ) cor [ x ]; ++ cor [ x ]; tot += ( bool ) cor [ x ]; } inline void del ( int x ){ tot -= ( bool ) cor [ x ]; -- cor [ x ]; tot += ( bool ) cor [ x ]; } ll range_union ( const std :: vector < std :: pair < std :: pair < ll , ll > , int > > & s , int cc ){ std :: vector < ll > tmp ; std :: vector < std :: vector < int > > all ; for ( int i = 0 ; i < ( int ) s . size (); ++ i ) tmp . push_back ( s [ i ]. first . first ), tmp . push_back ( s [ i ]. first . second ); std :: sort ( tmp . begin (), tmp . end ()), tmp . resize ( std :: unique ( tmp . begin (), tmp . end ()) - tmp . begin ()); all . resize ( tmp . size ()); for ( int i = 0 ; i < ( int ) s . size (); ++ i ){ int x = std :: lower_bound ( tmp . begin (), tmp . end (), s [ i ]. first . first ) - tmp . begin (), y = std :: lower_bound ( tmp . begin (), tmp . end (), s [ i ]. first . second ) - tmp . begin (); all [ x ]. push_back ( s [ i ]. second ), all [ y ]. push_back ( - s [ i ]. second ); } ll res = 0l l ; for ( int i = 0 ; i < ( int ) tmp . size () - 1 ; ++ i ){ for ( int j = 0 ; j < ( int ) all [ i ]. size (); ++ j ) if ( all [ i ][ j ] > 0 ) ins ( all [ i ][ j ]); else del ( - all [ i ][ j ]); if ( tot == cc ) res += tmp [ i + 1 ] - tmp [ i ]; } std :: fill ( cor + 1 , cor + 1 + n , 0 ), tot = 0 ; if ( res > ll ( 1e18 )) return -1 ; return res ; } void dfs ( int node ){ vist [ node ] = true , to . push_back ( node ), ++ color_cnt [ node ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ]) dfs ( edge [ i ]. to ); } std :: pair < ll , ll > operator & ( const std :: pair < ll , ll > & a , const std :: pair < ll , ll > & b ){ return std :: make_pair ( std :: max ( a . first , b . first ), std :: min ( a . second , b . second )); } int main (){ std :: scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , v , w , s ; i <= m ; ++ i ){ std :: scanf ( \"%d%d%d%d\" , & u , & v , & w , & s ); add ( u , v , w , s ); } for ( int i = 0 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = - n ; k <= n ; ++ k ) G [ i ][ j ][ k + n ] = inf ; G [ 0 ][ 1 ][ n ] = 0 ; for ( int i = 0 ; i < n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = - i ; k <= i ; ++ k ) if ( G [ i ][ j ][ k + n ] != inf ) for ( int p = head [ j ]; p ; p = edge [ p ]. next ){ chkmin ( G [ i + 1 ][ edge [ p ]. to ][ k + edge [ p ]. tp + n ], G [ i ][ j ][ k + n ] + edge [ p ]. dist ); chkmin ( G [ i + 1 ][ j ][ k + n ], G [ i ][ j ][ k + n ]); } dfs ( 1 ); for ( int i = 0 ; i < ( int ) to . size (); ++ i ) ok [ to [ i ]] = true , -- color_cnt [ to [ i ]]; for ( int i = 1 ; i <= n ; ++ i ){ std :: fill ( vist + 1 , vist + 1 + n , false ); if ( ! ok [ i ]) continue ; to . clear (), dfs ( i ); for ( int j = - n ; j <= n ; ++ j ){ if ( G [ n - 1 ][ i ][ j + n ] == inf ) continue ; std :: pair < ll , ll > res ( - inf , inf ); for ( int k = - n ; k <= n && res . first <= res . second ; ++ k ){ if ( G [ n ][ i ][ k + n ] == inf ) continue ; ll c = j - k , v = G [ n ][ i ][ k + n ] - G [ n - 1 ][ i ][ j + n ]; if ( c == 0 ){ if ( v < 0 ) res = std :: make_pair ( inf , - inf ); continue ; } else if ( c > 0 ) res = res & std :: make_pair ( - inf , std :: floor (( real ) v / ( real ) c )); else res = res & std :: make_pair ( std :: ceil (( real ) v / ( real ) c ), inf ); } if ( res . first <= res . second ){ ++ res . second ; for ( int k = 0 ; k < ( int ) to . size (); ++ k ) ans [ to [ k ]]. push_back ( std :: make_pair ( res , i )); } } } for ( int i = 1 ; i <= n ; ++ i ) if ( ok [ i ]) std :: printf ( \"%lld \\n \" , range_union ( ans [ i ], color_cnt [ i ])); else std :: puts ( \"-1\" ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/uoj32/#_5","text":"UOJ32 \u8df3\u86a4\u516c\u8def","title":"\u6765\u6e90"},{"location":"problem/2021/march/uoj33/","text":"\u6811\u4e0a GCD \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u5b9a\u4e49 d(u,v) d(u,v) \u4e3a\u4ece u u \u5230 v v \u7684\u7b80\u5355\u8def\u5f84\u5305\u542b\u7684\u8fb9\u6570\u3002\u4ee4 a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) \uff0c\u6c42\u6ee1\u8db3 f(u,v)=i f(u,v)=i \u7684\u6570\u5bf9 (u,v) (u,v) \u4e2a\u6570\u3002 \u89e3\u6790 \u00b6 \u53ea\u8981\u6c42\u51fa i\\mid d(u,a) i\\mid d(u,a) \u4e14 i\\mid d(a,v) i\\mid d(a,v) \u7684\u6570\u5bf9\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bb9\u65a5\uff08\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u516c\u5f0f\uff09\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8003\u8651\u70b9\u5206\u6cbb\u3002 \u8bbe\u5f53\u524d\u5904\u7406\u6240\u6709\u7ecf\u8fc7 c c \u7684\u8def\u5f84 (u,v) (u,v) \uff0c\u4e14\u5f53\u524d\u6811\u6839\u4e3a r r \u3002\u4e00\u822c\u7684\u70b9\u5206\u6cbb\u662f\u5728\u65e0\u6839\u6811\u4e0a\u7684\uff0c\u800c\u5bf9\u4e8e\u6709\u6839\u6811\u70b9\u5206\u6cbb\u6211\u4eec\u8981\u8ba8\u8bba\u4e24\u79cd\u60c5\u51b5\uff1a \u8bbe c c \u5b50\u6811\u7684\u9ad8\u5ea6\u4e3a H H \u3002 u,v u,v \u540c\u5728 c c \u5b50\u6811\u4e2d\u65f6\uff0c\u53ea\u9700\u66b4\u529b\u5408\u5e76\u6df1\u5ea6\u4e3a d=1..H d=1..H \u500d\u6570\u7684\u8def\u5f84\uff0c\u5408\u5e76\u5355\u68f5\u5b50\u6811\u7684\u590d\u6742\u5ea6\u4e3a\u8c03\u548c\u7ea7\u6570 O(H\\log H) O(H\\log H) \u3002 u u \u5728 c c \u5b50\u6811\u4e2d\uff0c v v \u4e0d\u5728 c c \u5b50\u6811\u4e2d\u65f6\uff0c\u6211\u4eec\u679a\u4e3e u u \u548c v v \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 a a \u3002\u5bf9\u4e8e\u957f\u5ea6\u4e3a d d \u500d\u6570\u7684\u8def\u5f84\uff0c\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u82e5 d\\le \\sqrt{H} d\\le \\sqrt{H} \uff0c\u5219\u5229\u7528\u4e00\u4e2a\u6570\u7ec4 F[d][i] F[d][i] \u5b58\u4e0b\u6df1\u5ea6\u9664\u4ee5 d d \u7684\u4f59\u6570\u4e3a i i \u7684\u70b9\u7684\u4e2a\u6570\uff0c\u5efa\u7acb F F \u6570\u7ec4\u603b\u590d\u6742\u5ea6\u4e3a O(H\\sqrt H) O(H\\sqrt H) \uff0c\u5bf9\u4e8e\u5355\u4e2a d d \u53ef\u4ee5 O(1) O(1) \u67e5\u8be2\uff1b\u82e5 d\\ge \\sqrt H d\\ge \\sqrt H \uff0c\u5219\u6bcf\u6b21\u9700\u8981\u65f6\u66b4\u529b\u5728\u6876\u91cc\u67e5\uff0c\u5bf9\u4e8e\u5355\u4e2a d d \u53ef\u4ee5 O(\\sqrt H) O(\\sqrt H) \u67e5\u8be2\u3002 \u5355\u5c42\u7684\u590d\u6742\u5ea6\u4e3a O(n\\sqrt n) O(n\\sqrt n) \uff0c\u8fd0\u7528\u4e3b\u5b9a\u7406\uff0c\u603b\u590d\u6742\u5ea6\u4e5f\u662f O(n\\sqrt n) O(n\\sqrt n) \u3002\u770b\u4f3c\u5e38\u6570\u7206\u70b8\uff0c\u5b9e\u9645\u4e0a\u5e38\u6570\u5e76\u4e0d\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u9898\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e5 + 19 , maxb = 4e2 + 19 ; struct Edge { int to , next ; } edge [ maxn << 1 ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ]}; head [ from ] = head [ 0 ]; } int n ; bool vist [ maxn ]; ll ans [ maxn ]; int fa [ maxn ], dep [ maxn ], size [ maxn ], mega [ maxn ], line [ maxn ]; int st [ maxn ], top ; int H , B , D , maxh , subh ; int cnt [ maxn ], tmp [ maxn ]; int dp [ maxb ][ maxb ], box [ maxn ]; void dfs1 ( int node ){ dep [ node ] = dep [ fa [ node ]] + 1 , size [ node ] = 1 , mega [ node ] = 0 ; st [ ++ top ] = node , H = std :: max ( H , dep [ node ]); for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]){ dfs1 ( edge [ i ]. to ); if ( size [ edge [ i ]. to ] > mega [ node ]) mega [ node ] = size [ edge [ i ]. to ]; size [ node ] += size [ edge [ i ]. to ]; } } void dfs2 ( int node ){ ++ tmp [ dep [ node ] - D ], subh = std :: max ( subh , dep [ node ] - D ), ++ box [ dep [ node ]]; for ( int i = 1 ; i <= B ; ++ i ) ++ dp [ i ][ dep [ node ] % i ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]) dfs2 ( edge [ i ]. to ); } void dfs3 ( int node ){ ++ cnt [ dep [ node ] - D ], maxh = std :: max ( maxh , dep [ node ] - D ); for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]) dfs3 ( edge [ i ]. to ); } void solve ( int node , int root ){ top = H = 0 , dep [ fa [ root ]] = 0 , dfs1 ( root ), B = std :: pow ( H , 0.319 ); for ( int i = 1 ; i <= top ; ++ i ) if ( std :: max ( mega [ st [ i ]], size [ root ] - size [ st [ i ]]) <= size [ root ] / 2 ){ node = st [ i ]; break ; } D = dep [ node ]; maxh = 0 , ++ box [ dep [ node ]]; for ( int i = 1 ; i <= B ; ++ i ) ++ dp [ i ][ dep [ node ] % i ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]){ subh = 0 , dfs2 ( edge [ i ]. to ); for ( int d = subh ; d ; -- d ){ int a = 0 ; for ( int j = 1 ; j * d <= subh ; ++ j ) a += tmp [ j * d ]; ans [ d ] += ( ll ) a * cnt [ d ], cnt [ d ] += a ; } for ( int j = 1 ; j <= subh ; ++ j ) tmp [ j ] = 0 ; maxh = std :: max ( maxh , subh ); } for ( int i = 1 ; i <= maxh ; ++ i ) cnt [ i ] = 0 ; int a = node , p ; while ( a != root ){ p = a , a = fa [ a ], maxh = 0 , D = dep [ a ]; for ( int i = head [ a ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ a ] && edge [ i ]. to != p ) dfs3 ( edge [ i ]. to ); for ( int d = std :: min ( maxh , B ); d ; -- d ){ int b = 0 ; for ( int j = 1 ; j * d <= maxh ; ++ j ) b += cnt [ j * d ]; ans [ d ] += ( ll ) b * dp [ d ][ dep [ a ] % d ]; } for ( int d = std :: min ( maxh , B ) + 1 ; d <= maxh ; ++ d ){ int x = 0 , y = 0 ; for ( int j = dep [ a ]; j <= H ; j += d ) x += box [ j ]; for ( int j = 1 ; j * d <= maxh ; ++ j ) y += cnt [ j * d ]; ans [ d ] += ( ll ) x * y ; } for ( int i = 1 ; i <= maxh ; ++ i ) cnt [ i ] = 0 ; } for ( int i = 1 ; i <= H ; ++ i ) box [ i ] = 0 ; for ( int i = 1 ; i <= B ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) dp [ i ][ j ] = 0 ; vist [ node ] = true ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]) solve ( edge [ i ]. to , edge [ i ]. to ); if ( fa [ node ] && ! vist [ fa [ node ]]) solve ( fa [ node ], root ); } int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 2 ; i <= n ; ++ i ){ std :: scanf ( \"%d\" , fa + i ); add ( fa [ i ], i ), add ( i , fa [ i ]), ++ line [ dep [ i ] = dep [ fa [ i ]] + 1 ]; } solve ( 1 , 1 ); for ( int i = n ; i >= 1 ; -- i ){ line [ i ] += line [ i + 1 ]; for ( int j = 2 ; i * j <= n ; ++ j ) ans [ i ] -= ans [ i * j ]; } for ( int i = 1 ; i < n ; ++ i ) std :: printf ( \"%lld \\n \" , line [ i ] + ans [ i ]); return 0 ; } \u6765\u6e90 \u00b6 UOJ33 \u6811\u4e0a GCD","title":"\u6811\u4e0a GCD"},{"location":"problem/2021/march/uoj33/#gcd","text":"","title":"\u6811\u4e0a GCD"},{"location":"problem/2021/march/uoj33/#_1","text":"\u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u5b9a\u4e49 d(u,v) d(u,v) \u4e3a\u4ece u u \u5230 v v \u7684\u7b80\u5355\u8def\u5f84\u5305\u542b\u7684\u8fb9\u6570\u3002\u4ee4 a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) a=\\operatorname{LCA}(u,v),f(u,v)=\\gcd(d(u, a), d(a, v)) \uff0c\u6c42\u6ee1\u8db3 f(u,v)=i f(u,v)=i \u7684\u6570\u5bf9 (u,v) (u,v) \u4e2a\u6570\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/uoj33/#_2","text":"\u53ea\u8981\u6c42\u51fa i\\mid d(u,a) i\\mid d(u,a) \u4e14 i\\mid d(a,v) i\\mid d(a,v) \u7684\u6570\u5bf9\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bb9\u65a5\uff08\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u516c\u5f0f\uff09\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8003\u8651\u70b9\u5206\u6cbb\u3002 \u8bbe\u5f53\u524d\u5904\u7406\u6240\u6709\u7ecf\u8fc7 c c \u7684\u8def\u5f84 (u,v) (u,v) \uff0c\u4e14\u5f53\u524d\u6811\u6839\u4e3a r r \u3002\u4e00\u822c\u7684\u70b9\u5206\u6cbb\u662f\u5728\u65e0\u6839\u6811\u4e0a\u7684\uff0c\u800c\u5bf9\u4e8e\u6709\u6839\u6811\u70b9\u5206\u6cbb\u6211\u4eec\u8981\u8ba8\u8bba\u4e24\u79cd\u60c5\u51b5\uff1a \u8bbe c c \u5b50\u6811\u7684\u9ad8\u5ea6\u4e3a H H \u3002 u,v u,v \u540c\u5728 c c \u5b50\u6811\u4e2d\u65f6\uff0c\u53ea\u9700\u66b4\u529b\u5408\u5e76\u6df1\u5ea6\u4e3a d=1..H d=1..H \u500d\u6570\u7684\u8def\u5f84\uff0c\u5408\u5e76\u5355\u68f5\u5b50\u6811\u7684\u590d\u6742\u5ea6\u4e3a\u8c03\u548c\u7ea7\u6570 O(H\\log H) O(H\\log H) \u3002 u u \u5728 c c \u5b50\u6811\u4e2d\uff0c v v \u4e0d\u5728 c c \u5b50\u6811\u4e2d\u65f6\uff0c\u6211\u4eec\u679a\u4e3e u u \u548c v v \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 a a \u3002\u5bf9\u4e8e\u957f\u5ea6\u4e3a d d \u500d\u6570\u7684\u8def\u5f84\uff0c\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u82e5 d\\le \\sqrt{H} d\\le \\sqrt{H} \uff0c\u5219\u5229\u7528\u4e00\u4e2a\u6570\u7ec4 F[d][i] F[d][i] \u5b58\u4e0b\u6df1\u5ea6\u9664\u4ee5 d d \u7684\u4f59\u6570\u4e3a i i \u7684\u70b9\u7684\u4e2a\u6570\uff0c\u5efa\u7acb F F \u6570\u7ec4\u603b\u590d\u6742\u5ea6\u4e3a O(H\\sqrt H) O(H\\sqrt H) \uff0c\u5bf9\u4e8e\u5355\u4e2a d d \u53ef\u4ee5 O(1) O(1) \u67e5\u8be2\uff1b\u82e5 d\\ge \\sqrt H d\\ge \\sqrt H \uff0c\u5219\u6bcf\u6b21\u9700\u8981\u65f6\u66b4\u529b\u5728\u6876\u91cc\u67e5\uff0c\u5bf9\u4e8e\u5355\u4e2a d d \u53ef\u4ee5 O(\\sqrt H) O(\\sqrt H) \u67e5\u8be2\u3002 \u5355\u5c42\u7684\u590d\u6742\u5ea6\u4e3a O(n\\sqrt n) O(n\\sqrt n) \uff0c\u8fd0\u7528\u4e3b\u5b9a\u7406\uff0c\u603b\u590d\u6742\u5ea6\u4e5f\u662f O(n\\sqrt n) O(n\\sqrt n) \u3002\u770b\u4f3c\u5e38\u6570\u7206\u70b8\uff0c\u5b9e\u9645\u4e0a\u5e38\u6570\u5e76\u4e0d\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u9898\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/uoj33/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e5 + 19 , maxb = 4e2 + 19 ; struct Edge { int to , next ; } edge [ maxn << 1 ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ]}; head [ from ] = head [ 0 ]; } int n ; bool vist [ maxn ]; ll ans [ maxn ]; int fa [ maxn ], dep [ maxn ], size [ maxn ], mega [ maxn ], line [ maxn ]; int st [ maxn ], top ; int H , B , D , maxh , subh ; int cnt [ maxn ], tmp [ maxn ]; int dp [ maxb ][ maxb ], box [ maxn ]; void dfs1 ( int node ){ dep [ node ] = dep [ fa [ node ]] + 1 , size [ node ] = 1 , mega [ node ] = 0 ; st [ ++ top ] = node , H = std :: max ( H , dep [ node ]); for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]){ dfs1 ( edge [ i ]. to ); if ( size [ edge [ i ]. to ] > mega [ node ]) mega [ node ] = size [ edge [ i ]. to ]; size [ node ] += size [ edge [ i ]. to ]; } } void dfs2 ( int node ){ ++ tmp [ dep [ node ] - D ], subh = std :: max ( subh , dep [ node ] - D ), ++ box [ dep [ node ]]; for ( int i = 1 ; i <= B ; ++ i ) ++ dp [ i ][ dep [ node ] % i ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]) dfs2 ( edge [ i ]. to ); } void dfs3 ( int node ){ ++ cnt [ dep [ node ] - D ], maxh = std :: max ( maxh , dep [ node ] - D ); for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]) dfs3 ( edge [ i ]. to ); } void solve ( int node , int root ){ top = H = 0 , dep [ fa [ root ]] = 0 , dfs1 ( root ), B = std :: pow ( H , 0.319 ); for ( int i = 1 ; i <= top ; ++ i ) if ( std :: max ( mega [ st [ i ]], size [ root ] - size [ st [ i ]]) <= size [ root ] / 2 ){ node = st [ i ]; break ; } D = dep [ node ]; maxh = 0 , ++ box [ dep [ node ]]; for ( int i = 1 ; i <= B ; ++ i ) ++ dp [ i ][ dep [ node ] % i ]; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]){ subh = 0 , dfs2 ( edge [ i ]. to ); for ( int d = subh ; d ; -- d ){ int a = 0 ; for ( int j = 1 ; j * d <= subh ; ++ j ) a += tmp [ j * d ]; ans [ d ] += ( ll ) a * cnt [ d ], cnt [ d ] += a ; } for ( int j = 1 ; j <= subh ; ++ j ) tmp [ j ] = 0 ; maxh = std :: max ( maxh , subh ); } for ( int i = 1 ; i <= maxh ; ++ i ) cnt [ i ] = 0 ; int a = node , p ; while ( a != root ){ p = a , a = fa [ a ], maxh = 0 , D = dep [ a ]; for ( int i = head [ a ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ a ] && edge [ i ]. to != p ) dfs3 ( edge [ i ]. to ); for ( int d = std :: min ( maxh , B ); d ; -- d ){ int b = 0 ; for ( int j = 1 ; j * d <= maxh ; ++ j ) b += cnt [ j * d ]; ans [ d ] += ( ll ) b * dp [ d ][ dep [ a ] % d ]; } for ( int d = std :: min ( maxh , B ) + 1 ; d <= maxh ; ++ d ){ int x = 0 , y = 0 ; for ( int j = dep [ a ]; j <= H ; j += d ) x += box [ j ]; for ( int j = 1 ; j * d <= maxh ; ++ j ) y += cnt [ j * d ]; ans [ d ] += ( ll ) x * y ; } for ( int i = 1 ; i <= maxh ; ++ i ) cnt [ i ] = 0 ; } for ( int i = 1 ; i <= H ; ++ i ) box [ i ] = 0 ; for ( int i = 1 ; i <= B ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) dp [ i ][ j ] = 0 ; vist [ node ] = true ; for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( ! vist [ edge [ i ]. to ] && edge [ i ]. to != fa [ node ]) solve ( edge [ i ]. to , edge [ i ]. to ); if ( fa [ node ] && ! vist [ fa [ node ]]) solve ( fa [ node ], root ); } int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 2 ; i <= n ; ++ i ){ std :: scanf ( \"%d\" , fa + i ); add ( fa [ i ], i ), add ( i , fa [ i ]), ++ line [ dep [ i ] = dep [ fa [ i ]] + 1 ]; } solve ( 1 , 1 ); for ( int i = n ; i >= 1 ; -- i ){ line [ i ] += line [ i + 1 ]; for ( int j = 2 ; i * j <= n ; ++ j ) ans [ i ] -= ans [ i * j ]; } for ( int i = 1 ; i < n ; ++ i ) std :: printf ( \"%lld \\n \" , line [ i ] + ans [ i ]); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/uoj33/#_4","text":"UOJ33 \u6811\u4e0a GCD","title":"\u6765\u6e90"},{"location":"problem/2021/march/uoj429/","text":"\u4e32\u4e32\u5212\u5206 \u00b6 \u9898\u610f \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \uff0c\u5c06\u5176\u5212\u5206\u4e3a k k ( k > 1 k > 1 ) \u4e2a\u5b50\u4e32 s=s_1s_2\\ldots s_k s=s_1s_2\\ldots s_k \uff0c\u6ee1\u8db3\uff1a \\forall i\\in[1,k],s_i \\forall i\\in[1,k],s_i \u4e0d\u662f\u5faa\u73af\u4e32 \\forall i\\in [1,k-1],s_i \\neq s_{i+1} \\forall i\\in [1,k-1],s_i \\neq s_{i+1} \u6c42\u65b9\u6848\u6570\u3002 \u89e3\u6790 \u00b6 \u5982\u679c\u6211\u4eec\u6bcf\u6b21\u5f3a\u5236\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u62c6\u6210\u6700\u5c0f\u5faa\u73af\uff0c\u90a3\u4e48\u6700\u7ec8\u5f97\u5230\u7684\u5212\u5206\u4e00\u5b9a\u6ee1\u8db3\u6761\u4ef6 1\u3002\u800c\u6761\u4ef6\u4e8c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bb9\u65a5\u6ee1\u8db3\u3002 \u8bbe dp_i dp_i \u8868\u793a s s \u7684\u957f\u5ea6\u4e3a i i \u7684\u524d\u7f00\u7684\u6ee1\u8db3\u6240\u6709\u4e24\u79cd\u6761\u4ef6\u7684\u5212\u5206\u65b9\u6848\uff0c f(t) f(t) \u8868\u793a t t \u542b\u6709\u7684\u6700\u5c0f\u5faa\u73af\u7684\u4e2a\u6570\uff0c\u5219\u6709\u8f6c\u79fb\u65b9\u7a0b dp_i=\\sum_{j=0}^{i-1}(-1)^{f(s[j+1,i])-1}dp_j dp_i=\\sum_{j=0}^{i-1}(-1)^{f(s[j+1,i])-1}dp_j \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u8fd9\u4e2a\u5bb9\u65a5\uff1a g_k=\\sum\\limits_{f(s[j+1,i])=k}dp_j g_k=\\sum\\limits_{f(s[j+1,i])=k}dp_j \u8868\u793a\u6700\u540e\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d k k \u6b21\u6216 k+1 k+1 \u6b21\u7684\u65b9\u6848\u6570 (\u7531\u4e8e j j \u4e4b\u524d\u4e0d\u5b58\u5728\u91cd\u590d\u4e32\uff0c\u53ea\u80fd\u548c j j \u5c3e\u90e8\u7684\u5b50\u4e32\u76f8\u7b49\uff0c\u5bfc\u81f4\u591a\u91cd\u590d 1 1 \u6b21)\u3002\u8bbe\u6700\u540e\u4e00\u4e2a\u5b50\u4e32\u6070\u597d\u91cd\u590d i i \u6b21\u7684\u65b9\u6848\u6570\u4e3a h_i h_i \uff0c\u6839\u636e\u63a8\u5bfc\u6709 g_k=h_k+h_{k+1} g_k=h_k+h_{k+1} \uff0c\u53cd\u6f14\u4e00\u4e0b\u5f97\u5230 h_1=\\sum\\limits_i(-1)^{i-1}g_i h_1=\\sum\\limits_i(-1)^{i-1}g_i \u3002 \u73b0\u5728\u6211\u4eec\u8981\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u7684\u5faa\u73af\u6b21\u6570\u3002\u53c2\u8003 WC2019 \u8bfe\u4ef6\uff0cprimitive square \u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 O(|s|\\log |s|) O(|s|\\log |s|) \u7ea7\u522b\uff0c\u8bb0\u5f55\u524d\u7f00\u548c\u8f6c\u79fb\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef unsigned long long int ull ; const int maxn = 2e5 + 19 , mod = 998244353 ; struct hash_engine { ull key [ maxn ], basep [ maxn ], base ; void init ( const char * s , int n ){ basep [ 0 ] = 1ull , base = 233ull ; for ( int i = 1 ; i <= n ; ++ i ){ key [ i ] = key [ i - 1 ] * base + ( ull ) s [ i ]; basep [ i ] = basep [ i - 1 ] * base ; } } ull operator ()( const int & l , const int & r ){ if ( l > r ) return 0ull ; return key [ r ] - key [ l - 1 ] * basep [ r - l + 1 ]; } } mhash ; std :: vector < int > x [ maxn ]; std :: vector < std :: vector < int > > g ; std :: vector < std :: pair < std :: pair < int , int > , int > > runs ; char s [ maxn ]; int n , lyn [ maxn ], dp [ maxn ], tot ; int st [ maxn ], top ; int find_prev ( int a , int b ){ int l = 0 , r = std :: min ( a , b ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a - mid + 1 , a ) == mhash ( b - mid + 1 , b )) l = mid ; else r = mid - 1 ; } return l ; } int find_next ( int a , int b ){ int l = 0 , r = std :: min ( n - a + 1 , n - b + 1 ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a , a + mid - 1 ) == mhash ( b , b + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } void lyndon ( int opt ){ if ( opt ) s [ n + 1 ] = 'a' - 1 ; else s [ n + 1 ] = 'z' + 1 ; st [ 0 ] = n + 1 , top = 0 ; for ( int i = n ; i >= 1 ; -- i ){ while ( top ){ int x = find_next ( i , st [ top ]); if ( opt ? s [ i + x ] < s [ st [ top ] + x ] : s [ i + x ] > s [ st [ top ] + x ]) -- top ; else break ; } lyn [ i ] = st [ top ] - 1 , st [ ++ top ] = i ; } } int main (){ std :: scanf ( \"%s\" , s + 1 ), n = std :: strlen ( s + 1 ); mhash . init ( s , n ); for ( int opt = 0 ; opt < 2 ; ++ opt ){ lyndon ( opt ); for ( int i = 1 ; i <= n ; ++ i ){ int l = i , r = lyn [ i ], p = r - l + 1 ; std :: pair < int , int > mr ( l - find_prev ( l - 1 , r ), r + find_next ( l , r + 1 )); if ( p * 2 <= mr . second - mr . first + 1 ) runs . push_back ( std :: make_pair ( mr , p )); } } std :: sort ( runs . begin (), runs . end ()); runs . resize ( std :: unique ( runs . begin (), runs . end ()) - runs . begin ()); g . resize ( runs . size ()); for ( int i = 0 ; i < ( int ) runs . size (); ++ i ){ int l = runs [ i ]. first . first , r = runs [ i ]. first . second , p = runs [ i ]. second ; g [ i ]. resize ( r - l - p * 2 + 2 ); for ( int j = l + p * 2 - 1 ; j <= r ; ++ j ) x [ j ]. push_back ( i ); } dp [ 0 ] = 1 , tot = 1 ; for ( int i = 1 ; i <= n ; ++ i ){ dp [ i ] = tot ; for ( int j = 0 ; j < ( int ) x [ i ]. size (); ++ j ){ int k = x [ i ][ j ]; int l = runs [ k ]. first . first , p = runs [ k ]. second ; if ( i - l - 4 * p + 1 >= 0 ) g [ k ][ i - l - 2 * p + 1 ] = ( g [ k ][ i - l - 4 * p + 1 ] + dp [ i - 2 * p ]) % mod ; else g [ k ][ i - l - 2 * p + 1 ] = dp [ i - 2 * p ]; dp [ i ] = ( dp [ i ] - 2l l * g [ k ][ i - l - 2 * p + 1 ]) % mod ; } tot = ( tot + dp [ i ]) % mod ; } std :: printf ( \"%d \\n \" , ( dp [ n ] + mod ) % mod ); return 0 ; } \u6765\u6e90 \u00b6 UOJ429 \u4e32\u4e32\u5212\u5206","title":"\u4e32\u4e32\u5212\u5206"},{"location":"problem/2021/march/uoj429/#_1","text":"","title":"\u4e32\u4e32\u5212\u5206"},{"location":"problem/2021/march/uoj429/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \uff0c\u5c06\u5176\u5212\u5206\u4e3a k k ( k > 1 k > 1 ) \u4e2a\u5b50\u4e32 s=s_1s_2\\ldots s_k s=s_1s_2\\ldots s_k \uff0c\u6ee1\u8db3\uff1a \\forall i\\in[1,k],s_i \\forall i\\in[1,k],s_i \u4e0d\u662f\u5faa\u73af\u4e32 \\forall i\\in [1,k-1],s_i \\neq s_{i+1} \\forall i\\in [1,k-1],s_i \\neq s_{i+1} \u6c42\u65b9\u6848\u6570\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/uoj429/#_3","text":"\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u5f3a\u5236\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u62c6\u6210\u6700\u5c0f\u5faa\u73af\uff0c\u90a3\u4e48\u6700\u7ec8\u5f97\u5230\u7684\u5212\u5206\u4e00\u5b9a\u6ee1\u8db3\u6761\u4ef6 1\u3002\u800c\u6761\u4ef6\u4e8c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bb9\u65a5\u6ee1\u8db3\u3002 \u8bbe dp_i dp_i \u8868\u793a s s \u7684\u957f\u5ea6\u4e3a i i \u7684\u524d\u7f00\u7684\u6ee1\u8db3\u6240\u6709\u4e24\u79cd\u6761\u4ef6\u7684\u5212\u5206\u65b9\u6848\uff0c f(t) f(t) \u8868\u793a t t \u542b\u6709\u7684\u6700\u5c0f\u5faa\u73af\u7684\u4e2a\u6570\uff0c\u5219\u6709\u8f6c\u79fb\u65b9\u7a0b dp_i=\\sum_{j=0}^{i-1}(-1)^{f(s[j+1,i])-1}dp_j dp_i=\\sum_{j=0}^{i-1}(-1)^{f(s[j+1,i])-1}dp_j \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u8fd9\u4e2a\u5bb9\u65a5\uff1a g_k=\\sum\\limits_{f(s[j+1,i])=k}dp_j g_k=\\sum\\limits_{f(s[j+1,i])=k}dp_j \u8868\u793a\u6700\u540e\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d k k \u6b21\u6216 k+1 k+1 \u6b21\u7684\u65b9\u6848\u6570 (\u7531\u4e8e j j \u4e4b\u524d\u4e0d\u5b58\u5728\u91cd\u590d\u4e32\uff0c\u53ea\u80fd\u548c j j \u5c3e\u90e8\u7684\u5b50\u4e32\u76f8\u7b49\uff0c\u5bfc\u81f4\u591a\u91cd\u590d 1 1 \u6b21)\u3002\u8bbe\u6700\u540e\u4e00\u4e2a\u5b50\u4e32\u6070\u597d\u91cd\u590d i i \u6b21\u7684\u65b9\u6848\u6570\u4e3a h_i h_i \uff0c\u6839\u636e\u63a8\u5bfc\u6709 g_k=h_k+h_{k+1} g_k=h_k+h_{k+1} \uff0c\u53cd\u6f14\u4e00\u4e0b\u5f97\u5230 h_1=\\sum\\limits_i(-1)^{i-1}g_i h_1=\\sum\\limits_i(-1)^{i-1}g_i \u3002 \u73b0\u5728\u6211\u4eec\u8981\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u7684\u5faa\u73af\u6b21\u6570\u3002\u53c2\u8003 WC2019 \u8bfe\u4ef6\uff0cprimitive square \u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 O(|s|\\log |s|) O(|s|\\log |s|) \u7ea7\u522b\uff0c\u8bb0\u5f55\u524d\u7f00\u548c\u8f6c\u79fb\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/uoj429/#_4","text":"#include <bits/stdc++.h> typedef unsigned long long int ull ; const int maxn = 2e5 + 19 , mod = 998244353 ; struct hash_engine { ull key [ maxn ], basep [ maxn ], base ; void init ( const char * s , int n ){ basep [ 0 ] = 1ull , base = 233ull ; for ( int i = 1 ; i <= n ; ++ i ){ key [ i ] = key [ i - 1 ] * base + ( ull ) s [ i ]; basep [ i ] = basep [ i - 1 ] * base ; } } ull operator ()( const int & l , const int & r ){ if ( l > r ) return 0ull ; return key [ r ] - key [ l - 1 ] * basep [ r - l + 1 ]; } } mhash ; std :: vector < int > x [ maxn ]; std :: vector < std :: vector < int > > g ; std :: vector < std :: pair < std :: pair < int , int > , int > > runs ; char s [ maxn ]; int n , lyn [ maxn ], dp [ maxn ], tot ; int st [ maxn ], top ; int find_prev ( int a , int b ){ int l = 0 , r = std :: min ( a , b ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a - mid + 1 , a ) == mhash ( b - mid + 1 , b )) l = mid ; else r = mid - 1 ; } return l ; } int find_next ( int a , int b ){ int l = 0 , r = std :: min ( n - a + 1 , n - b + 1 ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a , a + mid - 1 ) == mhash ( b , b + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } void lyndon ( int opt ){ if ( opt ) s [ n + 1 ] = 'a' - 1 ; else s [ n + 1 ] = 'z' + 1 ; st [ 0 ] = n + 1 , top = 0 ; for ( int i = n ; i >= 1 ; -- i ){ while ( top ){ int x = find_next ( i , st [ top ]); if ( opt ? s [ i + x ] < s [ st [ top ] + x ] : s [ i + x ] > s [ st [ top ] + x ]) -- top ; else break ; } lyn [ i ] = st [ top ] - 1 , st [ ++ top ] = i ; } } int main (){ std :: scanf ( \"%s\" , s + 1 ), n = std :: strlen ( s + 1 ); mhash . init ( s , n ); for ( int opt = 0 ; opt < 2 ; ++ opt ){ lyndon ( opt ); for ( int i = 1 ; i <= n ; ++ i ){ int l = i , r = lyn [ i ], p = r - l + 1 ; std :: pair < int , int > mr ( l - find_prev ( l - 1 , r ), r + find_next ( l , r + 1 )); if ( p * 2 <= mr . second - mr . first + 1 ) runs . push_back ( std :: make_pair ( mr , p )); } } std :: sort ( runs . begin (), runs . end ()); runs . resize ( std :: unique ( runs . begin (), runs . end ()) - runs . begin ()); g . resize ( runs . size ()); for ( int i = 0 ; i < ( int ) runs . size (); ++ i ){ int l = runs [ i ]. first . first , r = runs [ i ]. first . second , p = runs [ i ]. second ; g [ i ]. resize ( r - l - p * 2 + 2 ); for ( int j = l + p * 2 - 1 ; j <= r ; ++ j ) x [ j ]. push_back ( i ); } dp [ 0 ] = 1 , tot = 1 ; for ( int i = 1 ; i <= n ; ++ i ){ dp [ i ] = tot ; for ( int j = 0 ; j < ( int ) x [ i ]. size (); ++ j ){ int k = x [ i ][ j ]; int l = runs [ k ]. first . first , p = runs [ k ]. second ; if ( i - l - 4 * p + 1 >= 0 ) g [ k ][ i - l - 2 * p + 1 ] = ( g [ k ][ i - l - 4 * p + 1 ] + dp [ i - 2 * p ]) % mod ; else g [ k ][ i - l - 2 * p + 1 ] = dp [ i - 2 * p ]; dp [ i ] = ( dp [ i ] - 2l l * g [ k ][ i - l - 2 * p + 1 ]) % mod ; } tot = ( tot + dp [ i ]) % mod ; } std :: printf ( \"%d \\n \" , ( dp [ n ] + mod ) % mod ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/uoj429/#_5","text":"UOJ429 \u4e32\u4e32\u5212\u5206","title":"\u6765\u6e90"},{"location":"problem/2021/march/uoj596/","text":"\u4e09\u7ef4\u7acb\u4f53\u6df7\u5143\u52b2 \u00b6 \u9898\u610f \u00b6 \u4f60\u8eab\u4e0a\u4e00\u5171\u6709 n_1 + n_2 + \\ldots + n_k n_1 + n_2 + \\ldots + n_k \u5904\u7a74\u4f4d\uff0c\u5176\u4e2d\u4e00\u5171\u6709 n_i n_i \u5904\u662f\u7b2c i i \u7ef4\u7684\u7a74\u4f4d\u3002\u6253\u901a\u67d0\u4e24\u4e2a\u4f4d\u4e8e\u7b2c i i \u7ef4\u548c\u7b2c j j \u7ef4\u7684\u7a74\u4f4d\u7684\u65b9\u6848\u6570\u4e3a a_{i,j} a_{i,j} (\u540c\u7ef4\u7684\u7a74\u4f4d\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u6253\u901a\uff0c\u4f46\u4e00\u4e2a\u7a74\u4f4d\u4e0d\u80fd\u4e0e\u81ea\u5df1\u6253\u901a)\uff0c\u6c42\u4f7f\u5f97\u6240\u6709\u7a74\u4f4d\u8fde\u901a\u7684\u65b9\u6848\u6570\u3002 \u89e3\u6790 \u00b6 \u8fd9\u9053\u9898\u8981\u6c42\u8ba1\u8fde\u901a\u56fe\u7684\u6570\u91cf\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528\u4e0e \u57ce\u5e02\u89c4\u5212 \u7c7b\u4f3c\u7684\u65b9\u6cd5\u89e3\u51b3\u3002 \u91cd\u7533\u57ce\u5e02\u89c4\u5212\u7684\u505a\u6cd5\u3002\u8bbe f_i f_i \u4e3a i i \u4e2a\u70b9\u7684\u6709\u6807\u53f7\u65e0\u5411\u8fde\u901a\u56fe\u7684\u4e2a\u6570\uff0c g_i g_i \u4e3a i i \u4e2a\u70b9\u7684\u6709\u6807\u53f7\u65e0\u5411\u56fe\u7684\u4e2a\u6570\uff0c\u5219\u6709 g_n=\\sum\\binom{n-1}{i-1}f_ig_{n-i} g_n=\\sum\\binom{n-1}{i-1}f_ig_{n-i} \u4e4b\u6240\u4ee5\u4e0d\u662f \\binom{n}{i} \\binom{n}{i} \u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u7528 f_i f_i \u679a\u4e3e\u548c 1 1 \u53f7\u70b9\u8fde\u901a\u7684\u5b50\u56fe\uff0c 1 1 \u53f7\u70b9\u4e0d\u53c2\u4e0e\u7f16\u53f7\u7684\u6253\u4e71\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u9879\u5f0f\u6c42\u9006\u89e3\u51fa f_i f_i \u3002\u5f53\u7136\u4e5f\u6709\u66f4\u6e05\u771f\u7684\u505a\u6cd5\uff1a G(z)=\\exp F(z) G(z)=\\exp F(z) \u3002 \u56de\u5230\u672c\u9898\u3002 \u6211\u4eec\u53d1\u73b0\u4ec5\u4ec5\u8bb0\u5f55\u548c 1 1 \u8fde\u901a\u7684\u7a74\u4f4d\u7684\u4e2a\u6570\uff0c\u4fe1\u606f\u662f\u4e0d\u8db3\u7684\u3002\u4f46\u53d1\u73b0 \\prod(n+1) \\prod(n+1) \u7684\u8303\u56f4\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u548c 1 1 \u8fde\u901a\u7684\u7a74\u4f4d\u72b6\u6001\u538b\u7f29\u4e3a\u4e00\u4e2a (n_1, n_2, \\ldots, n_k) (n_1, n_2, \\ldots, n_k) \u8fdb\u5236\u6570\u3002\u8bbe\u6709 a_i a_i \u4e2a i i \u7ef4\u7a74\u4f4d\u4e0e 1 1 \u8fde\u901a (\u4e0d\u5305\u62ec 1 1 \u672c\u8eab)\uff0c\u5219\u53ef\u4ee5\u5c06\u72b6\u6001\u8868\u793a\u4e3a S=a_1+(n_1+1)a_2+(n_1+1)(n_2+1)a_3+\\ldots+(n_1+1)(n_2+1)\\ldots(n_{k-1}+1)a_k S=a_1+(n_1+1)a_2+(n_1+1)(n_2+1)a_3+\\ldots+(n_1+1)(n_2+1)\\ldots(n_{k-1}+1)a_k \u5e76\u4e14\u6211\u4eec\u53d1\u73b0\uff0c\u4e24\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u6570\u7684\u548c\uff0c\u6070\u597d\u5c31\u662f\u4e24\u4e2a\u72b6\u6001\u7684\u5e76\u5bf9\u5e94\u7684\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u7167\u642c\u666e\u901a\u56fe\u7684\u505a\u6cd5\uff1b\u4f46\u5377\u79ef\u65f6\u6211\u4eec\u5fc5\u987b\u53bb\u6389\u8fdb\u4f4d\u7684\u5f71\u54cd\u3002\u8bbe\u5360\u4f4d\u51fd\u6570 \\chi(S)=\\sum\\limits_{i=1}^{k-1} \\dfrac{S}{\\prod\\limits_{j=1}^i(n_j+1)} \\chi(S)=\\sum\\limits_{i=1}^{k-1} \\dfrac{S}{\\prod\\limits_{j=1}^i(n_j+1)} \uff0c\u5219 \\chi(A+B)=\\chi(A)+\\chi(B) \\chi(A+B)=\\chi(A)+\\chi(B) \u5f53\u4e14\u4ec5\u5f53 A+B A+B \u4e0d\u8fdb\u4f4d\u3002 \u6211\u4eec\u8bbe\u4e8c\u5143\u591a\u9879\u5f0f F(x, z)=f_ix^iz^{\\chi(i)} F(x, z)=f_ix^iz^{\\chi(i)} \uff0c\u5219\u6211\u4eec\u9700\u8981\u7684\u4e0d\u8fdb\u4f4d\u5377\u79ef\u6ee1\u8db3 (F\\ast G)(x, z)=\\sum[z^{\\chi(i)}]f_jg_{i-j}x^iz^{\\chi(i)+\\chi(i-j)} (F\\ast G)(x, z)=\\sum[z^{\\chi(i)}]f_jg_{i-j}x^iz^{\\chi(i)+\\chi(i-j)} \u3002\u8fd9\u91cc [z^i] [z^i] \u8868\u793a\u53d6\u591a\u9879\u5f0f\u7684 z^i z^i \u9879\u3002 \u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3 \\chi(i+j)-\\chi(i)+\\chi(j) \\chi(i+j)-\\chi(i)+\\chi(j) \u662f\u5426\u4e3a 0 0 \uff0c\u4e0d\u5173\u5fc3\u5b83\u7684\u5177\u4f53\u503c\uff0c\u800c \\chi(i+j)-\\chi(i)+\\chi(j)\\in[0, k) \\chi(i+j)-\\chi(i)+\\chi(j)\\in[0, k) (\u6bcf\u90e8\u5206\u4f4d\u6700\u591a\u901a\u8fc7\u589e\u52a0 1 1 )\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97 \\bmod (z^{k}-1) \\bmod (z^{k}-1) \u610f\u4e49\u4e0b\u7684\u5377\u79ef\uff0c\u518d\u624b\u52a8\u53d6 z z \u7684\u5bf9\u5e94\u6b21\u6570\u5373\u53ef\u3002 \u4e00\u79cd\u6bd4\u8f83\u5408\u7406\u7684\u5b9e\u73b0\u662f\uff0c\u5bf9 i\\in[0,k) i\\in[0,k) \u6c42 [z^i]F(x, z) [z^i]F(x, z) \u548c [z^i]G(x, z) [z^i]G(x, z) DFT (\u4e5f\u5c31\u662f\u628a\u4e8c\u5143\u591a\u9879\u5f0f\u6309 z z \u7684\u6b21\u6570\u62c6\u5f00)\uff0c\u7136\u540e\u5728 z z \u8fd9\u4e00\u7ef4\u5ea6\u4e0a\u66b4\u529b\u5377\u79ef\uff0c\u5f97\u5230 [z^i](F*G)(x, z) [z^i](F*G)(x, z) \uff0c\u518d\u5408\u5e76\u56de\u53bb\u3002\u7531\u4e8e z z \u8fd9\u4e00\u7ef4\u7684\u7684\u6b21\u6570\u4e3a k-1 k-1 \uff0c F(x,z) F(x,z) \u53ea\u80fd\u62c6\u4e3a k k \u4e2a\u591a\u9879\u5f0f\u5206\u522b DFT\uff0c\u4ea7\u751f O(kn\\log n) O(kn\\log n) \u7684\u590d\u6742\u5ea6\uff1b\u5728 z z \u8fd9\u4e00\u7ef4\u5377\u79ef\u7684\u590d\u6742\u5ea6\u4e3a O(k^2n) O(k^2n) \uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(kn\\log n+k^2\\log n) O(kn\\log n+k^2\\log n) \u3002 \u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u79cd\u4f18\u79c0\u7684 k k \u7ef4\u591a\u9879\u5f0f\u5377\u79ef\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u79cd\u5377\u79ef\u62d3\u5c55\u6027\u5f88\u597d\uff0c\u53c2\u89c1 https://rushcheyo.blog.uoj.ac/blog/6547 \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; typedef std :: vector < int > poly ; const int maxn = 1 << 21 , maxk = 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int rev [ maxn ]; void make_rev ( int n ){ for ( int i = 0 ; i < n ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? n >> 1 : 0 ); } int ntt_len ; void dft ( int * f , int N , int b ){ static int w [ maxn ]; ntt_len += N ; for ( int i = 0 ; i < N ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); for ( int i = 2 ; i <= N ; i <<= 1 ){ w [ 0 ] = 1 , w [ 1 ] = qpow ( 3 , ( mod - 1 ) / i ); if ( b == -1 ) w [ 1 ] = qpow ( w [ 1 ], mod - 2 ); for ( int j = 2 ; j < i / 2 ; ++ j ) w [ j ] = ( ll ) w [ j - 1 ] * w [ 1 ] % mod ; for ( int j = 0 ; j < N ; j += i ){ int * g = f + j , * h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ int p = g [ k ], q = ( ll ) h [ k ] * w [ k ] % mod ; g [ k ] = ( p + q ) % mod , h [ k ] = ( p - q ) % mod ; } } } if ( b == -1 ){ for ( int i = 0 , inv = qpow ( N , mod - 2 ); i < N ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; } } int N = 1 , n [ maxk ], k , a [ maxk ][ maxk ]; int preproduct [ maxk ], chi [ maxn ]; int fact [ maxn ], ifact [ maxn ]; void init_fact ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } int SETEDSZ ; poly operator * ( poly f , poly g ){ int sz = 1 ; if ( SETEDSZ ) sz = SETEDSZ ; else while ( sz < ( int ) f . size () + ( int ) g . size () - 1 ) sz <<= 1 ; make_rev ( sz ); static int zf [ maxk ][ maxn ], zg [ maxk ][ maxn ], res [ maxk ][ maxn ]; for ( int i = 0 ; i < k ; ++ i ){ std :: fill ( zf [ i ], zf [ i ] + sz , 0 ); std :: fill ( zg [ i ], zg [ i ] + sz , 0 ); std :: fill ( res [ i ], res [ i ] + sz , 0 ); } for ( int i = 0 ; i < ( int ) f . size (); ++ i ) zf [ chi [ i ]][ i ] = f [ i ]; for ( int i = 0 ; i < ( int ) g . size (); ++ i ) zg [ chi [ i ]][ i ] = g [ i ]; for ( int i = 0 ; i < k ; ++ i ) dft ( zf [ i ], sz , 1 ), dft ( zg [ i ], sz , 1 ); for ( int i = 0 ; i < k ; ++ i ) for ( int j = 0 ; j < k ; ++ j ){ int p = ( i + j ) % k ; for ( int q = 0 ; q < sz ; ++ q ) res [ p ][ q ] = ( res [ p ][ q ] + ( ll ) zf [ i ][ q ] * zg [ j ][ q ]) % mod ; } for ( int i = 0 ; i < k ; ++ i ) dft ( res [ i ], sz , -1 ); sz = std :: min < int > ( f . size () + g . size () - 1 , N ); poly ans ( sz ); for ( int i = 0 ; i < sz ; ++ i ) ans [ i ] = res [ chi [ i ]][ i ]; return ans ; } poly inv ( const poly & h ){ poly f ( 1 ), g ; f [ 0 ] = qpow ( h [ 0 ], mod - 2 ); for ( int w = 2 ; w / 2 < N ; w <<= 1 ){ g . resize ( w ); for ( int i = std :: min ( w , ( int ) h . size ()) - 1 ; i >= 0 ; -- i ) g [ i ] = h [ i ]; for ( int i = w - 1 ; i >= ( int ) h . size (); -- i ) g [ i ] = 0 ; static poly t ; t = f * g ; t . resize ( w ); t = t * f ; f . resize ( w ); for ( int i = 0 ; i < w ; ++ i ) f [ i ] = ( 2l l * f [ i ] - t [ i ]) % mod ; } f . resize ( h . size ()); return f ; } poly deriv ( const poly & f ){ poly g ( N ); for ( int i = 0 ; i < N ; ++ i ) g [ i ] = ( ll ) f [ i ] * i % mod ; return g ; } poly integ ( const poly & f ){ poly g ( N ); g [ 0 ] = 1 ; for ( int i = 0 ; i < N ; ++ i ) g [ i ] = ( ll ) f [ i ] * ifact [ i ] % mod * fact [ i - 1 ] % mod ; return g ; } poly G ; int main (){ std :: scanf ( \"%d\" , & k ); for ( int i = 1 ; i <= k ; ++ i ) std :: scanf ( \"%d\" , n + i ), N *= ( n [ i ] + 1 ); for ( int i = 1 ; i <= k ; ++ i ) for ( int j = 1 ; j <= k ; ++ j ) std :: scanf ( \"%d\" , & a [ i ][ j ]); init_fact ( N ); preproduct [ 0 ] = 1 ; for ( int i = 1 ; i <= k ; ++ i ) preproduct [ i ] = preproduct [ i - 1 ] * ( n [ i ] + 1 ); G . resize ( N ); for ( int s = 0 ; s < N ; ++ s ){ static int cnt [ maxn ]; for ( int i = 1 ; i <= k ; ++ i ) cnt [ i ] = s % preproduct [ i ] / preproduct [ i - 1 ]; for ( int i = 1 ; i < k ; ++ i ) chi [ s ] += s / preproduct [ i ]; chi [ s ] %= k , G [ s ] = 1 ; if ( s ){ for ( int i = 1 ; i <= k ; ++ i ) if ( cnt [ i ]){ G [ s ] = ( ll ) G [ s - preproduct [ i - 1 ]] * qpow ( a [ i ][ i ] + 1 , cnt [ i ] - 1 ) % mod ; G [ s ] = ( ll ) G [ s ] * ifact [ cnt [ i ]] % mod * fact [ cnt [ i ] - 1 ] % mod ; for ( int j = i + 1 ; j <= k ; ++ j ) G [ s ] = ( ll ) G [ s ] * qpow ( a [ i ][ j ] + 1 , cnt [ j ]) % mod ; break ; } } } G = inv ( G ) * deriv ( G ), G . resize ( N ), G = integ ( G ); int res = G [ N - 1 ]; for ( int i = 1 ; i <= k ; ++ i ) res = ( ll ) res * fact [ n [ i ]] % mod ; std :: printf ( \"%d \\n \" , ntt_len ); std :: printf ( \"%d \\n \" , ( res + mod ) % mod ); return 0 ; } \u6765\u6e90 \u00b6 UOJ596 \u4e09\u7ef4\u7acb\u4f53\u6df7\u5143\u52b2","title":"\u4e09\u7ef4\u7acb\u4f53\u6df7\u5143\u52b2"},{"location":"problem/2021/march/uoj596/#_1","text":"","title":"\u4e09\u7ef4\u7acb\u4f53\u6df7\u5143\u52b2"},{"location":"problem/2021/march/uoj596/#_2","text":"\u4f60\u8eab\u4e0a\u4e00\u5171\u6709 n_1 + n_2 + \\ldots + n_k n_1 + n_2 + \\ldots + n_k \u5904\u7a74\u4f4d\uff0c\u5176\u4e2d\u4e00\u5171\u6709 n_i n_i \u5904\u662f\u7b2c i i \u7ef4\u7684\u7a74\u4f4d\u3002\u6253\u901a\u67d0\u4e24\u4e2a\u4f4d\u4e8e\u7b2c i i \u7ef4\u548c\u7b2c j j \u7ef4\u7684\u7a74\u4f4d\u7684\u65b9\u6848\u6570\u4e3a a_{i,j} a_{i,j} (\u540c\u7ef4\u7684\u7a74\u4f4d\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u6253\u901a\uff0c\u4f46\u4e00\u4e2a\u7a74\u4f4d\u4e0d\u80fd\u4e0e\u81ea\u5df1\u6253\u901a)\uff0c\u6c42\u4f7f\u5f97\u6240\u6709\u7a74\u4f4d\u8fde\u901a\u7684\u65b9\u6848\u6570\u3002","title":"\u9898\u610f"},{"location":"problem/2021/march/uoj596/#_3","text":"\u8fd9\u9053\u9898\u8981\u6c42\u8ba1\u8fde\u901a\u56fe\u7684\u6570\u91cf\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528\u4e0e \u57ce\u5e02\u89c4\u5212 \u7c7b\u4f3c\u7684\u65b9\u6cd5\u89e3\u51b3\u3002 \u91cd\u7533\u57ce\u5e02\u89c4\u5212\u7684\u505a\u6cd5\u3002\u8bbe f_i f_i \u4e3a i i \u4e2a\u70b9\u7684\u6709\u6807\u53f7\u65e0\u5411\u8fde\u901a\u56fe\u7684\u4e2a\u6570\uff0c g_i g_i \u4e3a i i \u4e2a\u70b9\u7684\u6709\u6807\u53f7\u65e0\u5411\u56fe\u7684\u4e2a\u6570\uff0c\u5219\u6709 g_n=\\sum\\binom{n-1}{i-1}f_ig_{n-i} g_n=\\sum\\binom{n-1}{i-1}f_ig_{n-i} \u4e4b\u6240\u4ee5\u4e0d\u662f \\binom{n}{i} \\binom{n}{i} \u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u7528 f_i f_i \u679a\u4e3e\u548c 1 1 \u53f7\u70b9\u8fde\u901a\u7684\u5b50\u56fe\uff0c 1 1 \u53f7\u70b9\u4e0d\u53c2\u4e0e\u7f16\u53f7\u7684\u6253\u4e71\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u9879\u5f0f\u6c42\u9006\u89e3\u51fa f_i f_i \u3002\u5f53\u7136\u4e5f\u6709\u66f4\u6e05\u771f\u7684\u505a\u6cd5\uff1a G(z)=\\exp F(z) G(z)=\\exp F(z) \u3002 \u56de\u5230\u672c\u9898\u3002 \u6211\u4eec\u53d1\u73b0\u4ec5\u4ec5\u8bb0\u5f55\u548c 1 1 \u8fde\u901a\u7684\u7a74\u4f4d\u7684\u4e2a\u6570\uff0c\u4fe1\u606f\u662f\u4e0d\u8db3\u7684\u3002\u4f46\u53d1\u73b0 \\prod(n+1) \\prod(n+1) \u7684\u8303\u56f4\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u548c 1 1 \u8fde\u901a\u7684\u7a74\u4f4d\u72b6\u6001\u538b\u7f29\u4e3a\u4e00\u4e2a (n_1, n_2, \\ldots, n_k) (n_1, n_2, \\ldots, n_k) \u8fdb\u5236\u6570\u3002\u8bbe\u6709 a_i a_i \u4e2a i i \u7ef4\u7a74\u4f4d\u4e0e 1 1 \u8fde\u901a (\u4e0d\u5305\u62ec 1 1 \u672c\u8eab)\uff0c\u5219\u53ef\u4ee5\u5c06\u72b6\u6001\u8868\u793a\u4e3a S=a_1+(n_1+1)a_2+(n_1+1)(n_2+1)a_3+\\ldots+(n_1+1)(n_2+1)\\ldots(n_{k-1}+1)a_k S=a_1+(n_1+1)a_2+(n_1+1)(n_2+1)a_3+\\ldots+(n_1+1)(n_2+1)\\ldots(n_{k-1}+1)a_k \u5e76\u4e14\u6211\u4eec\u53d1\u73b0\uff0c\u4e24\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u6570\u7684\u548c\uff0c\u6070\u597d\u5c31\u662f\u4e24\u4e2a\u72b6\u6001\u7684\u5e76\u5bf9\u5e94\u7684\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u7167\u642c\u666e\u901a\u56fe\u7684\u505a\u6cd5\uff1b\u4f46\u5377\u79ef\u65f6\u6211\u4eec\u5fc5\u987b\u53bb\u6389\u8fdb\u4f4d\u7684\u5f71\u54cd\u3002\u8bbe\u5360\u4f4d\u51fd\u6570 \\chi(S)=\\sum\\limits_{i=1}^{k-1} \\dfrac{S}{\\prod\\limits_{j=1}^i(n_j+1)} \\chi(S)=\\sum\\limits_{i=1}^{k-1} \\dfrac{S}{\\prod\\limits_{j=1}^i(n_j+1)} \uff0c\u5219 \\chi(A+B)=\\chi(A)+\\chi(B) \\chi(A+B)=\\chi(A)+\\chi(B) \u5f53\u4e14\u4ec5\u5f53 A+B A+B \u4e0d\u8fdb\u4f4d\u3002 \u6211\u4eec\u8bbe\u4e8c\u5143\u591a\u9879\u5f0f F(x, z)=f_ix^iz^{\\chi(i)} F(x, z)=f_ix^iz^{\\chi(i)} \uff0c\u5219\u6211\u4eec\u9700\u8981\u7684\u4e0d\u8fdb\u4f4d\u5377\u79ef\u6ee1\u8db3 (F\\ast G)(x, z)=\\sum[z^{\\chi(i)}]f_jg_{i-j}x^iz^{\\chi(i)+\\chi(i-j)} (F\\ast G)(x, z)=\\sum[z^{\\chi(i)}]f_jg_{i-j}x^iz^{\\chi(i)+\\chi(i-j)} \u3002\u8fd9\u91cc [z^i] [z^i] \u8868\u793a\u53d6\u591a\u9879\u5f0f\u7684 z^i z^i \u9879\u3002 \u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3 \\chi(i+j)-\\chi(i)+\\chi(j) \\chi(i+j)-\\chi(i)+\\chi(j) \u662f\u5426\u4e3a 0 0 \uff0c\u4e0d\u5173\u5fc3\u5b83\u7684\u5177\u4f53\u503c\uff0c\u800c \\chi(i+j)-\\chi(i)+\\chi(j)\\in[0, k) \\chi(i+j)-\\chi(i)+\\chi(j)\\in[0, k) (\u6bcf\u90e8\u5206\u4f4d\u6700\u591a\u901a\u8fc7\u589e\u52a0 1 1 )\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97 \\bmod (z^{k}-1) \\bmod (z^{k}-1) \u610f\u4e49\u4e0b\u7684\u5377\u79ef\uff0c\u518d\u624b\u52a8\u53d6 z z \u7684\u5bf9\u5e94\u6b21\u6570\u5373\u53ef\u3002 \u4e00\u79cd\u6bd4\u8f83\u5408\u7406\u7684\u5b9e\u73b0\u662f\uff0c\u5bf9 i\\in[0,k) i\\in[0,k) \u6c42 [z^i]F(x, z) [z^i]F(x, z) \u548c [z^i]G(x, z) [z^i]G(x, z) DFT (\u4e5f\u5c31\u662f\u628a\u4e8c\u5143\u591a\u9879\u5f0f\u6309 z z \u7684\u6b21\u6570\u62c6\u5f00)\uff0c\u7136\u540e\u5728 z z \u8fd9\u4e00\u7ef4\u5ea6\u4e0a\u66b4\u529b\u5377\u79ef\uff0c\u5f97\u5230 [z^i](F*G)(x, z) [z^i](F*G)(x, z) \uff0c\u518d\u5408\u5e76\u56de\u53bb\u3002\u7531\u4e8e z z \u8fd9\u4e00\u7ef4\u7684\u7684\u6b21\u6570\u4e3a k-1 k-1 \uff0c F(x,z) F(x,z) \u53ea\u80fd\u62c6\u4e3a k k \u4e2a\u591a\u9879\u5f0f\u5206\u522b DFT\uff0c\u4ea7\u751f O(kn\\log n) O(kn\\log n) \u7684\u590d\u6742\u5ea6\uff1b\u5728 z z \u8fd9\u4e00\u7ef4\u5377\u79ef\u7684\u590d\u6742\u5ea6\u4e3a O(k^2n) O(k^2n) \uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a O(kn\\log n+k^2\\log n) O(kn\\log n+k^2\\log n) \u3002 \u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u79cd\u4f18\u79c0\u7684 k k \u7ef4\u591a\u9879\u5f0f\u5377\u79ef\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u79cd\u5377\u79ef\u62d3\u5c55\u6027\u5f88\u597d\uff0c\u53c2\u89c1 https://rushcheyo.blog.uoj.ac/blog/6547 \u3002","title":"\u89e3\u6790"},{"location":"problem/2021/march/uoj596/#_4","text":"#include <bits/stdc++.h> typedef long long int ll ; typedef std :: vector < int > poly ; const int maxn = 1 << 21 , maxk = 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int rev [ maxn ]; void make_rev ( int n ){ for ( int i = 0 ; i < n ; ++ i ) rev [ i ] = ( rev [ i >> 1 ] >> 1 ) | ( i & 1 ? n >> 1 : 0 ); } int ntt_len ; void dft ( int * f , int N , int b ){ static int w [ maxn ]; ntt_len += N ; for ( int i = 0 ; i < N ; ++ i ) if ( i < rev [ i ]) std :: swap ( f [ i ], f [ rev [ i ]]); for ( int i = 2 ; i <= N ; i <<= 1 ){ w [ 0 ] = 1 , w [ 1 ] = qpow ( 3 , ( mod - 1 ) / i ); if ( b == -1 ) w [ 1 ] = qpow ( w [ 1 ], mod - 2 ); for ( int j = 2 ; j < i / 2 ; ++ j ) w [ j ] = ( ll ) w [ j - 1 ] * w [ 1 ] % mod ; for ( int j = 0 ; j < N ; j += i ){ int * g = f + j , * h = f + j + i / 2 ; for ( int k = 0 ; k < i / 2 ; ++ k ){ int p = g [ k ], q = ( ll ) h [ k ] * w [ k ] % mod ; g [ k ] = ( p + q ) % mod , h [ k ] = ( p - q ) % mod ; } } } if ( b == -1 ){ for ( int i = 0 , inv = qpow ( N , mod - 2 ); i < N ; ++ i ) f [ i ] = ( ll ) f [ i ] * inv % mod ; } } int N = 1 , n [ maxk ], k , a [ maxk ][ maxk ]; int preproduct [ maxk ], chi [ maxn ]; int fact [ maxn ], ifact [ maxn ]; void init_fact ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; ifact [ n ] = qpow ( fact [ n ], mod - 2 ); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } int SETEDSZ ; poly operator * ( poly f , poly g ){ int sz = 1 ; if ( SETEDSZ ) sz = SETEDSZ ; else while ( sz < ( int ) f . size () + ( int ) g . size () - 1 ) sz <<= 1 ; make_rev ( sz ); static int zf [ maxk ][ maxn ], zg [ maxk ][ maxn ], res [ maxk ][ maxn ]; for ( int i = 0 ; i < k ; ++ i ){ std :: fill ( zf [ i ], zf [ i ] + sz , 0 ); std :: fill ( zg [ i ], zg [ i ] + sz , 0 ); std :: fill ( res [ i ], res [ i ] + sz , 0 ); } for ( int i = 0 ; i < ( int ) f . size (); ++ i ) zf [ chi [ i ]][ i ] = f [ i ]; for ( int i = 0 ; i < ( int ) g . size (); ++ i ) zg [ chi [ i ]][ i ] = g [ i ]; for ( int i = 0 ; i < k ; ++ i ) dft ( zf [ i ], sz , 1 ), dft ( zg [ i ], sz , 1 ); for ( int i = 0 ; i < k ; ++ i ) for ( int j = 0 ; j < k ; ++ j ){ int p = ( i + j ) % k ; for ( int q = 0 ; q < sz ; ++ q ) res [ p ][ q ] = ( res [ p ][ q ] + ( ll ) zf [ i ][ q ] * zg [ j ][ q ]) % mod ; } for ( int i = 0 ; i < k ; ++ i ) dft ( res [ i ], sz , -1 ); sz = std :: min < int > ( f . size () + g . size () - 1 , N ); poly ans ( sz ); for ( int i = 0 ; i < sz ; ++ i ) ans [ i ] = res [ chi [ i ]][ i ]; return ans ; } poly inv ( const poly & h ){ poly f ( 1 ), g ; f [ 0 ] = qpow ( h [ 0 ], mod - 2 ); for ( int w = 2 ; w / 2 < N ; w <<= 1 ){ g . resize ( w ); for ( int i = std :: min ( w , ( int ) h . size ()) - 1 ; i >= 0 ; -- i ) g [ i ] = h [ i ]; for ( int i = w - 1 ; i >= ( int ) h . size (); -- i ) g [ i ] = 0 ; static poly t ; t = f * g ; t . resize ( w ); t = t * f ; f . resize ( w ); for ( int i = 0 ; i < w ; ++ i ) f [ i ] = ( 2l l * f [ i ] - t [ i ]) % mod ; } f . resize ( h . size ()); return f ; } poly deriv ( const poly & f ){ poly g ( N ); for ( int i = 0 ; i < N ; ++ i ) g [ i ] = ( ll ) f [ i ] * i % mod ; return g ; } poly integ ( const poly & f ){ poly g ( N ); g [ 0 ] = 1 ; for ( int i = 0 ; i < N ; ++ i ) g [ i ] = ( ll ) f [ i ] * ifact [ i ] % mod * fact [ i - 1 ] % mod ; return g ; } poly G ; int main (){ std :: scanf ( \"%d\" , & k ); for ( int i = 1 ; i <= k ; ++ i ) std :: scanf ( \"%d\" , n + i ), N *= ( n [ i ] + 1 ); for ( int i = 1 ; i <= k ; ++ i ) for ( int j = 1 ; j <= k ; ++ j ) std :: scanf ( \"%d\" , & a [ i ][ j ]); init_fact ( N ); preproduct [ 0 ] = 1 ; for ( int i = 1 ; i <= k ; ++ i ) preproduct [ i ] = preproduct [ i - 1 ] * ( n [ i ] + 1 ); G . resize ( N ); for ( int s = 0 ; s < N ; ++ s ){ static int cnt [ maxn ]; for ( int i = 1 ; i <= k ; ++ i ) cnt [ i ] = s % preproduct [ i ] / preproduct [ i - 1 ]; for ( int i = 1 ; i < k ; ++ i ) chi [ s ] += s / preproduct [ i ]; chi [ s ] %= k , G [ s ] = 1 ; if ( s ){ for ( int i = 1 ; i <= k ; ++ i ) if ( cnt [ i ]){ G [ s ] = ( ll ) G [ s - preproduct [ i - 1 ]] * qpow ( a [ i ][ i ] + 1 , cnt [ i ] - 1 ) % mod ; G [ s ] = ( ll ) G [ s ] * ifact [ cnt [ i ]] % mod * fact [ cnt [ i ] - 1 ] % mod ; for ( int j = i + 1 ; j <= k ; ++ j ) G [ s ] = ( ll ) G [ s ] * qpow ( a [ i ][ j ] + 1 , cnt [ j ]) % mod ; break ; } } } G = inv ( G ) * deriv ( G ), G . resize ( N ), G = integ ( G ); int res = G [ N - 1 ]; for ( int i = 1 ; i <= k ; ++ i ) res = ( ll ) res * fact [ n [ i ]] % mod ; std :: printf ( \"%d \\n \" , ntt_len ); std :: printf ( \"%d \\n \" , ( res + mod ) % mod ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/2021/march/uoj596/#_5","text":"UOJ596 \u4e09\u7ef4\u7acb\u4f53\u6df7\u5143\u52b2","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc113/f/","text":"F - Social Distance \u00b6 \u9898\u610f \u00b6 \u9577\u3055 N+1 N+1 \u306e\u6574\u6570\u5217 X_0,X_1,\\ldots,X_N X_0,X_1,\\ldots,X_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u3001 0=X_0<X_1<\\ldots<X_N 0=X_0<X_1<\\ldots<X_N \u3067\u3059\u3002 \u3053\u308c\u304b\u3089\u3001 1 1 \u304b\u3089 N N \u307e\u3067\u306e\u756a\u53f7\u306e\u3064\u3044\u305f N N \u4eba\u306e\u4eba\u304c\u3001\u6570\u76f4\u7dda\u4e0a\u306b\u73fe\u308c\u307e\u3059\u3002\u4eba i i \u306f\u3001\u533a\u9593 [X_{i\u22121},X_i] [X_{i\u22121},X_i] \u306e\u4e2d\u304b\u3089\u4e00\u69d8\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u5b9f\u6570\u5ea7\u6a19\u306b\u51fa\u73fe\u3057\u307e\u3059\u3002 \u4eba\u3068\u4eba\u306e\u8ddd\u96e2\u306e\u6700\u5c0f\u5024\u306e\u671f\u5f85\u5024\u3092 \\bmod 998244353 \\bmod 998244353 \u3067\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u8003\u8651\u6c42\u51fa\u4eba\u4e0e\u4eba\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u4e92\u8865\u7d2f\u79ef\u5206\u5e03\u51fd\u6570 f(z) f(z) (\u5373 f(z) f(z) \u8868\u793a\u4eba\u4e0e\u4eba\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e z z \u7684\u6982\u7387)\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e3a \\displaystyle\\int_{0}^{+\\infty}f(z)\\text{d}z \\displaystyle\\int_{0}^{+\\infty}f(z)\\text{d}z \u3002 \u5148\u5c1d\u8bd5\u5bf9\u56fa\u5b9a\u7684 z z \u6c42\u51fa f(z) f(z) \u3002\u8bbe\u7b2c i i \u4e2a\u4eba\u7684\u4f4d\u7f6e\u4e3a x_i x_i \uff0c\u5219\u5bf9\u4e8e\u56fa\u5b9a\u7684 z z \uff0c\u6211\u4eec\u9700\u8981\u5bf9 i=1\\ldots n-1 i=1\\ldots n-1 \u6ee1\u8db3 x_i+z\\le x_{i+1} x_i+z\\le x_{i+1} \u3002\u8bbe y_i=x_i-iz y_i=x_i-iz \uff0c\u5219\u6211\u4eec\u7684\u8981\u6c42\u53ef\u4ee5\u6539\u5199\u4e3a y_1\\le y_2\\le\\ldots\\le y_n y_1\\le y_2\\le\\ldots\\le y_n \u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u5728 n n \u4e2a\u533a\u95f4\u5747\u5300\u968f\u673a\u5206\u5e03\u7684\u53d8\u91cf y_i\\in[X_{i-1}-iz,X_i-iz] y_i\\in[X_{i-1}-iz,X_i-iz] \u6ee1\u8db3 y_1\\le y_2\\le\\ldots\\le y_n y_1\\le y_2\\le\\ldots\\le y_n \u7684\u6982\u7387\u3002 \u8fd9\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212 (\u4e25\u683c\u6765\u8bb2\uff0c\u8fd9\u4e0d\u662f\u52a8\u6001\u89c4\u5212\uff0c\u800c\u662f\u9012\u63a8) \u5728 O(n^3) O(n^3) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u3002\u5c06\u6240\u6709\u533a\u95f4 [X_{i-1}-iz,X_i-iz] [X_{i-1}-iz,X_i-iz] \u7684\u5de6\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u7684\u7b2c i i \u4e2a\u7aef\u70b9\u8bb0\u505a v_i v_i \u3002\u8bbe dp_{i,j} dp_{i,j} \u8868\u793a [v_1,v_i] [v_1,v_i] \u8fd9\u6bb5\u533a\u95f4\u5185\u5206\u5e03\u4e86 y_1\\le y_2\\le\\ldots\\le y_j y_1\\le y_2\\le\\ldots\\le y_j \u7684\u6982\u7387\uff0c\u6211\u4eec\u5982\u4e0b\u8f6c\u79fb\uff1a \u82e5 \\forall p\\in[j+1,k],[v_{i-1},v_i]\\in[X_{p-1}-pz,X_p-pz] \\forall p\\in[j+1,k],[v_{i-1},v_i]\\in[X_{p-1}-pz,X_p-pz] \uff0c\u4f7f dp_{i,k}\\gets dp_{i,k}+dp_{i-1,j}\\dfrac{1}{(k-j+1)!}\\prod\\limits_{j<p\\le k}\\dfrac{v_i-v_{i-1}}{X_p-X_{p-1}} dp_{i,k}\\gets dp_{i,k}+dp_{i-1,j}\\dfrac{1}{(k-j+1)!}\\prod\\limits_{j<p\\le k}\\dfrac{v_i-v_{i-1}}{X_p-X_{p-1}} \u73b0\u5728\u8003\u8651\u53d8\u5316\u7684 z z \u3002\u7531\u4e8e\u6bcf\u4e2a v_i v_i \u90fd\u53ef\u89c6\u4f5c\u5173\u4e8e z z \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5728\u6240\u6709\u533a\u95f4\u7aef\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\u4e0d\u53d8\u65f6\uff0c\u89c2\u5bdf\u9012\u63a8\u5f62\u5f0f\uff0c\u53d1\u73b0 f(z) f(z) \u662f\u4e00\u4e2a\u5173\u4e8e z z \u7684\u4e0d\u8d85\u8fc7 n n \u6b21\u7684\u591a\u9879\u5f0f\u51fd\u6570\u3002\u6211\u4eec\u6c42\u51fa\u533a\u95f4\u5185 n+1 n+1 \u4e2a\u4e0d\u540c\u7684\u70b9\u63d2\u503c\u5f97\u5230 f(z) f(z) \u5728\u8be5\u533a\u95f4\u7684\u89e3\u6790\u5f0f\u540e\uff0c\u518d\u7528\u5fae\u79ef\u5206\u57fa\u672c\u5b9a\u7406\u6c42 f(z) f(z) \u5728\u8fd9\u6bb5\u533a\u95f4\u7684\u79ef\u5206\u5373\u53ef\u3002 \u7531\u4e8e\u6240\u6709\u533a\u95f4\u7684\u7aef\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\u53ea\u6709 O(n^2) O(n^2) \u79cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(n^6) O(n^6) \u65f6\u95f4\u89e3\u51b3\u672c\u9898\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 23 , mod = 998244353 ; ll gcd ( ll a , ll b ){ return b ? gcd ( b , a % b ) : a ; } int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } struct frac { ll x , y ; frac ( ll a = 0 ){ x = a , y = 1 ; } frac ( ll a , ll b ){ ll g = gcd ( a , b ); a /= g , b /= g ; if ( b < 0 ) x = - a , y = - b ; else x = a , y = b ; } void out ( void ){ std :: printf ( \"%lld/%lld\" , x , y ); } int val ( void ){ return ( x % mod ) * qpow ( y % mod , mod - 2 ) % mod ; } }; frac operator - ( const int & a , const frac & b ){ return frac ( a * b . y - b . x , b . y ); } frac operator + ( const frac & a , const frac & b ){ return frac ( a . x * b . y + b . x * a . y , a . y * b . y ); } frac operator * ( const frac & a , const int & b ){ return frac ( a . x * b , a . y ); } frac operator / ( const frac & a , const int & b ){ return frac ( a . x , a . y * b ); } bool operator == ( const frac & a , const frac & b ){ return a . x == b . x && a . y == b . y ; } bool operator != ( const frac & a , const frac & b ){ return a . x != b . x || a . y != b . y ; } bool operator < ( const frac & a , const frac & b ){ return a . x * b . y < b . x * a . y ; } int eval ( const std :: vector < int > & f , int z ){ int res = 0 , x = 1 ; for ( int i = 0 ; i < ( int ) f . size (); ++ i ) res = ( res + ( ll ) f [ i ] * x ) % mod , x = ( ll ) x * z % mod ; return res ; } int inv [ maxn ]; std :: vector < int > integral ( const std :: vector < int > & f ){ std :: vector < int > g ( f . size () + 1 ); for ( int i = f . size (); i ; -- i ) g [ i ] = ( ll ) f [ i - 1 ] * inv [ i ] % mod ; return g ; } std :: vector < int > operator + ( const std :: vector < int > & f , const std :: vector < int > & g ){ std :: vector < int > h ( f ); if ( g . size () > h . size ()) h . resize ( g . size ()); for ( int i = 0 ; i < ( int ) g . size (); ++ i ) h [ i ] = ( h [ i ] + g [ i ]) % mod ; return h ; } std :: vector < int > operator * ( const std :: vector < int > & f , const std :: vector < int > & g ){ std :: vector < int > h ( f . size () + g . size () - 1 ); for ( int i = 0 ; i < ( int ) f . size (); ++ i ) for ( int j = 0 ; j < ( int ) g . size (); ++ j ) h [ i + j ] = ( h [ i + j ] + ( ll ) f [ i ] * g [ j ]) % mod ; return h ; } std :: vector < int > operator * ( const std :: vector < int > & f , const int & b ){ std :: vector < int > h ( f ); for ( int i = 0 ; i < ( int ) h . size (); ++ i ) h [ i ] = ( ll ) h [ i ] * b % mod ; return h ; } int n , X [ maxn ], l [ maxn ], r [ maxn ]; std :: pair < int , bool > v [ maxn << 1 ]; void init ( const frac & z ){ for ( int i = 1 ; i <= n ; ++ i ){ v [ i * 2 - 1 ] = std :: make_pair ( i , false ); v [ i * 2 ] = std :: make_pair ( i , true ); } std :: sort ( v + 1 , v + 1 + n * 2 , [ & z ]( const std :: pair < int , bool > & a , const std :: pair < int , bool > & b ){ return X [ a . first + a . second - 1 ] - z * a . first != X [ b . first + b . second - 1 ] - z * b . first ? X [ a . first + a . second - 1 ] - z * a . first < X [ b . first + b . second - 1 ] - z * b . first : a . first > b . first ; }); for ( int i = 1 ; i <= n * 2 ; ++ i ) if ( v [ i ]. second ) r [ v [ i ]. first ] = i ; else l [ v [ i ]. first ] = i ; } frac next ( void ){ frac res = 1e6 ; for ( int i = 1 ; i < n * 2 ; ++ i ) if ( v [ i ]. first < v [ i + 1 ]. first && v [ i ]. first + v [ i ]. second != v [ i + 1 ]. first + v [ i + 1 ]. second ) res = std :: min ( res , frac ( X [ v [ i + 1 ]. first + v [ i + 1 ]. second - 1 ] - X [ v [ i ]. first + v [ i ]. second - 1 ], v [ i + 1 ]. first - v [ i ]. first )); return res ; } bool check ( void ){ int last = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( last < r [ i ]) last = std :: max ( last , l [ i ]); else return false ; return true ; } int leninv [ maxn ], dp [ maxn << 1 ][ maxn ], y [ maxn ]; int f ( int z ){ for ( int i = 1 ; i <= n * 2 ; ++ i ) y [ i ] = ( X [ v [ i ]. first + v [ i ]. second - 1 ] - ( ll ) z * v [ i ]. first ) % mod ; dp [ 1 ][ 0 ] = 1 ; for ( int i = 2 ; i <= n * 2 ; ++ i ) for ( int j = 0 ; j <= n ; ++ j ){ dp [ i ][ j ] = dp [ i - 1 ][ j ]; for ( int k = j , mul = 1 ; k >= 1 && l [ k ] <= i - 1 && r [ k ] >= i ; -- k ){ mul = ( ll ) mul * ( y [ i ] - y [ i - 1 ]) % mod * leninv [ k ] % mod * inv [ j - k + 1 ] % mod ; dp [ i ][ j ] = ( dp [ i ][ j ] + ( ll ) dp [ i - 1 ][ k - 1 ] * mul ) % mod ; } } return dp [ n * 2 ][ n ]; } int solve ( int a , int b ){ std :: vector < int > F ; for ( int i = 0 ; i <= n ; ++ i ){ std :: vector < int > G { 1 }; int mul = 1 ; for ( int j = 0 ; j <= n ; ++ j ) if ( i != j ) G = G * std :: vector < int > { - j , 1 }, mul = ( ll ) mul * ( i - j ) % mod ; mul = ( ll ) f ( i ) * qpow ( mul , mod - 2 ) % mod ; F = F + G * mul ; } F = integral ( F ); return ( eval ( F , b ) - eval ( F , a )) % mod ; } int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 0 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , X + i ); for ( int i = 1 ; i <= n + 1 ; ++ i ) leninv [ i ] = qpow ( X [ i ] - X [ i - 1 ], mod - 2 ), inv [ i ] = qpow ( i , mod - 2 ); frac l ( 0 ), r ; int ans = 0 ; while ( true ){ init ( l ), r = next (); if ( ! check ()) break ; ans = ( ans + solve ( l . val (), r . val ())) % mod ; l = r ; } std :: printf ( \"%d \\n \" , ( ans + mod ) % mod ); return 0 ; } \u6765\u6e90 \u00b6 AtCoder Regular Contest 113 F - Social Distance","title":"F - Social Distance"},{"location":"problem/atcoder/arc113/f/#f-social-distance","text":"","title":"F - Social Distance"},{"location":"problem/atcoder/arc113/f/#_1","text":"\u9577\u3055 N+1 N+1 \u306e\u6574\u6570\u5217 X_0,X_1,\\ldots,X_N X_0,X_1,\\ldots,X_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u3001 0=X_0<X_1<\\ldots<X_N 0=X_0<X_1<\\ldots<X_N \u3067\u3059\u3002 \u3053\u308c\u304b\u3089\u3001 1 1 \u304b\u3089 N N \u307e\u3067\u306e\u756a\u53f7\u306e\u3064\u3044\u305f N N \u4eba\u306e\u4eba\u304c\u3001\u6570\u76f4\u7dda\u4e0a\u306b\u73fe\u308c\u307e\u3059\u3002\u4eba i i \u306f\u3001\u533a\u9593 [X_{i\u22121},X_i] [X_{i\u22121},X_i] \u306e\u4e2d\u304b\u3089\u4e00\u69d8\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u5b9f\u6570\u5ea7\u6a19\u306b\u51fa\u73fe\u3057\u307e\u3059\u3002 \u4eba\u3068\u4eba\u306e\u8ddd\u96e2\u306e\u6700\u5c0f\u5024\u306e\u671f\u5f85\u5024\u3092 \\bmod 998244353 \\bmod 998244353 \u3067\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc113/f/#_2","text":"\u8003\u8651\u6c42\u51fa\u4eba\u4e0e\u4eba\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u7684\u4e92\u8865\u7d2f\u79ef\u5206\u5e03\u51fd\u6570 f(z) f(z) (\u5373 f(z) f(z) \u8868\u793a\u4eba\u4e0e\u4eba\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e z z \u7684\u6982\u7387)\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e3a \\displaystyle\\int_{0}^{+\\infty}f(z)\\text{d}z \\displaystyle\\int_{0}^{+\\infty}f(z)\\text{d}z \u3002 \u5148\u5c1d\u8bd5\u5bf9\u56fa\u5b9a\u7684 z z \u6c42\u51fa f(z) f(z) \u3002\u8bbe\u7b2c i i \u4e2a\u4eba\u7684\u4f4d\u7f6e\u4e3a x_i x_i \uff0c\u5219\u5bf9\u4e8e\u56fa\u5b9a\u7684 z z \uff0c\u6211\u4eec\u9700\u8981\u5bf9 i=1\\ldots n-1 i=1\\ldots n-1 \u6ee1\u8db3 x_i+z\\le x_{i+1} x_i+z\\le x_{i+1} \u3002\u8bbe y_i=x_i-iz y_i=x_i-iz \uff0c\u5219\u6211\u4eec\u7684\u8981\u6c42\u53ef\u4ee5\u6539\u5199\u4e3a y_1\\le y_2\\le\\ldots\\le y_n y_1\\le y_2\\le\\ldots\\le y_n \u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u5728 n n \u4e2a\u533a\u95f4\u5747\u5300\u968f\u673a\u5206\u5e03\u7684\u53d8\u91cf y_i\\in[X_{i-1}-iz,X_i-iz] y_i\\in[X_{i-1}-iz,X_i-iz] \u6ee1\u8db3 y_1\\le y_2\\le\\ldots\\le y_n y_1\\le y_2\\le\\ldots\\le y_n \u7684\u6982\u7387\u3002 \u8fd9\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212 (\u4e25\u683c\u6765\u8bb2\uff0c\u8fd9\u4e0d\u662f\u52a8\u6001\u89c4\u5212\uff0c\u800c\u662f\u9012\u63a8) \u5728 O(n^3) O(n^3) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u3002\u5c06\u6240\u6709\u533a\u95f4 [X_{i-1}-iz,X_i-iz] [X_{i-1}-iz,X_i-iz] \u7684\u5de6\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u7684\u7b2c i i \u4e2a\u7aef\u70b9\u8bb0\u505a v_i v_i \u3002\u8bbe dp_{i,j} dp_{i,j} \u8868\u793a [v_1,v_i] [v_1,v_i] \u8fd9\u6bb5\u533a\u95f4\u5185\u5206\u5e03\u4e86 y_1\\le y_2\\le\\ldots\\le y_j y_1\\le y_2\\le\\ldots\\le y_j \u7684\u6982\u7387\uff0c\u6211\u4eec\u5982\u4e0b\u8f6c\u79fb\uff1a \u82e5 \\forall p\\in[j+1,k],[v_{i-1},v_i]\\in[X_{p-1}-pz,X_p-pz] \\forall p\\in[j+1,k],[v_{i-1},v_i]\\in[X_{p-1}-pz,X_p-pz] \uff0c\u4f7f dp_{i,k}\\gets dp_{i,k}+dp_{i-1,j}\\dfrac{1}{(k-j+1)!}\\prod\\limits_{j<p\\le k}\\dfrac{v_i-v_{i-1}}{X_p-X_{p-1}} dp_{i,k}\\gets dp_{i,k}+dp_{i-1,j}\\dfrac{1}{(k-j+1)!}\\prod\\limits_{j<p\\le k}\\dfrac{v_i-v_{i-1}}{X_p-X_{p-1}} \u73b0\u5728\u8003\u8651\u53d8\u5316\u7684 z z \u3002\u7531\u4e8e\u6bcf\u4e2a v_i v_i \u90fd\u53ef\u89c6\u4f5c\u5173\u4e8e z z \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5728\u6240\u6709\u533a\u95f4\u7aef\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\u4e0d\u53d8\u65f6\uff0c\u89c2\u5bdf\u9012\u63a8\u5f62\u5f0f\uff0c\u53d1\u73b0 f(z) f(z) \u662f\u4e00\u4e2a\u5173\u4e8e z z \u7684\u4e0d\u8d85\u8fc7 n n \u6b21\u7684\u591a\u9879\u5f0f\u51fd\u6570\u3002\u6211\u4eec\u6c42\u51fa\u533a\u95f4\u5185 n+1 n+1 \u4e2a\u4e0d\u540c\u7684\u70b9\u63d2\u503c\u5f97\u5230 f(z) f(z) \u5728\u8be5\u533a\u95f4\u7684\u89e3\u6790\u5f0f\u540e\uff0c\u518d\u7528\u5fae\u79ef\u5206\u57fa\u672c\u5b9a\u7406\u6c42 f(z) f(z) \u5728\u8fd9\u6bb5\u533a\u95f4\u7684\u79ef\u5206\u5373\u53ef\u3002 \u7531\u4e8e\u6240\u6709\u533a\u95f4\u7684\u7aef\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\u53ea\u6709 O(n^2) O(n^2) \u79cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 O(n^6) O(n^6) \u65f6\u95f4\u89e3\u51b3\u672c\u9898\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc113/f/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 23 , mod = 998244353 ; ll gcd ( ll a , ll b ){ return b ? gcd ( b , a % b ) : a ; } int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } struct frac { ll x , y ; frac ( ll a = 0 ){ x = a , y = 1 ; } frac ( ll a , ll b ){ ll g = gcd ( a , b ); a /= g , b /= g ; if ( b < 0 ) x = - a , y = - b ; else x = a , y = b ; } void out ( void ){ std :: printf ( \"%lld/%lld\" , x , y ); } int val ( void ){ return ( x % mod ) * qpow ( y % mod , mod - 2 ) % mod ; } }; frac operator - ( const int & a , const frac & b ){ return frac ( a * b . y - b . x , b . y ); } frac operator + ( const frac & a , const frac & b ){ return frac ( a . x * b . y + b . x * a . y , a . y * b . y ); } frac operator * ( const frac & a , const int & b ){ return frac ( a . x * b , a . y ); } frac operator / ( const frac & a , const int & b ){ return frac ( a . x , a . y * b ); } bool operator == ( const frac & a , const frac & b ){ return a . x == b . x && a . y == b . y ; } bool operator != ( const frac & a , const frac & b ){ return a . x != b . x || a . y != b . y ; } bool operator < ( const frac & a , const frac & b ){ return a . x * b . y < b . x * a . y ; } int eval ( const std :: vector < int > & f , int z ){ int res = 0 , x = 1 ; for ( int i = 0 ; i < ( int ) f . size (); ++ i ) res = ( res + ( ll ) f [ i ] * x ) % mod , x = ( ll ) x * z % mod ; return res ; } int inv [ maxn ]; std :: vector < int > integral ( const std :: vector < int > & f ){ std :: vector < int > g ( f . size () + 1 ); for ( int i = f . size (); i ; -- i ) g [ i ] = ( ll ) f [ i - 1 ] * inv [ i ] % mod ; return g ; } std :: vector < int > operator + ( const std :: vector < int > & f , const std :: vector < int > & g ){ std :: vector < int > h ( f ); if ( g . size () > h . size ()) h . resize ( g . size ()); for ( int i = 0 ; i < ( int ) g . size (); ++ i ) h [ i ] = ( h [ i ] + g [ i ]) % mod ; return h ; } std :: vector < int > operator * ( const std :: vector < int > & f , const std :: vector < int > & g ){ std :: vector < int > h ( f . size () + g . size () - 1 ); for ( int i = 0 ; i < ( int ) f . size (); ++ i ) for ( int j = 0 ; j < ( int ) g . size (); ++ j ) h [ i + j ] = ( h [ i + j ] + ( ll ) f [ i ] * g [ j ]) % mod ; return h ; } std :: vector < int > operator * ( const std :: vector < int > & f , const int & b ){ std :: vector < int > h ( f ); for ( int i = 0 ; i < ( int ) h . size (); ++ i ) h [ i ] = ( ll ) h [ i ] * b % mod ; return h ; } int n , X [ maxn ], l [ maxn ], r [ maxn ]; std :: pair < int , bool > v [ maxn << 1 ]; void init ( const frac & z ){ for ( int i = 1 ; i <= n ; ++ i ){ v [ i * 2 - 1 ] = std :: make_pair ( i , false ); v [ i * 2 ] = std :: make_pair ( i , true ); } std :: sort ( v + 1 , v + 1 + n * 2 , [ & z ]( const std :: pair < int , bool > & a , const std :: pair < int , bool > & b ){ return X [ a . first + a . second - 1 ] - z * a . first != X [ b . first + b . second - 1 ] - z * b . first ? X [ a . first + a . second - 1 ] - z * a . first < X [ b . first + b . second - 1 ] - z * b . first : a . first > b . first ; }); for ( int i = 1 ; i <= n * 2 ; ++ i ) if ( v [ i ]. second ) r [ v [ i ]. first ] = i ; else l [ v [ i ]. first ] = i ; } frac next ( void ){ frac res = 1e6 ; for ( int i = 1 ; i < n * 2 ; ++ i ) if ( v [ i ]. first < v [ i + 1 ]. first && v [ i ]. first + v [ i ]. second != v [ i + 1 ]. first + v [ i + 1 ]. second ) res = std :: min ( res , frac ( X [ v [ i + 1 ]. first + v [ i + 1 ]. second - 1 ] - X [ v [ i ]. first + v [ i ]. second - 1 ], v [ i + 1 ]. first - v [ i ]. first )); return res ; } bool check ( void ){ int last = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( last < r [ i ]) last = std :: max ( last , l [ i ]); else return false ; return true ; } int leninv [ maxn ], dp [ maxn << 1 ][ maxn ], y [ maxn ]; int f ( int z ){ for ( int i = 1 ; i <= n * 2 ; ++ i ) y [ i ] = ( X [ v [ i ]. first + v [ i ]. second - 1 ] - ( ll ) z * v [ i ]. first ) % mod ; dp [ 1 ][ 0 ] = 1 ; for ( int i = 2 ; i <= n * 2 ; ++ i ) for ( int j = 0 ; j <= n ; ++ j ){ dp [ i ][ j ] = dp [ i - 1 ][ j ]; for ( int k = j , mul = 1 ; k >= 1 && l [ k ] <= i - 1 && r [ k ] >= i ; -- k ){ mul = ( ll ) mul * ( y [ i ] - y [ i - 1 ]) % mod * leninv [ k ] % mod * inv [ j - k + 1 ] % mod ; dp [ i ][ j ] = ( dp [ i ][ j ] + ( ll ) dp [ i - 1 ][ k - 1 ] * mul ) % mod ; } } return dp [ n * 2 ][ n ]; } int solve ( int a , int b ){ std :: vector < int > F ; for ( int i = 0 ; i <= n ; ++ i ){ std :: vector < int > G { 1 }; int mul = 1 ; for ( int j = 0 ; j <= n ; ++ j ) if ( i != j ) G = G * std :: vector < int > { - j , 1 }, mul = ( ll ) mul * ( i - j ) % mod ; mul = ( ll ) f ( i ) * qpow ( mul , mod - 2 ) % mod ; F = F + G * mul ; } F = integral ( F ); return ( eval ( F , b ) - eval ( F , a )) % mod ; } int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 0 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , X + i ); for ( int i = 1 ; i <= n + 1 ; ++ i ) leninv [ i ] = qpow ( X [ i ] - X [ i - 1 ], mod - 2 ), inv [ i ] = qpow ( i , mod - 2 ); frac l ( 0 ), r ; int ans = 0 ; while ( true ){ init ( l ), r = next (); if ( ! check ()) break ; ans = ( ans + solve ( l . val (), r . val ())) % mod ; l = r ; } std :: printf ( \"%d \\n \" , ( ans + mod ) % mod ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc113/f/#_4","text":"AtCoder Regular Contest 113 F - Social Distance","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc114/a/","text":"A - Not coprime \u00b6 \u9898\u610f \u00b6 N N \u500b\u306e 2 2 \u4ee5\u4e0a 50 50 \u4ee5\u4e0b\u306e\u6574\u6570 X_1,X_2,\\ldots,X_N X_1,X_2,\\ldots,X_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u5168\u3066\u306e i=1,2,\\ldots,N i=1,2,\\ldots,N \u306b\u3064\u3044\u3066\u6b21\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u6b63\u306e\u6574\u6570 Y Y \u306e\u3046\u3061\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 X_i X_i \u3068 Y Y \u306f\u4e92\u3044\u306b\u7d20\u3067\u306a\u3044 \u89e3\u6790 \u00b6 \u89c2\u5bdf\u5230 50 50 \u4ee5\u5185\u7684\u7d20\u6570\u5f88\u5c11\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e Y Y \u5305\u542b\u7684\u7d20\u56e0\u6570\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 52 ; unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ){ return b ? gcd ( b , a % b ) : a ; } bool vist [ maxn ]; int prime [ maxn ], cnt ; int main (){ for ( int i = 2 ; i <= 50 ; ++ i ){ if ( ! vist [ i ]) prime [ ++ cnt ] = i ; for ( int j = 1 ; j <= cnt && i * prime [ j ] <= 50 ; ++ j ){ vist [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) break ; } } static int x [ maxn ], n ; std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , x + i ); unsigned long long int ans = 0ull - 1ull ; for ( int i = 0 ; i < ( 1 << cnt ); ++ i ){ unsigned long long int res = 1ull ; for ( int j = 0 ; j < cnt ; ++ j ) if ( i & ( 1 << j )) res *= prime [ j + 1 ]; bool flag = true ; for ( int j = 1 ; j <= n ; ++ j ) if ( gcd ( x [ j ], res ) == 1 ){ flag = false ; break ; } if ( ! flag ) continue ; ans = std :: min ( ans , res ); } std :: printf ( \"%llu \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 AtCoder Regular Contest 114 A - Not coprime","title":"A - Not coprime"},{"location":"problem/atcoder/arc114/a/#a-not-coprime","text":"","title":"A - Not coprime"},{"location":"problem/atcoder/arc114/a/#_1","text":"N N \u500b\u306e 2 2 \u4ee5\u4e0a 50 50 \u4ee5\u4e0b\u306e\u6574\u6570 X_1,X_2,\\ldots,X_N X_1,X_2,\\ldots,X_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u5168\u3066\u306e i=1,2,\\ldots,N i=1,2,\\ldots,N \u306b\u3064\u3044\u3066\u6b21\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u6b63\u306e\u6574\u6570 Y Y \u306e\u3046\u3061\u3001\u6700\u5c0f\u306e\u3082\u306e\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 X_i X_i \u3068 Y Y \u306f\u4e92\u3044\u306b\u7d20\u3067\u306a\u3044","title":"\u9898\u610f"},{"location":"problem/atcoder/arc114/a/#_2","text":"\u89c2\u5bdf\u5230 50 50 \u4ee5\u5185\u7684\u7d20\u6570\u5f88\u5c11\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e Y Y \u5305\u542b\u7684\u7d20\u56e0\u6570\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc114/a/#_3","text":"#include <bits/stdc++.h> const int maxn = 52 ; unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ){ return b ? gcd ( b , a % b ) : a ; } bool vist [ maxn ]; int prime [ maxn ], cnt ; int main (){ for ( int i = 2 ; i <= 50 ; ++ i ){ if ( ! vist [ i ]) prime [ ++ cnt ] = i ; for ( int j = 1 ; j <= cnt && i * prime [ j ] <= 50 ; ++ j ){ vist [ i * prime [ j ]] = true ; if ( i % prime [ j ] == 0 ) break ; } } static int x [ maxn ], n ; std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , x + i ); unsigned long long int ans = 0ull - 1ull ; for ( int i = 0 ; i < ( 1 << cnt ); ++ i ){ unsigned long long int res = 1ull ; for ( int j = 0 ; j < cnt ; ++ j ) if ( i & ( 1 << j )) res *= prime [ j + 1 ]; bool flag = true ; for ( int j = 1 ; j <= n ; ++ j ) if ( gcd ( x [ j ], res ) == 1 ){ flag = false ; break ; } if ( ! flag ) continue ; ans = std :: min ( ans , res ); } std :: printf ( \"%llu \\n \" , ans ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc114/a/#_4","text":"AtCoder Regular Contest 114 A - Not coprime","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc114/b/","text":"B - Special Subsets \u00b6 \u9898\u610f \u00b6 1 1 \u4ee5\u4e0a N N \u4ee5\u4e0b\u306e\u6574\u6570\u3059\u3079\u3066\u304b\u3089\u6210\u308b\u96c6\u5408\u3092 S S \u3068\u3057\u307e\u3059\u3002 f f \u306f S S \u304b\u3089 S S \u3078\u306e\u95a2\u6570\u3067\u3042\u308a\u3001 f(1),f(2),\\ldots,f(N) f(1),f(2),\\ldots,f(N) \u306e\u5024\u304c f_1,f_2,\\ldots,f_N f_1,f_2,\\ldots,f_N \u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 S S \u306e\u7a7a\u3067\u306a\u3044\u90e8\u5206\u96c6\u5408 T T \u3067\u3042\u3063\u3066\u3001\u6b21\u306e\u4e21\u65b9\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u500b\u6570\u3092 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u5168\u3066\u306e a\\in T a\\in T \u306b\u3064\u3044\u3066 f(a)\\in T f(a)\\in T \u3067\u3042\u308b\u3002 \u5168\u3066\u306e a,b\\in T a,b\\in T \u306b\u3064\u3044\u3066 a\\neq b a\\neq b \u306a\u3089\u3070 f(a)\\neq f(b) f(a)\\neq f(b) \u3067\u3042\u308b\u3002 \u89e3\u6790 \u00b6 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a f(i)=f_i f(i)=f_i \uff0c\u6211\u4eec\u90fd\u8fde\u4e00\u6761\u6709\u5411\u8fb9 (i,f_i) (i,f_i) \u3002\u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\u6761\u4ef6\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a \u82e5 i\\in T i\\in T \uff0c\u5219\u6240\u6709\u80fd\u591f\u901a\u8fc7 i i \u5230\u8fbe\u7684\u70b9\u4e5f\u5c5e\u4e8e T T \u6240\u6709\u70b9\u5165\u5ea6\u5c0f\u4e8e 2 2 \u56e0\u4e3a\u6bcf\u4e2a\u70b9\u90fd\u6070\u597d\u6709\u4e00\u6761\u51fa\u8fb9\uff0c\u4e14\u8be5\u8fb9\u8fde\u5411\u7684\u70b9\u4e5f\u5c5e\u4e8e T T \uff0c\u6545 T T \u7684\u8bf1\u5bfc\u5b50\u56fe\u6070\u597d\u542b\u6709 |T| |T| \u6761\u8fb9\u3002\u7531\u4e8e T T \u4e2d\u6240\u6709\u70b9\u5165\u5ea6\u4e4b\u548c\u7b49\u4e8e |T| |T| \uff0c\u4e14\u6240\u6709\u70b9\u5165\u5ea6\u5c0f\u4e8e 2 2 \uff0c\u7531\u72c4\u5229\u514b\u96f7\u539f\u7406\u53ef\u77e5\u6240\u6709\u70b9\u7684\u5165\u5ea6\u90fd\u6070\u4e3a 1 1 \u3002\u6545\u4efb\u4f55\u5408\u6cd5\u7684 T T \u90fd\u662f\u82e5\u5e72\u4e2a\u73af\u4e0a\u6240\u6709\u70b9\u7684\u96c6\u5408\u3002 \u7531\u4e8e\u539f\u56fe\u4e2d\u6bcf\u4e2a\u5f31\u8fde\u901a\u5206\u91cf\u7684\u8fb9\u6570\u4e0e\u70b9\u6570\u76f8\u7b49\uff0c\u6545\u539f\u56fe\u7684\u6bcf\u4e2a\u5f31\u8fde\u901a\u5206\u91cf\u90fd\u662f\u4e00\u4e2a\u57fa\u73af\u6811\uff0c\u5305\u542b\u4e14\u4ec5\u5305\u542b\u4e00\u4e2a\u73af\u3002\u56e0\u6b64\u73af\u7684\u6570\u76ee\u7b49\u4e8e\u5f31\u8fde\u901a\u5206\u91cf\u7684\u6570\u76ee\uff0c\u7528\u5e76\u67e5\u96c6\u5904\u7406\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 2e5 + 19 , mod = 998244353 ; int fa [ maxn ]; int find ( int node ){ return fa [ node ] == node ? node : fa [ node ] = find ( fa [ node ]); } int n , ans ; int main (){ std :: scanf ( \"%d\" , & n ), std :: iota ( fa + 1 , fa + 1 + n , 1 ); for ( int i = 1 , f ; i <= n ; ++ i ){ std :: scanf ( \"%d\" , & f ); if ( find ( f ) != find ( i )) fa [ find ( f )] = find ( i ); } ans = 1 ; for ( int i = 1 ; i <= n ; ++ i ) if ( find ( i ) == i ) ans = ( ans + ans ) % mod ; ans = ( ans + mod - 1 ) % mod ; std :: printf ( \"%d \\n \" , ans ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 114 B - Special Subsets","title":"B - Special Subsets"},{"location":"problem/atcoder/arc114/b/#b-special-subsets","text":"","title":"B - Special Subsets"},{"location":"problem/atcoder/arc114/b/#_1","text":"1 1 \u4ee5\u4e0a N N \u4ee5\u4e0b\u306e\u6574\u6570\u3059\u3079\u3066\u304b\u3089\u6210\u308b\u96c6\u5408\u3092 S S \u3068\u3057\u307e\u3059\u3002 f f \u306f S S \u304b\u3089 S S \u3078\u306e\u95a2\u6570\u3067\u3042\u308a\u3001 f(1),f(2),\\ldots,f(N) f(1),f(2),\\ldots,f(N) \u306e\u5024\u304c f_1,f_2,\\ldots,f_N f_1,f_2,\\ldots,f_N \u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 S S \u306e\u7a7a\u3067\u306a\u3044\u90e8\u5206\u96c6\u5408 T T \u3067\u3042\u3063\u3066\u3001\u6b21\u306e\u4e21\u65b9\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u500b\u6570\u3092 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u5168\u3066\u306e a\\in T a\\in T \u306b\u3064\u3044\u3066 f(a)\\in T f(a)\\in T \u3067\u3042\u308b\u3002 \u5168\u3066\u306e a,b\\in T a,b\\in T \u306b\u3064\u3044\u3066 a\\neq b a\\neq b \u306a\u3089\u3070 f(a)\\neq f(b) f(a)\\neq f(b) \u3067\u3042\u308b\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc114/b/#_2","text":"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a f(i)=f_i f(i)=f_i \uff0c\u6211\u4eec\u90fd\u8fde\u4e00\u6761\u6709\u5411\u8fb9 (i,f_i) (i,f_i) \u3002\u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\u6761\u4ef6\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a \u82e5 i\\in T i\\in T \uff0c\u5219\u6240\u6709\u80fd\u591f\u901a\u8fc7 i i \u5230\u8fbe\u7684\u70b9\u4e5f\u5c5e\u4e8e T T \u6240\u6709\u70b9\u5165\u5ea6\u5c0f\u4e8e 2 2 \u56e0\u4e3a\u6bcf\u4e2a\u70b9\u90fd\u6070\u597d\u6709\u4e00\u6761\u51fa\u8fb9\uff0c\u4e14\u8be5\u8fb9\u8fde\u5411\u7684\u70b9\u4e5f\u5c5e\u4e8e T T \uff0c\u6545 T T \u7684\u8bf1\u5bfc\u5b50\u56fe\u6070\u597d\u542b\u6709 |T| |T| \u6761\u8fb9\u3002\u7531\u4e8e T T \u4e2d\u6240\u6709\u70b9\u5165\u5ea6\u4e4b\u548c\u7b49\u4e8e |T| |T| \uff0c\u4e14\u6240\u6709\u70b9\u5165\u5ea6\u5c0f\u4e8e 2 2 \uff0c\u7531\u72c4\u5229\u514b\u96f7\u539f\u7406\u53ef\u77e5\u6240\u6709\u70b9\u7684\u5165\u5ea6\u90fd\u6070\u4e3a 1 1 \u3002\u6545\u4efb\u4f55\u5408\u6cd5\u7684 T T \u90fd\u662f\u82e5\u5e72\u4e2a\u73af\u4e0a\u6240\u6709\u70b9\u7684\u96c6\u5408\u3002 \u7531\u4e8e\u539f\u56fe\u4e2d\u6bcf\u4e2a\u5f31\u8fde\u901a\u5206\u91cf\u7684\u8fb9\u6570\u4e0e\u70b9\u6570\u76f8\u7b49\uff0c\u6545\u539f\u56fe\u7684\u6bcf\u4e2a\u5f31\u8fde\u901a\u5206\u91cf\u90fd\u662f\u4e00\u4e2a\u57fa\u73af\u6811\uff0c\u5305\u542b\u4e14\u4ec5\u5305\u542b\u4e00\u4e2a\u73af\u3002\u56e0\u6b64\u73af\u7684\u6570\u76ee\u7b49\u4e8e\u5f31\u8fde\u901a\u5206\u91cf\u7684\u6570\u76ee\uff0c\u7528\u5e76\u67e5\u96c6\u5904\u7406\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc114/b/#_3","text":"#include <bits/stdc++.h> const int maxn = 2e5 + 19 , mod = 998244353 ; int fa [ maxn ]; int find ( int node ){ return fa [ node ] == node ? node : fa [ node ] = find ( fa [ node ]); } int n , ans ; int main (){ std :: scanf ( \"%d\" , & n ), std :: iota ( fa + 1 , fa + 1 + n , 1 ); for ( int i = 1 , f ; i <= n ; ++ i ){ std :: scanf ( \"%d\" , & f ); if ( find ( f ) != find ( i )) fa [ find ( f )] = find ( i ); } ans = 1 ; for ( int i = 1 ; i <= n ; ++ i ) if ( find ( i ) == i ) ans = ( ans + ans ) % mod ; ans = ( ans + mod - 1 ) % mod ; std :: printf ( \"%d \\n \" , ans ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc114/b/#_4","text":"AtCoder Regular Contest 114 B - Special Subsets","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc114/c/","text":"C - Sequence Scores \u00b6 \u9898\u610f \u00b6 1 1 \u4ee5\u4e0a M M \u4ee5\u4e0b\u306e\u6574\u6570\u304b\u3089\u6210\u308b\u9577\u3055 N N \u306e\u6570\u5217 A A \u306b\u5bfe\u3057\u3066\u3001 f(A) f(A) \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u9577\u3055 N N \u306e\u6570\u5217 X X \u304c\u3042\u308a\u3001\u521d\u3081\u5168\u3066\u306e\u8981\u7d20\u306f 0 0 \u3067\u3042\u308b\u3002 f(A) f(A) \u3092\u3001\u6b21\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u3066 X X \u3092 A A \u306b\u7b49\u3057\u304f\u3059\u308b\u305f\u3081\u306e\u6700\u5c0f\u306e\u64cd\u4f5c\u56de\u6570\u3068\u3059\u308b\u3002 1\\le l\\le r\\le N 1\\le l\\le r\\le N \u3068 1\\le v\\le M 1\\le v\\le M \u3092\u6307\u5b9a\u3059\u308b\u3002 l\\le i\\le r l\\le i\\le r \u306b\u5bfe\u3057\u3066 X_i X_i \u3092 \\max(X_i,v) \\max(X_i,v) \u3067\u7f6e\u304d\u63db\u3048\u308b\u3002 A A \u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u6570\u5217\u306f M^N M^N \u901a\u308a\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u5168\u3066\u306e\u6570\u5217\u306b\u5bfe\u3059\u308b f(A) f(A) \u306e\u548c\u3092 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u663e\u7136\uff0c\u586b\u5145 v v \u8fd9\u4e2a\u503c\u8981\u82b1\u8d39\u7684\u6b21\u6570\uff0c\u5c31\u662f\u5c06\u539f\u6570\u5217\u4e2d\u6240\u6709\u5927\u4e8e v v \u7684\u5143\u7d20\u53bb\u6389\uff0c\u518d\u6309\u987a\u5e8f\u62fc\u63a5\u8d77\u6765\u5f97\u5230\u7684\u6570\u5217\u4e2d v v \u7684\u6bb5\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u5927\u4e8e v v \u7684\u503c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u800c\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u503c\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u8bbe dp_i dp_i \u8868\u793a v v \u548c\u5c0f\u4e8e v v \u7684\u503c\u5360\u7528 i i \u4e2a\u4f4d\u7f6e\u65f6\u7684\u6240\u6709\u60c5\u51b5\u4e2d\u586b\u5145 v v \u82b1\u8d39\u7684\u6b21\u6570\u7684\u603b\u548c\u3002\u5219\u6240\u6709\u6570\u5217\u4e2d\u586b\u5145 v v \u82b1\u8d39\u7684\u6b21\u6570\u7684\u603b\u548c\u4e3a \\sum_{i=1}^N\\binom{N}{N-i}(M-i)^{N-i}dp_i \\sum_{i=1}^N\\binom{N}{N-i}(M-i)^{N-i}dp_i \u5982\u679c\u6211\u4eec\u80fd\u5bf9\u6bcf\u4e2a v v \u5728 O(N) O(N) \u65f6\u95f4\u5185\u6c42\u51fa dp_i dp_i \uff0c\u5c31\u80fd O(NM+N^2) O(NM+N^2) \u6c42\u51fa\u7b54\u6848\u4e86\u3002\u8bbe f_{i,0/1} f_{i,0/1} \u8868\u793a\u5360\u7528 i i \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f/\u5426\u4e3a v v \u7684\u6240\u6709\u65b9\u6848\u4e2d\u586b\u5145 v v \u6b21\u6570\u7684\u603b\u548c\uff0c\u800c g_{i,0/1} g_{i,0/1} \u8868\u793a\u5360\u7528 i i \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f/\u5426\u4e3a v v \u7684\u65b9\u6848\u6570\u3002\u5219 \\begin{aligned} f_{i,0}&=(v-1)(f_{i-1,0}+f_{i-1,1})\\\\ f_{i,1}&=(f_{i-1,0}+g_{i-1,0})+f_{i-1,1}\\\\ g_{i,0}&=(v-1)(g_{i-1,0}+g_{i-1,1})\\\\ g_{i,1}&=g_{i-1,0}+g_{i-1,1} \\end{aligned} \\begin{aligned} f_{i,0}&=(v-1)(f_{i-1,0}+f_{i-1,1})\\\\ f_{i,1}&=(f_{i-1,0}+g_{i-1,0})+f_{i-1,1}\\\\ g_{i,0}&=(v-1)(g_{i-1,0}+g_{i-1,1})\\\\ g_{i,1}&=g_{i-1,0}+g_{i-1,1} \\end{aligned} \u8fd9\u662f\u56e0\u4e3a\uff0c\u4ece f_{i-1,0} f_{i-1,0} \u5411 f_{i,1} f_{i,1} \u8f6c\u79fb\u65f6\uff0c v v \u7684\u6bb5\u6570\u589e\u52a0\u4e86 1 1 \uff0c\u5219\u4e4b\u524d\u7684\u6bcf\u79cd\u65b9\u6848\u90fd\u8981\u591a\u586b\u5145 1 1 \u6b21\uff0c\u4e8e\u662f\u8981\u52a0\u4e0a g_{i-1,0} g_{i-1,0} \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e3 + 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int fact [ maxn ], ifact [ maxn ]; void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ n - 1 ]); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int n , m ; int f [ maxn ][ 2 ], g [ maxn ][ 2 ]; int main (){ std :: scanf ( \"%d%d\" , & n , & m ), init ( n ); int ans = 0 ; for ( int i = 1 ; i <= m ; ++ i ){ f [ 0 ][ 0 ] = 0 , g [ 0 ][ 0 ] = 1 ; for ( int j = 1 ; j <= n ; ++ j ){ f [ j ][ 1 ] = ( f [ j - 1 ][ 1 ] + ( ll ) f [ j - 1 ][ 0 ]) % mod ; f [ j ][ 0 ] = ( f [ j - 1 ][ 1 ] + ( ll ) f [ j - 1 ][ 0 ]) * ll ( m - i ) % mod ; f [ j ][ 1 ] = ( f [ j ][ 1 ] + g [ j - 1 ][ 0 ]) % mod ; g [ j ][ 1 ] = ( g [ j - 1 ][ 1 ] + ( ll ) g [ j - 1 ][ 0 ]) % mod ; g [ j ][ 0 ] = ( g [ j - 1 ][ 1 ] + ( ll ) g [ j - 1 ][ 0 ]) * ll ( m - i ) % mod ; } for ( int j = 1 ; j <= n ; ++ j ) ans = ( ans + ( ll ) binom ( n , n - j ) * qpow ( i - 1 , n - j ) % mod * ( f [ j ][ 0 ] + f [ j ][ 1 ])) % mod ; } std :: printf ( \"%d \\n \" , ans ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 114 C - Sequence Scores","title":"C - Sequence Scores"},{"location":"problem/atcoder/arc114/c/#c-sequence-scores","text":"","title":"C - Sequence Scores"},{"location":"problem/atcoder/arc114/c/#_1","text":"1 1 \u4ee5\u4e0a M M \u4ee5\u4e0b\u306e\u6574\u6570\u304b\u3089\u6210\u308b\u9577\u3055 N N \u306e\u6570\u5217 A A \u306b\u5bfe\u3057\u3066\u3001 f(A) f(A) \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u9577\u3055 N N \u306e\u6570\u5217 X X \u304c\u3042\u308a\u3001\u521d\u3081\u5168\u3066\u306e\u8981\u7d20\u306f 0 0 \u3067\u3042\u308b\u3002 f(A) f(A) \u3092\u3001\u6b21\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u3066 X X \u3092 A A \u306b\u7b49\u3057\u304f\u3059\u308b\u305f\u3081\u306e\u6700\u5c0f\u306e\u64cd\u4f5c\u56de\u6570\u3068\u3059\u308b\u3002 1\\le l\\le r\\le N 1\\le l\\le r\\le N \u3068 1\\le v\\le M 1\\le v\\le M \u3092\u6307\u5b9a\u3059\u308b\u3002 l\\le i\\le r l\\le i\\le r \u306b\u5bfe\u3057\u3066 X_i X_i \u3092 \\max(X_i,v) \\max(X_i,v) \u3067\u7f6e\u304d\u63db\u3048\u308b\u3002 A A \u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u6570\u5217\u306f M^N M^N \u901a\u308a\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u5168\u3066\u306e\u6570\u5217\u306b\u5bfe\u3059\u308b f(A) f(A) \u306e\u548c\u3092 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc114/c/#_2","text":"\u663e\u7136\uff0c\u586b\u5145 v v \u8fd9\u4e2a\u503c\u8981\u82b1\u8d39\u7684\u6b21\u6570\uff0c\u5c31\u662f\u5c06\u539f\u6570\u5217\u4e2d\u6240\u6709\u5927\u4e8e v v \u7684\u5143\u7d20\u53bb\u6389\uff0c\u518d\u6309\u987a\u5e8f\u62fc\u63a5\u8d77\u6765\u5f97\u5230\u7684\u6570\u5217\u4e2d v v \u7684\u6bb5\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u5927\u4e8e v v \u7684\u503c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u800c\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u503c\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u8bbe dp_i dp_i \u8868\u793a v v \u548c\u5c0f\u4e8e v v \u7684\u503c\u5360\u7528 i i \u4e2a\u4f4d\u7f6e\u65f6\u7684\u6240\u6709\u60c5\u51b5\u4e2d\u586b\u5145 v v \u82b1\u8d39\u7684\u6b21\u6570\u7684\u603b\u548c\u3002\u5219\u6240\u6709\u6570\u5217\u4e2d\u586b\u5145 v v \u82b1\u8d39\u7684\u6b21\u6570\u7684\u603b\u548c\u4e3a \\sum_{i=1}^N\\binom{N}{N-i}(M-i)^{N-i}dp_i \\sum_{i=1}^N\\binom{N}{N-i}(M-i)^{N-i}dp_i \u5982\u679c\u6211\u4eec\u80fd\u5bf9\u6bcf\u4e2a v v \u5728 O(N) O(N) \u65f6\u95f4\u5185\u6c42\u51fa dp_i dp_i \uff0c\u5c31\u80fd O(NM+N^2) O(NM+N^2) \u6c42\u51fa\u7b54\u6848\u4e86\u3002\u8bbe f_{i,0/1} f_{i,0/1} \u8868\u793a\u5360\u7528 i i \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f/\u5426\u4e3a v v \u7684\u6240\u6709\u65b9\u6848\u4e2d\u586b\u5145 v v \u6b21\u6570\u7684\u603b\u548c\uff0c\u800c g_{i,0/1} g_{i,0/1} \u8868\u793a\u5360\u7528 i i \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f/\u5426\u4e3a v v \u7684\u65b9\u6848\u6570\u3002\u5219 \\begin{aligned} f_{i,0}&=(v-1)(f_{i-1,0}+f_{i-1,1})\\\\ f_{i,1}&=(f_{i-1,0}+g_{i-1,0})+f_{i-1,1}\\\\ g_{i,0}&=(v-1)(g_{i-1,0}+g_{i-1,1})\\\\ g_{i,1}&=g_{i-1,0}+g_{i-1,1} \\end{aligned} \\begin{aligned} f_{i,0}&=(v-1)(f_{i-1,0}+f_{i-1,1})\\\\ f_{i,1}&=(f_{i-1,0}+g_{i-1,0})+f_{i-1,1}\\\\ g_{i,0}&=(v-1)(g_{i-1,0}+g_{i-1,1})\\\\ g_{i,1}&=g_{i-1,0}+g_{i-1,1} \\end{aligned} \u8fd9\u662f\u56e0\u4e3a\uff0c\u4ece f_{i-1,0} f_{i-1,0} \u5411 f_{i,1} f_{i,1} \u8f6c\u79fb\u65f6\uff0c v v \u7684\u6bb5\u6570\u589e\u52a0\u4e86 1 1 \uff0c\u5219\u4e4b\u524d\u7684\u6bcf\u79cd\u65b9\u6848\u90fd\u8981\u591a\u586b\u5145 1 1 \u6b21\uff0c\u4e8e\u662f\u8981\u52a0\u4e0a g_{i-1,0} g_{i-1,0} \u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc114/c/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e3 + 19 , mod = 998244353 ; int qpow ( int a , int b ){ int res = 1 ; while ( b ){ if ( b & 1 ) res = ( ll ) res * a % mod ; a = ( ll ) a * a % mod , b >>= 1 ; } return res ; } int fact [ maxn ], ifact [ maxn ]; void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ n - 1 ]); for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int n , m ; int f [ maxn ][ 2 ], g [ maxn ][ 2 ]; int main (){ std :: scanf ( \"%d%d\" , & n , & m ), init ( n ); int ans = 0 ; for ( int i = 1 ; i <= m ; ++ i ){ f [ 0 ][ 0 ] = 0 , g [ 0 ][ 0 ] = 1 ; for ( int j = 1 ; j <= n ; ++ j ){ f [ j ][ 1 ] = ( f [ j - 1 ][ 1 ] + ( ll ) f [ j - 1 ][ 0 ]) % mod ; f [ j ][ 0 ] = ( f [ j - 1 ][ 1 ] + ( ll ) f [ j - 1 ][ 0 ]) * ll ( m - i ) % mod ; f [ j ][ 1 ] = ( f [ j ][ 1 ] + g [ j - 1 ][ 0 ]) % mod ; g [ j ][ 1 ] = ( g [ j - 1 ][ 1 ] + ( ll ) g [ j - 1 ][ 0 ]) % mod ; g [ j ][ 0 ] = ( g [ j - 1 ][ 1 ] + ( ll ) g [ j - 1 ][ 0 ]) * ll ( m - i ) % mod ; } for ( int j = 1 ; j <= n ; ++ j ) ans = ( ans + ( ll ) binom ( n , n - j ) * qpow ( i - 1 , n - j ) % mod * ( f [ j ][ 0 ] + f [ j ][ 1 ])) % mod ; } std :: printf ( \"%d \\n \" , ans ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc114/c/#_4","text":"AtCoder Regular Contest 114 C - Sequence Scores","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc114/d/","text":"D - Moving Pieces on Line \u00b6 \u9898\u610f \u00b6 X=10^{100} X=10^{100} \u3068\u3057\u3066\u3001\u5404\u6574\u6570 \u2212X\\le i\\le X \u2212X\\le i\\le X \u306b\u5bfe\u5fdc\u3059\u308b\u9802\u70b9\u304c\u3042\u308a\u3001 \u2212X\\le i\\le X\u22121 \u2212X\\le i\\le X\u22121 \u306b\u3064\u3044\u3066\u9802\u70b9 i,i+1 i,i+1 \u3092\u7d50\u3076\u7121\u5411\u8fba (\u4ee5\u964d\u3001\u8fba {i,i+1} {i,i+1} \u3068\u547c\u3076) \u304c\u3042\u308b\u30b0\u30e9\u30d5\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30b0\u30e9\u30d5\u306e\u8fba\u306f\u521d\u3081\u3059\u3079\u3066\u8d64\u304f\u5857\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001 N N \u500b \u306e\u30b3\u30de\u304c\u3042\u308a\u3001 i i \u500b\u76ee\u306e\u30b3\u30de\u306f\u9802\u70b9 a_i a_i \u306b\u7f6e\u304b\u308c\u3066\u3044\u307e\u3059\u3002 maroon \u541b\u306f\u6b21\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b3\u30de\u3092 1 1 \u3064\u9078\u3076\u3002\u3053\u306e\u30b3\u30de\u304c\u9802\u70b9 i i \u306b\u3042\u308b\u3068\u304d\u3001\u30b3\u30de\u3092\u9802\u70b9 i\u22121 i\u22121 \u307e\u305f\u306f\u9802\u70b9 i+1 i+1 \u306b\u52d5\u304b\u3057\u3001\u901a\u3063\u305f\u8fba\u3092\u3001\u73fe\u5728\u306e\u8272\u304c\u8d64\u306a\u3089\u9752\u3001\u9752\u306a\u3089\u8d64\u306b\u5857\u308a\u66ff\u3048\u308b\u3002 \u64cd\u4f5c\u306e\u904e\u7a0b\u3067\u3001\u540c\u3058\u9802\u70b9\u306b\u8907\u6570\u306e\u30b3\u30de\u304c\u5b58\u5728\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002 maroon \u541b\u306f\u3053\u308c\u304b\u3089\u4e0a\u8a18\u306e\u64cd\u4f5c\u3092 0 0 \u56de\u4ee5\u4e0a\u7e70\u308a\u8fd4\u3057\u3066\u3001\u8fba\u306e\u8272\u306e\u7d44\u5408\u305b\u3092\u76ee\u7684\u306e\u72b6\u614b\u306b\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u76ee\u7684\u306e\u72b6\u614b\u306f\u5076\u6570 K K \u3068\u3001 K K \u500b\u306e\u6574\u6570 t_1<t_2<\\ldots<t_K t_1<t_2<\\ldots<t_K \u3067\u8868\u3055\u308c\u3001 i<t_1 i<t_1 \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u8d64\u3001 t_1\\le i<t_2 t_1\\le i<t_2 \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u9752\u3001\u2026\u2026\u3001 t_K\\le i t_K\\le i \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u8d64\u3000\u3068\u3044\u3046\u72b6\u614b\u3067\u3059\u3002\u3088\u308a\u6b63\u78ba\u306b\u306f\u3001\u5404\u5947\u6570 j=1,3,\\ldots,K\u22121 j=1,3,\\ldots,K\u22121 \u306b\u5bfe\u3057\u3066\u3001 t_j\\le i<t_{j+1} t_j\\le i<t_{j+1} \u3092\u6e80\u305f\u3059 i i \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u9752\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u8fba\u306f\u3059\u3079\u3066\u8d64\u3067\u3059\u3002 maroon \u541b\u304c\u8fba\u306e\u8272\u306e\u7d44\u5408\u305b\u3092\u76ee\u7684\u306e\u72b6\u614b\u306b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u64cd\u4f5c\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u305d\u306e\u3088\u3046\u306a\u64cd\u4f5c\u304c\u4e0d\u53ef\u80fd\u3067\u3042\u308b\u306a\u3089 \u22121 \u22121 \u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u8bbe\u7b2c i i \u4e2a\u99d2\u88ab\u79fb\u52a8\u5230\u4e86 b_i b_i \uff0c\u5229\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6211\u4eec\u4ee4 s[a_i]\\gets s[a_i]+1,s[b_i]\\gets s[b_i]+1 s[a_i]\\gets s[a_i]+1,s[b_i]\\gets s[b_i]+1 (\u5b70\u52a0\u5b70\u51cf\u5176\u5b9e\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3 parity)\uff0c\u6700\u540e\u5224\u65ad s s \u7684\u6bcf\u4e2a\u524d\u7f00\u548c\u7684 parity \u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u5bf9\u4e8e\u6bcf\u4e2a j\\in\\{t_i\\} j\\in\\{t_i\\} \uff0c\u6211\u4eec\u90fd\u8981\u6c42 2\\nmid S[j] 2\\nmid S[j] \uff0c\u800c\u5bf9\u4e8e\u5176\u4f59\u7684\u6570\u5219\u8981\u6c42 2\\mid S_j 2\\mid S_j \u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5148\u8ba1\u7b97 T=\\complement_{\\{t_i\\}\\cup\\{a_i\\}}(\\{t_i\\}\\cap\\{a_i\\}) T=\\complement_{\\{t_i\\}\\cup\\{a_i\\}}(\\{t_i\\}\\cap\\{a_i\\}) \uff0c\u5219\u5bf9\u4e8e\u5408\u6cd5\u7684\u79fb\u52a8\uff0c\u4e00\u5b9a\u6709 \\{b_i\\}=T \\{b_i\\}=T (\u5176\u5b9e\u8fd9\u91cc\u7528\u96c6\u5408\u4e0d\u592a\u6b63\u786e)\u3002 \u82e5 |T|> N |T|> N \u6216 |T|\\not\\equiv N\\bmod2 |T|\\not\\equiv N\\bmod2 \uff0c\u5219\u65e0\u89e3\u3002\u5426\u5219\uff0c\u7528\u52a8\u6001\u89c4\u5212\u5339\u914d a_i a_i \u4e0e b_i b_i \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e3 + 19 ; int n , k ; std :: vector < int > parity_set ( const std :: vector < int > & a ){ std :: vector < int > b ( a ), res ; std :: sort ( b . begin (), b . end ()); b . resize ( std :: unique ( b . begin (), b . end ()) - b . begin ()); std :: vector < bool > c ( b . size ()); for ( int i : a ) c [ std :: lower_bound ( b . begin (), b . end (), i ) - b . begin ()]. flip (); for ( int i = 0 ; i < ( int ) c . size (); ++ i ) if ( c [ i ]) res . push_back ( b [ i ]); return res ; } std :: vector < int > a , T ; ll dp [ maxn ][ maxn ]; int main (){ std :: scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 , j ; i <= n ; ++ i ) std :: scanf ( \"%d\" , & j ), a . push_back ( j ), T . push_back ( j ); for ( int i = 1 , j ; i <= k ; ++ i ) std :: scanf ( \"%d\" , & j ), T . push_back ( j ); T = parity_set ( T ); if (( int ) T . size () > n || ( n - T . size ()) & 1 ){ std :: puts ( \"-1\" ); return 0 ; } std :: sort ( a . begin (), a . end ()); std :: memset ( dp , 0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ){ int lim = std :: min < int > ( i , T . size ()); for ( int j = 1 ; j <= lim ; ++ j ) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + std :: abs ( a [ i - 1 ] - T [ j - 1 ]); if ( i >= 2 ) for ( int j = 0 ; j <= lim ; ++ j ) dp [ i ][ j ] = std :: min ( dp [ i ][ j ], dp [ i - 2 ][ j ] + std :: abs ( a [ i - 1 ] - a [ i - 2 ])); } std :: printf ( \"%lld \\n \" , dp [ n ][ T . size ()]); return 0 ; } \u6765\u6e90 \u00b6 AtCoder Regular Contest 114 D - Moving Pieces on Line","title":"D - Moving Pieces on Line"},{"location":"problem/atcoder/arc114/d/#d-moving-pieces-on-line","text":"","title":"D - Moving Pieces on Line"},{"location":"problem/atcoder/arc114/d/#_1","text":"X=10^{100} X=10^{100} \u3068\u3057\u3066\u3001\u5404\u6574\u6570 \u2212X\\le i\\le X \u2212X\\le i\\le X \u306b\u5bfe\u5fdc\u3059\u308b\u9802\u70b9\u304c\u3042\u308a\u3001 \u2212X\\le i\\le X\u22121 \u2212X\\le i\\le X\u22121 \u306b\u3064\u3044\u3066\u9802\u70b9 i,i+1 i,i+1 \u3092\u7d50\u3076\u7121\u5411\u8fba (\u4ee5\u964d\u3001\u8fba {i,i+1} {i,i+1} \u3068\u547c\u3076) \u304c\u3042\u308b\u30b0\u30e9\u30d5\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u30b0\u30e9\u30d5\u306e\u8fba\u306f\u521d\u3081\u3059\u3079\u3066\u8d64\u304f\u5857\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001 N N \u500b \u306e\u30b3\u30de\u304c\u3042\u308a\u3001 i i \u500b\u76ee\u306e\u30b3\u30de\u306f\u9802\u70b9 a_i a_i \u306b\u7f6e\u304b\u308c\u3066\u3044\u307e\u3059\u3002 maroon \u541b\u306f\u6b21\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b3\u30de\u3092 1 1 \u3064\u9078\u3076\u3002\u3053\u306e\u30b3\u30de\u304c\u9802\u70b9 i i \u306b\u3042\u308b\u3068\u304d\u3001\u30b3\u30de\u3092\u9802\u70b9 i\u22121 i\u22121 \u307e\u305f\u306f\u9802\u70b9 i+1 i+1 \u306b\u52d5\u304b\u3057\u3001\u901a\u3063\u305f\u8fba\u3092\u3001\u73fe\u5728\u306e\u8272\u304c\u8d64\u306a\u3089\u9752\u3001\u9752\u306a\u3089\u8d64\u306b\u5857\u308a\u66ff\u3048\u308b\u3002 \u64cd\u4f5c\u306e\u904e\u7a0b\u3067\u3001\u540c\u3058\u9802\u70b9\u306b\u8907\u6570\u306e\u30b3\u30de\u304c\u5b58\u5728\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002 maroon \u541b\u306f\u3053\u308c\u304b\u3089\u4e0a\u8a18\u306e\u64cd\u4f5c\u3092 0 0 \u56de\u4ee5\u4e0a\u7e70\u308a\u8fd4\u3057\u3066\u3001\u8fba\u306e\u8272\u306e\u7d44\u5408\u305b\u3092\u76ee\u7684\u306e\u72b6\u614b\u306b\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u76ee\u7684\u306e\u72b6\u614b\u306f\u5076\u6570 K K \u3068\u3001 K K \u500b\u306e\u6574\u6570 t_1<t_2<\\ldots<t_K t_1<t_2<\\ldots<t_K \u3067\u8868\u3055\u308c\u3001 i<t_1 i<t_1 \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u8d64\u3001 t_1\\le i<t_2 t_1\\le i<t_2 \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u9752\u3001\u2026\u2026\u3001 t_K\\le i t_K\\le i \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u8d64\u3000\u3068\u3044\u3046\u72b6\u614b\u3067\u3059\u3002\u3088\u308a\u6b63\u78ba\u306b\u306f\u3001\u5404\u5947\u6570 j=1,3,\\ldots,K\u22121 j=1,3,\\ldots,K\u22121 \u306b\u5bfe\u3057\u3066\u3001 t_j\\le i<t_{j+1} t_j\\le i<t_{j+1} \u3092\u6e80\u305f\u3059 i i \u306b\u3064\u3044\u3066\u8fba {i,i+1} {i,i+1} \u306f\u9752\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u8fba\u306f\u3059\u3079\u3066\u8d64\u3067\u3059\u3002 maroon \u541b\u304c\u8fba\u306e\u8272\u306e\u7d44\u5408\u305b\u3092\u76ee\u7684\u306e\u72b6\u614b\u306b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u64cd\u4f5c\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u305d\u306e\u3088\u3046\u306a\u64cd\u4f5c\u304c\u4e0d\u53ef\u80fd\u3067\u3042\u308b\u306a\u3089 \u22121 \u22121 \u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc114/d/#_2","text":"\u8bbe\u7b2c i i \u4e2a\u99d2\u88ab\u79fb\u52a8\u5230\u4e86 b_i b_i \uff0c\u5229\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6211\u4eec\u4ee4 s[a_i]\\gets s[a_i]+1,s[b_i]\\gets s[b_i]+1 s[a_i]\\gets s[a_i]+1,s[b_i]\\gets s[b_i]+1 (\u5b70\u52a0\u5b70\u51cf\u5176\u5b9e\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3 parity)\uff0c\u6700\u540e\u5224\u65ad s s \u7684\u6bcf\u4e2a\u524d\u7f00\u548c\u7684 parity \u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u5bf9\u4e8e\u6bcf\u4e2a j\\in\\{t_i\\} j\\in\\{t_i\\} \uff0c\u6211\u4eec\u90fd\u8981\u6c42 2\\nmid S[j] 2\\nmid S[j] \uff0c\u800c\u5bf9\u4e8e\u5176\u4f59\u7684\u6570\u5219\u8981\u6c42 2\\mid S_j 2\\mid S_j \u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5148\u8ba1\u7b97 T=\\complement_{\\{t_i\\}\\cup\\{a_i\\}}(\\{t_i\\}\\cap\\{a_i\\}) T=\\complement_{\\{t_i\\}\\cup\\{a_i\\}}(\\{t_i\\}\\cap\\{a_i\\}) \uff0c\u5219\u5bf9\u4e8e\u5408\u6cd5\u7684\u79fb\u52a8\uff0c\u4e00\u5b9a\u6709 \\{b_i\\}=T \\{b_i\\}=T (\u5176\u5b9e\u8fd9\u91cc\u7528\u96c6\u5408\u4e0d\u592a\u6b63\u786e)\u3002 \u82e5 |T|> N |T|> N \u6216 |T|\\not\\equiv N\\bmod2 |T|\\not\\equiv N\\bmod2 \uff0c\u5219\u65e0\u89e3\u3002\u5426\u5219\uff0c\u7528\u52a8\u6001\u89c4\u5212\u5339\u914d a_i a_i \u4e0e b_i b_i \u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc114/d/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e3 + 19 ; int n , k ; std :: vector < int > parity_set ( const std :: vector < int > & a ){ std :: vector < int > b ( a ), res ; std :: sort ( b . begin (), b . end ()); b . resize ( std :: unique ( b . begin (), b . end ()) - b . begin ()); std :: vector < bool > c ( b . size ()); for ( int i : a ) c [ std :: lower_bound ( b . begin (), b . end (), i ) - b . begin ()]. flip (); for ( int i = 0 ; i < ( int ) c . size (); ++ i ) if ( c [ i ]) res . push_back ( b [ i ]); return res ; } std :: vector < int > a , T ; ll dp [ maxn ][ maxn ]; int main (){ std :: scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 , j ; i <= n ; ++ i ) std :: scanf ( \"%d\" , & j ), a . push_back ( j ), T . push_back ( j ); for ( int i = 1 , j ; i <= k ; ++ i ) std :: scanf ( \"%d\" , & j ), T . push_back ( j ); T = parity_set ( T ); if (( int ) T . size () > n || ( n - T . size ()) & 1 ){ std :: puts ( \"-1\" ); return 0 ; } std :: sort ( a . begin (), a . end ()); std :: memset ( dp , 0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ){ int lim = std :: min < int > ( i , T . size ()); for ( int j = 1 ; j <= lim ; ++ j ) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + std :: abs ( a [ i - 1 ] - T [ j - 1 ]); if ( i >= 2 ) for ( int j = 0 ; j <= lim ; ++ j ) dp [ i ][ j ] = std :: min ( dp [ i ][ j ], dp [ i - 2 ][ j ] + std :: abs ( a [ i - 1 ] - a [ i - 2 ])); } std :: printf ( \"%lld \\n \" , dp [ n ][ T . size ()]); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc114/d/#_4","text":"AtCoder Regular Contest 114 D - Moving Pieces on Line","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc114/e/","text":"E - Paper Cutting 2 \u00b6 \u9898\u610f \u00b6 H\\times W H\\times W \u306e\u30de\u30b9\u76ee\u306b\u533a\u5207\u3089\u308c\u305f\u9577\u65b9\u5f62\u306e\u7d19\u304c\u3042\u308a\u3001\u3053\u306e\u3046\u3061\u3061\u3087\u3046\u3069 2 2 \u30de\u30b9\u304c\u9ed2\u304f\u3001\u6b8b\u308a\u306e\u90e8\u5206\u306f\u767d\u304f\u5857\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u30de\u30b9\u76ee\u306e i i \u884c\u76ee\u3001 j j \u5217\u76ee\u306b\u3042\u308b\u30de\u30b9\u3092 (i,j) (i,j) \u3067\u8868\u3059\u3068\u3001\u9ed2\u304f\u5857\u3089\u308c\u3066\u3044\u308b\u306e\u306f\u30de\u30b9 (h_1,w_1) (h_1,w_1) \u3068\u30de\u30b9 (h_2,w_2) (h_2,w_2) \u3067\u3059\u3002 maroon \u541b\u306f\u3053\u308c\u304b\u3089\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u7d19\u3092\u5207\u65ad\u3059\u308b\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 \u73fe\u5728\u306e\u7d19\u306e\u30de\u30b9\u76ee\u304c h\\times w h\\times w \u306e\u6642\u3001\u7d19\u306e\u8fba\u306b\u5e73\u884c\u3067\u30de\u30b9\u306e\u5883\u754c\u3092\u901a\u308b\u3088\u3046\u306a\u76f4\u7dda\u306b\u306f\u3001 (h\u22121) (h\u22121) \u672c\u306e\u6a2a\u7dda\u3068 (w\u22121) (w\u22121) \u672c\u306e\u7e26\u7dda\u304c\u3042\u308b\u3002\u3053\u306e\u4e2d\u304b\u3089 1 1 \u672c\u3092\u4e00\u69d8\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u3001\u305d\u306e\u76f4\u7dda\u306b\u6cbf\u3063\u3066\u7d19\u3092 2 2 \u679a\u306b\u5207\u65ad\u3059\u308b\u3002\u3053\u306e\u3068\u304d\u3001 2 2 \u3064\u306e\u9ed2\u3044\u30de\u30b9\u304c\u540c\u3058\u7d19\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\u3001\u3082\u3046\u7247\u65b9\u306e\u7d19\u3092\u6368\u3066\u3001\u64cd\u4f5c\u3092\u7d9a\u3051\u308b \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u64cd\u4f5c\u3092\u7d42\u4e86\u3059\u308b maroon \u541b\u304c\u64cd\u4f5c\u3092\u7d42\u4e86\u3059\u308b\u307e\u3067\u306b\u7d19\u3092\u5207\u65ad\u3059\u308b\u56de\u6570\u306e\u671f\u5f85\u5024\u3092 \\bmod 998244353 \\bmod 998244353 \u3067\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u5c06 H+W-2 H+W-2 \u6761\u5207\u5272\u7ebf\u7f16\u53f7\u3002\u5bf9\u4e8e\u4e00\u4e2a 1 1 \u81f3 H+W H+W \u7684\u6392\u5217 p p \uff0c\u6211\u4eec\u8fd9\u6837\u5efa\u7acb\u5b83\u4e0e\u64cd\u4f5c\u5e8f\u5217\u7684\u8054\u7cfb\uff1a\u4f9d\u6b21\u5207\u5272 p_i p_i \u5bf9\u5e94\u7684\u5207\u5272\u7ebf\uff0c\u82e5\u5bf9\u5e94\u5207\u5272\u7ebf\u5df2\u7ecf\u4e0d\u5b58\u5728\u5219\u5ffd\u7565\uff0c\u82e5\u5207\u5272\u6210\u4e24\u7247\u5e26\u9ed1\u5757\u7684\u7eb8\u5219\u7ec8\u6b62\u3002 \u5219\u6bcf\u4e00\u4e2a 1 1 \u81f3 H+W-2 H+W-2 \u7684\u6392\u5217\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5408\u6cd5\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u6bcf\u4e00\u4e2a\u5408\u6cd5\u7684\u64cd\u4f5c\u5e8f\u5217\u90fd\u5bf9\u5e94\u82e5\u5e72\u4e2a\u6392\u5217\u3002\u4e14\u6bcf\u4e2a\u64cd\u4f5c\u5e8f\u5217\u5bf9\u5e94\u7684\u6392\u5217\u6570\u5360\u6bd4\u7b49\u4e8e\u5b83\u51fa\u73b0\u7684\u6982\u7387(\u203b)\u3002 \u6211\u4eec\u79f0\u80fd\u591f\u5c06\u7eb8\u5206\u4e3a\u4e24\u4efd\u90fd\u5e26\u6709\u9ed1\u5757\u7684\u5207\u5272\u7ebf\u4e3a\u5185\u5207\u5272\u7ebf (\u4e0d\u59a8\u8bbe\u6709 n n \u6761)\uff0c\u5176\u4f59\u7684\u6309\u5176\u4f4d\u7f6e\u5206\u4e3a\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u5207\u5272\u7ebf\u3002\u5bf9\u4e8e\u4e0a\u5207\u5272\u7ebf\uff0c\u6211\u4eec\u6309\u5176\u8ddd\u5185\u5207\u5272\u7ebf\u7684\u8ddd\u79bb\u4ece\u8fd1\u5230\u8fdc\u7f16\u53f7\u4e3a 1,2,\\ldots,m 1,2,\\ldots,m \uff0c\u5219\u7b2c i i \u6761\u7ebf\u53ea\u6709\u5728\u6392\u5217\u4e2d\u7684\u4f4d\u7f6e\u4f4d\u4e8e 1,2,\\ldots,i-1 1,2,\\ldots,i-1 \u548c\u6240\u6709\u5185\u5207\u5272\u7ebf\u4e4b\u524d\u65f6\u624d\u4f1a\u88ab\u5207\u5272\uff0c\u5219\u5176\u88ab\u5207\u5272\u7684\u6982\u7387 (\u540c\u65f6\u4e5f\u662f\u5176\u5bf9\u7b54\u6848\u7684\u8d21\u732e) \u4e3a \\dfrac{1}{i+n} \\dfrac{1}{i+n} \u3002\u5bf9\u4e0b\u5de6\u53f3\u5982\u6cd5\u70ae\u5236\u5373\u53ef\u3002 \u9884\u5904\u7406\u9636\u4e58\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\u590d\u6742\u5ea6\u3002 (\u203b)\u62bd\u8c61\u5730\u8bf4\uff0c\u7528\u4e00\u4e2a\u8303\u56f4\u4e3a [L,R] [L,R] \u7684\u5747\u5300\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210 [l,r] [l,r] ( L\\le l\\le r\\le R L\\le l\\le r\\le R ) \u8303\u56f4\u7684\u968f\u673a\u6570 (\u82e5\u8d85\u51fa\u8303\u56f4\uff0c\u91cd\u65b0\u751f\u6210\uff0c\u76f4\u5230\u7ed3\u679c\u5728\u8303\u56f4\u5185)\uff0c\u7ed3\u679c\u8fd8\u662f\u5747\u5300\u7684\u3002\u820d\u53bb\u90e8\u5206\u4e0d\u5f71\u54cd\u4fdd\u7559\u90e8\u5206\u7684\u6982\u7387\u5206\u5e03\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\u7684\u524d\u7f00 p[1\\ldots i] p[1\\ldots i] \uff0c\u5176\u4e2d\u5df2\u5207\u5272\u7684\u4e00\u4e9b\u5207\u5272\u7ebf\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u67d0\u4e9b\u5207\u5272\u7ebf\u88ab\u5ffd\u7565\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u88ab\u5ffd\u7565\u7684\u5207\u5272\u7ebf (\u6570\u91cf\u8bb0\u505a m m ) \u4f1a\u4f7f\u540e\u9762\u6bcf\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u5e8f\u5217\u5bf9\u5e94\u7684\u6392\u5217\u6570\u5747\u7b49\u5730\u4e58\u4e0a \\binom{n-i}{m}m! \\binom{n-i}{m}m! \uff0c\u4e0d\u5f71\u54cd\u76f8\u5bf9\u6982\u7387\u3002\u56e0\u6b64\uff0c\u6bcf\u4e00\u4e2a\u524d\u7f00\u5bf9\u5e94\u7684\u6240\u6709\u6392\u5217\u7684\u76f8\u5bf9\u6982\u7387\u90fd\u6ca1\u6709\u88ab\u5f71\u54cd\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e5 + 19 , mod = 998244353 ; void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } int fact [ maxn ], ifact [ maxn ]; void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ 0 ]), ifact [ n ] = ( ifact [ n ] % mod + mod ) % mod ; for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int inv ( int n ){ return ( ll ) ifact [ n ] * fact [ n - 1 ] % mod ; } int H , W , h [ 2 ], w [ 2 ]; int dp [ maxn ], ans ; int solve ( int a , int b ){ int res = 0 ; for ( int i = 1 ; i <= a ; ++ i ) res = ( res + inv ( i + b )) % mod ; return res ; } int main (){ std :: scanf ( \"%d%d%d%d%d%d\" , & H , & W , h , w , h + 1 , w + 1 ); if ( h [ 0 ] > h [ 1 ]) std :: swap ( h [ 0 ], h [ 1 ]); if ( w [ 0 ] > w [ 1 ]) std :: swap ( w [ 0 ], w [ 1 ]); init ( H + W ); int n = h [ 1 ] - h [ 0 ] + w [ 1 ] - w [ 0 ]; ans = ( 1l l + solve ( h [ 0 ] - 1 , n ) + solve ( H - h [ 1 ], n ) + solve ( w [ 0 ] - 1 , n ) + solve ( W - w [ 1 ], n ) ) % mod ; std :: printf ( \"%d \\n \" , ans ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 114 E - Paper Cutting 2","title":"E - Paper Cutting 2"},{"location":"problem/atcoder/arc114/e/#e-paper-cutting-2","text":"","title":"E - Paper Cutting 2"},{"location":"problem/atcoder/arc114/e/#_1","text":"H\\times W H\\times W \u306e\u30de\u30b9\u76ee\u306b\u533a\u5207\u3089\u308c\u305f\u9577\u65b9\u5f62\u306e\u7d19\u304c\u3042\u308a\u3001\u3053\u306e\u3046\u3061\u3061\u3087\u3046\u3069 2 2 \u30de\u30b9\u304c\u9ed2\u304f\u3001\u6b8b\u308a\u306e\u90e8\u5206\u306f\u767d\u304f\u5857\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u30de\u30b9\u76ee\u306e i i \u884c\u76ee\u3001 j j \u5217\u76ee\u306b\u3042\u308b\u30de\u30b9\u3092 (i,j) (i,j) \u3067\u8868\u3059\u3068\u3001\u9ed2\u304f\u5857\u3089\u308c\u3066\u3044\u308b\u306e\u306f\u30de\u30b9 (h_1,w_1) (h_1,w_1) \u3068\u30de\u30b9 (h_2,w_2) (h_2,w_2) \u3067\u3059\u3002 maroon \u541b\u306f\u3053\u308c\u304b\u3089\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u7d19\u3092\u5207\u65ad\u3059\u308b\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 \u73fe\u5728\u306e\u7d19\u306e\u30de\u30b9\u76ee\u304c h\\times w h\\times w \u306e\u6642\u3001\u7d19\u306e\u8fba\u306b\u5e73\u884c\u3067\u30de\u30b9\u306e\u5883\u754c\u3092\u901a\u308b\u3088\u3046\u306a\u76f4\u7dda\u306b\u306f\u3001 (h\u22121) (h\u22121) \u672c\u306e\u6a2a\u7dda\u3068 (w\u22121) (w\u22121) \u672c\u306e\u7e26\u7dda\u304c\u3042\u308b\u3002\u3053\u306e\u4e2d\u304b\u3089 1 1 \u672c\u3092\u4e00\u69d8\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u3001\u305d\u306e\u76f4\u7dda\u306b\u6cbf\u3063\u3066\u7d19\u3092 2 2 \u679a\u306b\u5207\u65ad\u3059\u308b\u3002\u3053\u306e\u3068\u304d\u3001 2 2 \u3064\u306e\u9ed2\u3044\u30de\u30b9\u304c\u540c\u3058\u7d19\u306b\u5b58\u5728\u3059\u308b\u3068\u304d\u3001\u3082\u3046\u7247\u65b9\u306e\u7d19\u3092\u6368\u3066\u3001\u64cd\u4f5c\u3092\u7d9a\u3051\u308b \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u64cd\u4f5c\u3092\u7d42\u4e86\u3059\u308b maroon \u541b\u304c\u64cd\u4f5c\u3092\u7d42\u4e86\u3059\u308b\u307e\u3067\u306b\u7d19\u3092\u5207\u65ad\u3059\u308b\u56de\u6570\u306e\u671f\u5f85\u5024\u3092 \\bmod 998244353 \\bmod 998244353 \u3067\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc114/e/#_2","text":"\u5c06 H+W-2 H+W-2 \u6761\u5207\u5272\u7ebf\u7f16\u53f7\u3002\u5bf9\u4e8e\u4e00\u4e2a 1 1 \u81f3 H+W H+W \u7684\u6392\u5217 p p \uff0c\u6211\u4eec\u8fd9\u6837\u5efa\u7acb\u5b83\u4e0e\u64cd\u4f5c\u5e8f\u5217\u7684\u8054\u7cfb\uff1a\u4f9d\u6b21\u5207\u5272 p_i p_i \u5bf9\u5e94\u7684\u5207\u5272\u7ebf\uff0c\u82e5\u5bf9\u5e94\u5207\u5272\u7ebf\u5df2\u7ecf\u4e0d\u5b58\u5728\u5219\u5ffd\u7565\uff0c\u82e5\u5207\u5272\u6210\u4e24\u7247\u5e26\u9ed1\u5757\u7684\u7eb8\u5219\u7ec8\u6b62\u3002 \u5219\u6bcf\u4e00\u4e2a 1 1 \u81f3 H+W-2 H+W-2 \u7684\u6392\u5217\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5408\u6cd5\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u6bcf\u4e00\u4e2a\u5408\u6cd5\u7684\u64cd\u4f5c\u5e8f\u5217\u90fd\u5bf9\u5e94\u82e5\u5e72\u4e2a\u6392\u5217\u3002\u4e14\u6bcf\u4e2a\u64cd\u4f5c\u5e8f\u5217\u5bf9\u5e94\u7684\u6392\u5217\u6570\u5360\u6bd4\u7b49\u4e8e\u5b83\u51fa\u73b0\u7684\u6982\u7387(\u203b)\u3002 \u6211\u4eec\u79f0\u80fd\u591f\u5c06\u7eb8\u5206\u4e3a\u4e24\u4efd\u90fd\u5e26\u6709\u9ed1\u5757\u7684\u5207\u5272\u7ebf\u4e3a\u5185\u5207\u5272\u7ebf (\u4e0d\u59a8\u8bbe\u6709 n n \u6761)\uff0c\u5176\u4f59\u7684\u6309\u5176\u4f4d\u7f6e\u5206\u4e3a\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u5207\u5272\u7ebf\u3002\u5bf9\u4e8e\u4e0a\u5207\u5272\u7ebf\uff0c\u6211\u4eec\u6309\u5176\u8ddd\u5185\u5207\u5272\u7ebf\u7684\u8ddd\u79bb\u4ece\u8fd1\u5230\u8fdc\u7f16\u53f7\u4e3a 1,2,\\ldots,m 1,2,\\ldots,m \uff0c\u5219\u7b2c i i \u6761\u7ebf\u53ea\u6709\u5728\u6392\u5217\u4e2d\u7684\u4f4d\u7f6e\u4f4d\u4e8e 1,2,\\ldots,i-1 1,2,\\ldots,i-1 \u548c\u6240\u6709\u5185\u5207\u5272\u7ebf\u4e4b\u524d\u65f6\u624d\u4f1a\u88ab\u5207\u5272\uff0c\u5219\u5176\u88ab\u5207\u5272\u7684\u6982\u7387 (\u540c\u65f6\u4e5f\u662f\u5176\u5bf9\u7b54\u6848\u7684\u8d21\u732e) \u4e3a \\dfrac{1}{i+n} \\dfrac{1}{i+n} \u3002\u5bf9\u4e0b\u5de6\u53f3\u5982\u6cd5\u70ae\u5236\u5373\u53ef\u3002 \u9884\u5904\u7406\u9636\u4e58\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\u590d\u6742\u5ea6\u3002 (\u203b)\u62bd\u8c61\u5730\u8bf4\uff0c\u7528\u4e00\u4e2a\u8303\u56f4\u4e3a [L,R] [L,R] \u7684\u5747\u5300\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210 [l,r] [l,r] ( L\\le l\\le r\\le R L\\le l\\le r\\le R ) \u8303\u56f4\u7684\u968f\u673a\u6570 (\u82e5\u8d85\u51fa\u8303\u56f4\uff0c\u91cd\u65b0\u751f\u6210\uff0c\u76f4\u5230\u7ed3\u679c\u5728\u8303\u56f4\u5185)\uff0c\u7ed3\u679c\u8fd8\u662f\u5747\u5300\u7684\u3002\u820d\u53bb\u90e8\u5206\u4e0d\u5f71\u54cd\u4fdd\u7559\u90e8\u5206\u7684\u6982\u7387\u5206\u5e03\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\u7684\u524d\u7f00 p[1\\ldots i] p[1\\ldots i] \uff0c\u5176\u4e2d\u5df2\u5207\u5272\u7684\u4e00\u4e9b\u5207\u5272\u7ebf\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u67d0\u4e9b\u5207\u5272\u7ebf\u88ab\u5ffd\u7565\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u88ab\u5ffd\u7565\u7684\u5207\u5272\u7ebf (\u6570\u91cf\u8bb0\u505a m m ) \u4f1a\u4f7f\u540e\u9762\u6bcf\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u5e8f\u5217\u5bf9\u5e94\u7684\u6392\u5217\u6570\u5747\u7b49\u5730\u4e58\u4e0a \\binom{n-i}{m}m! \\binom{n-i}{m}m! \uff0c\u4e0d\u5f71\u54cd\u76f8\u5bf9\u6982\u7387\u3002\u56e0\u6b64\uff0c\u6bcf\u4e00\u4e2a\u524d\u7f00\u5bf9\u5e94\u7684\u6240\u6709\u6392\u5217\u7684\u76f8\u5bf9\u6982\u7387\u90fd\u6ca1\u6709\u88ab\u5f71\u54cd\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc114/e/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e5 + 19 , mod = 998244353 ; void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } int fact [ maxn ], ifact [ maxn ]; void init ( int n ){ fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ 0 ]), ifact [ n ] = ( ifact [ n ] % mod + mod ) % mod ; for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int inv ( int n ){ return ( ll ) ifact [ n ] * fact [ n - 1 ] % mod ; } int H , W , h [ 2 ], w [ 2 ]; int dp [ maxn ], ans ; int solve ( int a , int b ){ int res = 0 ; for ( int i = 1 ; i <= a ; ++ i ) res = ( res + inv ( i + b )) % mod ; return res ; } int main (){ std :: scanf ( \"%d%d%d%d%d%d\" , & H , & W , h , w , h + 1 , w + 1 ); if ( h [ 0 ] > h [ 1 ]) std :: swap ( h [ 0 ], h [ 1 ]); if ( w [ 0 ] > w [ 1 ]) std :: swap ( w [ 0 ], w [ 1 ]); init ( H + W ); int n = h [ 1 ] - h [ 0 ] + w [ 1 ] - w [ 0 ]; ans = ( 1l l + solve ( h [ 0 ] - 1 , n ) + solve ( H - h [ 1 ], n ) + solve ( w [ 0 ] - 1 , n ) + solve ( W - w [ 1 ], n ) ) % mod ; std :: printf ( \"%d \\n \" , ans ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc114/e/#_4","text":"AtCoder Regular Contest 114 E - Paper Cutting 2","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc114/f/","text":"F - Permutation Division \u00b6 \u9898\u610f \u00b6 1,2,\\ldots,N 1,2,\\ldots,N \u306e\u9806\u5217 P P \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 \u3042\u306a\u305f\u306f\u597d\u304d\u306a\u3088\u3046\u306b P P \u3092\u3061\u3087\u3046\u3069 K K \u500b\u306e\u975e\u7a7a\u306a\u9023\u7d9a\u90e8\u5206\u5217\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 maroon \u541b\u306f\u3042\u306a\u305f\u306e\u5206\u5272\u3057\u305f\u9023\u7d9a\u90e8\u5206\u5217\u3092\u4e26\u3073\u66ff\u3048\u3001\u9023\u7d50\u3057\u3066\u3001\u65b0\u3057\u304f\u9806\u5217 Q Q \u3092\u4f5c\u308a\u307e\u3059\u3002maroon \u541b\u306f Q Q \u3092\u8f9e\u66f8\u9806\u3067\u6700\u5927\u306b\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 \u3042\u306a\u305f\u306f Q Q \u304c\u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b P P \u3092\u9023\u7d9a\u90e8\u5206\u5217\u306b\u5206\u5272\u3057\u305f\u3044\u3067\u3059\u3002\u305d\u306e\u3068\u304d\u306e Q Q \u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u82e5 K \\ge P_1 K \\ge P_1 \uff0c\u5219\u5c06\u5e8f\u5217\u4ece 1,2,\\ldots,K 1,2,\\ldots,K \u5904\u5206\u5272\u5f00\u3002\u8fd9\u662f\u6700\u4f18\u7684\u65b9\u6848\uff0c\u56e0\u4e3a\u4efb\u4f55\u5176\u5b83\u7684\u65b9\u6848\u7684\u7b2c\u4e00\u4e2a\u6570\u90fd\u4f1a\u5927\u4e8e K K \u3002 \u82e5 K < P_1 K < P_1 \uff0c\u5219\u5e8f\u5217\u4f1a\u4ece P_1 P_1 \u548c 1,2,\\ldots,P_1-1 1,2,\\ldots,P_1-1 \u4e2d\u7684 K-1 K-1 \u4e2a\u6570\u5904\u5206\u5272\u5f00\u3002\u663e\u7136\uff0c Q\\ge P Q\\ge P \uff0c\u5219 Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u8d8a\u957f\uff0c Q Q \u8d8a\u5c0f\u3002\u6211\u4eec\u5e0c\u671b\u6700\u5927\u5316 Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u3002 \u8003\u8651\u4e00\u6bb5\u524d\u7f00 Q[1\\ldots i] Q[1\\ldots i] \u3002\u8fd9\u6bb5\u524d\u7f00\u662f\u7531\u6211\u4eec\u5212\u5206\u51fa\u7684 m m \u4e2a\u8fde\u7eed\u6bb5 P[s_1\\ldots s_2-1],P[s_2,s_3-1],\\ldots,P[s_m\\ldots i] P[s_1\\ldots s_2-1],P[s_2,s_3-1],\\ldots,P[s_m\\ldots i] \u62fc\u6210\u7684\uff0c\u4e14 P[s_1]>P[s_2]>\\ldots>P[s_m] P[s_1]>P[s_2]>\\ldots>P[s_m] \u3002\u7531\u4e8e\u5212\u5206\u7684\u6bb5\u8d8a\u591a\uff0c Q Q \u5c31\u8d8a\u5927\uff0c\u6211\u4eec\u5e0c\u671b\u5728 P[s_m] P[s_m] \u4e00\u5b9a\u65f6 P[i+1\\ldots N] P[i+1\\ldots N] \u7684\u5212\u5206\u6bb5\u6570\u5c3d\u91cf\u5c11\u3002 \u8bbe dp_i dp_i \u8868\u793a\u5f53 Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u5f00\u5934\u4e3a i i \u65f6\uff0c Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u81f3\u591a\u5212\u5206\u7684\u6bb5\u6570\u3002\u8fd9\u4e8b\u5b9e\u4e0a\u7b49\u4ef7\u4e8e\u6c42\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u5229\u7528\u6811\u72b6\u6570\u7ec4\u5728 O(N\\log N) O(N\\log N) \u65f6\u95f4\u5185\u89e3\u51b3\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u4f5c\u4e3a\u516c\u5171\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u5f00\u5934\u7684 i i \uff0c\u8bbe t t \u4e3a P[i+1\\ldots N] P[i+1\\ldots N] \u4e2d\u5c0f\u4e8e P[i] P[i] \u7684\u6570\u7684\u4e2a\u6570\u3002 dp_i+t\\ge K dp_i+t\\ge K \u5fc5\u987b\u6210\u7acb\uff0c\u5426\u5219\u65e0\u6cd5\u4e3a P[i+1\\ldots N] P[i+1\\ldots N] \u5206\u6bb5\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e2d\u6240\u6709\u6570\u5728 Q Q \u4e2d\u7684\u4f4d\u7f6e\u90fd\u5728 P[i] P[i] \u7684\u4f4d\u7f6e\u7684\u540e\u9762\u3002 \u5f53 dp_i+t\\ge K dp_i+t\\ge K \u6210\u7acb\u65f6\uff0c\u6211\u4eec\u53d6\u6700\u5927\u7684 j j \u6ee1\u8db3 P[j+1\\ldots N] P[j+1\\ldots N] \u4e2d\u5c0f\u4e8e P[i] P[i] \u7684\u6570\u7684\u4e2a\u6570\u4e0d\u5c11\u4e8e K-dp_i K-dp_i (\u203b)\uff0c\u7136\u540e\u5c06 P[i\\ldots j] P[i\\ldots j] \u5f52\u4e3a\u4e00\u6bb5\uff0c\u4ece\u800c\u6700\u5927\u5316 Q Q \u548c P P \u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002 P[j+1\\ldots N] P[j+1\\ldots N] \u8fd9\u4e00\u90e8\u5206\u7531\u4e8e\u53ea\u6709 K-dp_i K-dp_i \u4e2a\u5c0f\u4e8e P[i] P[i] \u7684\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5212\u5206\u51fa\u7684\u4e00\u6bb5\u7684\u5f00\u5934\uff0c\u5219\u5176\u5212\u5206\u65b9\u5f0f\u662f\u552f\u4e00\u7684\u3002 \u6240\u6709\u5408\u6cd5\u7684 i i \u4e2d\uff0c\u5bf9\u5e94\u7684 j j \u6700\u5927\u7684\u90a3\u4e2a\u5bf9\u5e94\u4e86\u6700\u957f\u7684\u516c\u5171\u524d\u7f00\uff0c\u4e3a\u6700\u4f18\u89e3\u3002\u5982\u679c\u6709\u591a\u4e2a i i \u5bf9\u5e94\u7684 j j \u4e00\u6837\u5927\uff0c\u6211\u4eec\u53d6 dp_i dp_i \u5927\u7684\u90a3\u4e2a\uff0c\u8fd9\u6837\u540e\u9762\u90e8\u5206\u5212\u5206\u7684\u6bb5\u6570 K-dp_i K-dp_i \u6700\u5c0f\u3002 (\u203b) \u5982\u679c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e i i \uff0c j j \u7684\u503c\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4ee5 O(N\\log^2 N) O(N\\log^2 N) \u7684\u590d\u6742\u5ea6\u6c42\u51fa\uff1b\u5982\u679c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e P_i P_i \uff0c j j \u7684\u503c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u500d\u589e\u4ee5 O(N\\log N) O(N\\log N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 2e5 + 19 ; int n , k , p [ maxn ], pos [ maxn ], dp [ maxn ]; struct rmq { int tr [ maxn ]; void update ( int x , int k ){ for (; x <= n ; x += x & - x ) tr [ x ] = std :: max ( tr [ x ], k ); } int query ( int x ){ int res = -1e9 ; for (; x ; x -= x & - x ) res = std :: max ( res , tr [ x ]); return res ; } } mr ; struct binary { int tr [ maxn ]; void update ( int x , int k ){ for (; x <= n ; x += x & - x ) tr [ x ] += k ; } int count ( int x ){ int res = 0 ; for (; x ; x -= x & - x ) res += tr [ x ]; return res ; } int query ( int x ){ int res = 0 , val = 0 ; for ( int i = 17 ; ~ i ; -- i ) if ( res + ( 1 << i ) <= n && val + tr [ res + ( 1 << i )] <= x ) val += tr [ res += 1 << i ]; return res ; } } mt ; std :: pair < int , int > ans ; void output ( int l , int k ){ if ( l > n ) return ; std :: vector < int > a ; for ( int i = l ; i <= n ; ++ i ) a . push_back ( i ); std :: sort ( a . begin (), a . end (), []( const int & x , const int & y ){ return p [ x ] < p [ y ]; }); static bool vist [ maxn ]; for ( int i = 0 ; i < k ; ++ i ) vist [ a [ i ]] = true ; for ( int i = k - 1 ; i >= 0 ; -- i ){ std :: printf ( \"%d \" , p [ a [ i ]]); for ( int j = a [ i ] + 1 ; j <= n && ! vist [ j ]; ++ j ) std :: printf ( \"%d \" , p [ j ]); } } int main (){ std :: scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , p + i ), pos [ p [ i ]] = i ; if ( k >= p [ 1 ]) return output ( 1 , k ), 0 ; std :: fill ( mr . tr , mr . tr + n + 1 , -1e9 ); dp [ 1 ] = 1 , mr . update ( n - p [ 1 ] + 1 , dp [ 1 ]); for ( int i = 2 ; i <= n ; ++ i ){ dp [ i ] = mr . query ( n - p [ i ] + 1 ) + 1 ; mr . update ( n - p [ i ] + 1 , dp [ i ]); } for ( int i = 1 ; i <= n ; ++ i ){ int node = pos [ i ]; mt . update ( node , 1 ); if ( dp [ node ] + i - mt . count ( node ) < k ) continue ; ans = std :: max ( ans , std :: make_pair ( mt . query ( dp [ node ] + i - k ), dp [ node ] - k )); } ans . second = - ans . second ; for ( int i = 1 ; i <= ans . first ; ++ i ) std :: printf ( \"%d \" , p [ i ]); output ( ans . first + 1 , ans . second ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 114 F - Permutation Division","title":"F - Permutation Division"},{"location":"problem/atcoder/arc114/f/#f-permutation-division","text":"","title":"F - Permutation Division"},{"location":"problem/atcoder/arc114/f/#_1","text":"1,2,\\ldots,N 1,2,\\ldots,N \u306e\u9806\u5217 P P \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 \u3042\u306a\u305f\u306f\u597d\u304d\u306a\u3088\u3046\u306b P P \u3092\u3061\u3087\u3046\u3069 K K \u500b\u306e\u975e\u7a7a\u306a\u9023\u7d9a\u90e8\u5206\u5217\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 maroon \u541b\u306f\u3042\u306a\u305f\u306e\u5206\u5272\u3057\u305f\u9023\u7d9a\u90e8\u5206\u5217\u3092\u4e26\u3073\u66ff\u3048\u3001\u9023\u7d50\u3057\u3066\u3001\u65b0\u3057\u304f\u9806\u5217 Q Q \u3092\u4f5c\u308a\u307e\u3059\u3002maroon \u541b\u306f Q Q \u3092\u8f9e\u66f8\u9806\u3067\u6700\u5927\u306b\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 \u3042\u306a\u305f\u306f Q Q \u304c\u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b P P \u3092\u9023\u7d9a\u90e8\u5206\u5217\u306b\u5206\u5272\u3057\u305f\u3044\u3067\u3059\u3002\u305d\u306e\u3068\u304d\u306e Q Q \u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc114/f/#_2","text":"\u82e5 K \\ge P_1 K \\ge P_1 \uff0c\u5219\u5c06\u5e8f\u5217\u4ece 1,2,\\ldots,K 1,2,\\ldots,K \u5904\u5206\u5272\u5f00\u3002\u8fd9\u662f\u6700\u4f18\u7684\u65b9\u6848\uff0c\u56e0\u4e3a\u4efb\u4f55\u5176\u5b83\u7684\u65b9\u6848\u7684\u7b2c\u4e00\u4e2a\u6570\u90fd\u4f1a\u5927\u4e8e K K \u3002 \u82e5 K < P_1 K < P_1 \uff0c\u5219\u5e8f\u5217\u4f1a\u4ece P_1 P_1 \u548c 1,2,\\ldots,P_1-1 1,2,\\ldots,P_1-1 \u4e2d\u7684 K-1 K-1 \u4e2a\u6570\u5904\u5206\u5272\u5f00\u3002\u663e\u7136\uff0c Q\\ge P Q\\ge P \uff0c\u5219 Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u8d8a\u957f\uff0c Q Q \u8d8a\u5c0f\u3002\u6211\u4eec\u5e0c\u671b\u6700\u5927\u5316 Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u3002 \u8003\u8651\u4e00\u6bb5\u524d\u7f00 Q[1\\ldots i] Q[1\\ldots i] \u3002\u8fd9\u6bb5\u524d\u7f00\u662f\u7531\u6211\u4eec\u5212\u5206\u51fa\u7684 m m \u4e2a\u8fde\u7eed\u6bb5 P[s_1\\ldots s_2-1],P[s_2,s_3-1],\\ldots,P[s_m\\ldots i] P[s_1\\ldots s_2-1],P[s_2,s_3-1],\\ldots,P[s_m\\ldots i] \u62fc\u6210\u7684\uff0c\u4e14 P[s_1]>P[s_2]>\\ldots>P[s_m] P[s_1]>P[s_2]>\\ldots>P[s_m] \u3002\u7531\u4e8e\u5212\u5206\u7684\u6bb5\u8d8a\u591a\uff0c Q Q \u5c31\u8d8a\u5927\uff0c\u6211\u4eec\u5e0c\u671b\u5728 P[s_m] P[s_m] \u4e00\u5b9a\u65f6 P[i+1\\ldots N] P[i+1\\ldots N] \u7684\u5212\u5206\u6bb5\u6570\u5c3d\u91cf\u5c11\u3002 \u8bbe dp_i dp_i \u8868\u793a\u5f53 Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u5f00\u5934\u4e3a i i \u65f6\uff0c Q Q \u548c P P \u7684\u516c\u5171\u524d\u7f00\u81f3\u591a\u5212\u5206\u7684\u6bb5\u6570\u3002\u8fd9\u4e8b\u5b9e\u4e0a\u7b49\u4ef7\u4e8e\u6c42\u6700\u957f\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u5229\u7528\u6811\u72b6\u6570\u7ec4\u5728 O(N\\log N) O(N\\log N) \u65f6\u95f4\u5185\u89e3\u51b3\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u4f5c\u4e3a\u516c\u5171\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u5f00\u5934\u7684 i i \uff0c\u8bbe t t \u4e3a P[i+1\\ldots N] P[i+1\\ldots N] \u4e2d\u5c0f\u4e8e P[i] P[i] \u7684\u6570\u7684\u4e2a\u6570\u3002 dp_i+t\\ge K dp_i+t\\ge K \u5fc5\u987b\u6210\u7acb\uff0c\u5426\u5219\u65e0\u6cd5\u4e3a P[i+1\\ldots N] P[i+1\\ldots N] \u5206\u6bb5\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e2d\u6240\u6709\u6570\u5728 Q Q \u4e2d\u7684\u4f4d\u7f6e\u90fd\u5728 P[i] P[i] \u7684\u4f4d\u7f6e\u7684\u540e\u9762\u3002 \u5f53 dp_i+t\\ge K dp_i+t\\ge K \u6210\u7acb\u65f6\uff0c\u6211\u4eec\u53d6\u6700\u5927\u7684 j j \u6ee1\u8db3 P[j+1\\ldots N] P[j+1\\ldots N] \u4e2d\u5c0f\u4e8e P[i] P[i] \u7684\u6570\u7684\u4e2a\u6570\u4e0d\u5c11\u4e8e K-dp_i K-dp_i (\u203b)\uff0c\u7136\u540e\u5c06 P[i\\ldots j] P[i\\ldots j] \u5f52\u4e3a\u4e00\u6bb5\uff0c\u4ece\u800c\u6700\u5927\u5316 Q Q \u548c P P \u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002 P[j+1\\ldots N] P[j+1\\ldots N] \u8fd9\u4e00\u90e8\u5206\u7531\u4e8e\u53ea\u6709 K-dp_i K-dp_i \u4e2a\u5c0f\u4e8e P[i] P[i] \u7684\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5212\u5206\u51fa\u7684\u4e00\u6bb5\u7684\u5f00\u5934\uff0c\u5219\u5176\u5212\u5206\u65b9\u5f0f\u662f\u552f\u4e00\u7684\u3002 \u6240\u6709\u5408\u6cd5\u7684 i i \u4e2d\uff0c\u5bf9\u5e94\u7684 j j \u6700\u5927\u7684\u90a3\u4e2a\u5bf9\u5e94\u4e86\u6700\u957f\u7684\u516c\u5171\u524d\u7f00\uff0c\u4e3a\u6700\u4f18\u89e3\u3002\u5982\u679c\u6709\u591a\u4e2a i i \u5bf9\u5e94\u7684 j j \u4e00\u6837\u5927\uff0c\u6211\u4eec\u53d6 dp_i dp_i \u5927\u7684\u90a3\u4e2a\uff0c\u8fd9\u6837\u540e\u9762\u90e8\u5206\u5212\u5206\u7684\u6bb5\u6570 K-dp_i K-dp_i \u6700\u5c0f\u3002 (\u203b) \u5982\u679c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e i i \uff0c j j \u7684\u503c\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4ee5 O(N\\log^2 N) O(N\\log^2 N) \u7684\u590d\u6742\u5ea6\u6c42\u51fa\uff1b\u5982\u679c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e P_i P_i \uff0c j j \u7684\u503c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u500d\u589e\u4ee5 O(N\\log N) O(N\\log N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u51fa\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc114/f/#_3","text":"#include <bits/stdc++.h> const int maxn = 2e5 + 19 ; int n , k , p [ maxn ], pos [ maxn ], dp [ maxn ]; struct rmq { int tr [ maxn ]; void update ( int x , int k ){ for (; x <= n ; x += x & - x ) tr [ x ] = std :: max ( tr [ x ], k ); } int query ( int x ){ int res = -1e9 ; for (; x ; x -= x & - x ) res = std :: max ( res , tr [ x ]); return res ; } } mr ; struct binary { int tr [ maxn ]; void update ( int x , int k ){ for (; x <= n ; x += x & - x ) tr [ x ] += k ; } int count ( int x ){ int res = 0 ; for (; x ; x -= x & - x ) res += tr [ x ]; return res ; } int query ( int x ){ int res = 0 , val = 0 ; for ( int i = 17 ; ~ i ; -- i ) if ( res + ( 1 << i ) <= n && val + tr [ res + ( 1 << i )] <= x ) val += tr [ res += 1 << i ]; return res ; } } mt ; std :: pair < int , int > ans ; void output ( int l , int k ){ if ( l > n ) return ; std :: vector < int > a ; for ( int i = l ; i <= n ; ++ i ) a . push_back ( i ); std :: sort ( a . begin (), a . end (), []( const int & x , const int & y ){ return p [ x ] < p [ y ]; }); static bool vist [ maxn ]; for ( int i = 0 ; i < k ; ++ i ) vist [ a [ i ]] = true ; for ( int i = k - 1 ; i >= 0 ; -- i ){ std :: printf ( \"%d \" , p [ a [ i ]]); for ( int j = a [ i ] + 1 ; j <= n && ! vist [ j ]; ++ j ) std :: printf ( \"%d \" , p [ j ]); } } int main (){ std :: scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , p + i ), pos [ p [ i ]] = i ; if ( k >= p [ 1 ]) return output ( 1 , k ), 0 ; std :: fill ( mr . tr , mr . tr + n + 1 , -1e9 ); dp [ 1 ] = 1 , mr . update ( n - p [ 1 ] + 1 , dp [ 1 ]); for ( int i = 2 ; i <= n ; ++ i ){ dp [ i ] = mr . query ( n - p [ i ] + 1 ) + 1 ; mr . update ( n - p [ i ] + 1 , dp [ i ]); } for ( int i = 1 ; i <= n ; ++ i ){ int node = pos [ i ]; mt . update ( node , 1 ); if ( dp [ node ] + i - mt . count ( node ) < k ) continue ; ans = std :: max ( ans , std :: make_pair ( mt . query ( dp [ node ] + i - k ), dp [ node ] - k )); } ans . second = - ans . second ; for ( int i = 1 ; i <= ans . first ; ++ i ) std :: printf ( \"%d \" , p [ i ]); output ( ans . first + 1 , ans . second ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc114/f/#_4","text":"AtCoder Regular Contest 114 F - Permutation Division","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc115/a/","text":"A - Two Choices \u00b6 \u9898\u610f \u00b6 0 0 \u304b 1 1 \u3067\u7b54\u3048\u308b\u554f\u984c M M \u554f\u304b\u3089\u306a\u308b\u30c6\u30b9\u30c8\u304c\u3042\u308a\u3001\u3053\u308c\u306b N N \u4eba\u306e\u751f\u5f92\u304c\u53d6\u308a\u7d44\u307f\u307e\u3057\u305f\u3002 N N \u500b\u306e\u9577\u3055 M M \u306e\u6587\u5b57\u5217 S_1,S_2,\\ldots,S_N S_1,S_2,\\ldots,S_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 S_i S_i \u306e k k \u6587\u5b57\u76ee\u306f 0 0 \u3068 1 1 \u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308a\u3001 i i \u756a\u76ee\u306e\u751f\u5f92\u306e k k \u554f\u76ee\u306b\u5bfe\u3059\u308b\u89e3\u7b54\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u5404\u751f\u5f92\u306e\u5404\u554f\u984c\u306b\u5bfe\u3059\u308b\u89e3\u7b54\u306f\u5224\u660e\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5404\u554f\u984c\u306e\u6b63\u89e3\u304c 0 0 \u3068 1 1 \u306e\u3069\u3061\u3089\u3067\u3042\u308b\u304b\u306f\u307e\u3060\u5224\u660e\u3057\u3066\u3044\u307e\u305b\u3093\u3002 1\\le i<j\\le N 1\\le i<j\\le N \u3092\u6e80\u305f\u3059\u7d44 (i,j) (i,j) \u3067\u3042\u3063\u3066\u3001\u751f\u5f92 i i \u3068\u751f\u5f92 j j \u306e\u6b63\u89e3\u3057\u305f\u554f\u984c\u306e\u6570\u304c\u7b49\u3057\u3044\u53ef\u80fd\u6027\u304c\u306a\u3044\u3088\u3046\u306a\u3082\u306e\u306f\u3044\u304f\u3064\u3042\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 i i \u4e0e j j \u4e0d\u53ef\u80fd\u7b54\u5bf9\u540c\u6837\u591a\u7684\u9898\uff0c\u5f53\u4e14\u4ec5\u5f53 S_i S_i \u4e0e S_j S_j \u7684\u5f02\u6216\u548c\u7684 \\text{popcount} \\text{popcount} \u4e3a\u5947\u6570\u3002 \u7531\u4e8e \\operatorname{popcount}(S_i\\oplus S_j)=\\operatorname{popcount}(S_i)+\\operatorname{popcount}(S_j)-2\\operatorname{popcount}(S_i\\& S_j) \\operatorname{popcount}(S_i\\oplus S_j)=\\operatorname{popcount}(S_i)+\\operatorname{popcount}(S_j)-2\\operatorname{popcount}(S_i\\& S_j) \uff0c\u5219 \\operatorname{popcount}({S_i\\oplus S_j}) \\operatorname{popcount}({S_i\\oplus S_j}) \u7684 parity \u4e0e \\operatorname{popcount}({S_i})+\\operatorname{popcount}({S_j}) \\operatorname{popcount}({S_i})+\\operatorname{popcount}({S_j}) \u7684 parity \u76f8\u540c\uff0c\u53ea\u9700\u8981\u5206\u522b\u8bb0\u5f55 \\text{popcount} \\text{popcount} \u4e3a\u5947\u3001\u5076\u7684 S S \u7684\u4e2a\u6570\uff0c\u76f8\u4e58\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> int main (){ int a = 0 , b = 0 ; int n , m ; std :: scanf ( \"%d%d\" , & n , & m ); while ( n -- ){ bool flag = false ; static char s [ 29 ]; std :: scanf ( \"%s\" , s ); for ( int i = 0 ; i < m ; ++ i ) if ( s [ i ] == '0' ) flag ^= 1 ; if ( flag ) ++ a ; else ++ b ; } std :: printf ( \"%lld \\n \" , ( long long int ) a * b ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 115 A - Two Choices","title":"A - Two Choices"},{"location":"problem/atcoder/arc115/a/#a-two-choices","text":"","title":"A - Two Choices"},{"location":"problem/atcoder/arc115/a/#_1","text":"0 0 \u304b 1 1 \u3067\u7b54\u3048\u308b\u554f\u984c M M \u554f\u304b\u3089\u306a\u308b\u30c6\u30b9\u30c8\u304c\u3042\u308a\u3001\u3053\u308c\u306b N N \u4eba\u306e\u751f\u5f92\u304c\u53d6\u308a\u7d44\u307f\u307e\u3057\u305f\u3002 N N \u500b\u306e\u9577\u3055 M M \u306e\u6587\u5b57\u5217 S_1,S_2,\\ldots,S_N S_1,S_2,\\ldots,S_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 S_i S_i \u306e k k \u6587\u5b57\u76ee\u306f 0 0 \u3068 1 1 \u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308a\u3001 i i \u756a\u76ee\u306e\u751f\u5f92\u306e k k \u554f\u76ee\u306b\u5bfe\u3059\u308b\u89e3\u7b54\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u5404\u751f\u5f92\u306e\u5404\u554f\u984c\u306b\u5bfe\u3059\u308b\u89e3\u7b54\u306f\u5224\u660e\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5404\u554f\u984c\u306e\u6b63\u89e3\u304c 0 0 \u3068 1 1 \u306e\u3069\u3061\u3089\u3067\u3042\u308b\u304b\u306f\u307e\u3060\u5224\u660e\u3057\u3066\u3044\u307e\u305b\u3093\u3002 1\\le i<j\\le N 1\\le i<j\\le N \u3092\u6e80\u305f\u3059\u7d44 (i,j) (i,j) \u3067\u3042\u3063\u3066\u3001\u751f\u5f92 i i \u3068\u751f\u5f92 j j \u306e\u6b63\u89e3\u3057\u305f\u554f\u984c\u306e\u6570\u304c\u7b49\u3057\u3044\u53ef\u80fd\u6027\u304c\u306a\u3044\u3088\u3046\u306a\u3082\u306e\u306f\u3044\u304f\u3064\u3042\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc115/a/#_2","text":"i i \u4e0e j j \u4e0d\u53ef\u80fd\u7b54\u5bf9\u540c\u6837\u591a\u7684\u9898\uff0c\u5f53\u4e14\u4ec5\u5f53 S_i S_i \u4e0e S_j S_j \u7684\u5f02\u6216\u548c\u7684 \\text{popcount} \\text{popcount} \u4e3a\u5947\u6570\u3002 \u7531\u4e8e \\operatorname{popcount}(S_i\\oplus S_j)=\\operatorname{popcount}(S_i)+\\operatorname{popcount}(S_j)-2\\operatorname{popcount}(S_i\\& S_j) \\operatorname{popcount}(S_i\\oplus S_j)=\\operatorname{popcount}(S_i)+\\operatorname{popcount}(S_j)-2\\operatorname{popcount}(S_i\\& S_j) \uff0c\u5219 \\operatorname{popcount}({S_i\\oplus S_j}) \\operatorname{popcount}({S_i\\oplus S_j}) \u7684 parity \u4e0e \\operatorname{popcount}({S_i})+\\operatorname{popcount}({S_j}) \\operatorname{popcount}({S_i})+\\operatorname{popcount}({S_j}) \u7684 parity \u76f8\u540c\uff0c\u53ea\u9700\u8981\u5206\u522b\u8bb0\u5f55 \\text{popcount} \\text{popcount} \u4e3a\u5947\u3001\u5076\u7684 S S \u7684\u4e2a\u6570\uff0c\u76f8\u4e58\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc115/a/#_3","text":"#include <bits/stdc++.h> int main (){ int a = 0 , b = 0 ; int n , m ; std :: scanf ( \"%d%d\" , & n , & m ); while ( n -- ){ bool flag = false ; static char s [ 29 ]; std :: scanf ( \"%s\" , s ); for ( int i = 0 ; i < m ; ++ i ) if ( s [ i ] == '0' ) flag ^= 1 ; if ( flag ) ++ a ; else ++ b ; } std :: printf ( \"%lld \\n \" , ( long long int ) a * b ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc115/a/#_4","text":"AtCoder Regular Contest 115 A - Two Choices","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc115/b/","text":"B - Plus Matrix \u00b6 \u9898\u610f \u00b6 N N \u884c N N \u5217\u306e\u975e\u8ca0\u6574\u6570\u3092\u6210\u5206\u3068\u3059\u308b\u884c\u5217 C C \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u3059\u3079\u3066\u306e (i,j) (i,j) \u306b\u3064\u3044\u3066 C_{i,j}=A_i+B_j C_{i,j}=A_i+B_j \u3092\u6e80\u305f\u3059\u3088\u3046\u306a\u975e\u8ca0\u6574\u6570\u5217 A_1,A_2,\\ldots,A_N A_1,A_2,\\ldots,A_N \u3068 B_1,B_2,\\ldots,B_N B_1,B_2,\\ldots,B_N \u306e\u7d44\u304c\u5b58\u5728\u3059\u308b\u304b\u5224\u5b9a\u3057\u3001\u5b58\u5728\u3059\u308b\u306a\u3089\u4e00\u3064\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u9996\u5148\uff0c A A \u7684\u5dee\u5206\u548c C C \u6bcf\u4e00\u884c\u7684\u5dee\u5206\u5fc5\u987b\u76f8\u7b49\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u52a0\u4e0a A A \u53ea\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684 A A (\u66f4\u5c0f\u7684 A A \u66f4\u5bb9\u6613\u8ba9 B B \u6ee1\u8db3\u975e\u8d1f\u7684\u9650\u5236)\u3002\u4e4b\u540e\u6839\u636e\u5b9a\u4e49\u6c42\u51fa B B \u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 5e2 + 19 ; int n , c [ maxn ][ maxn ], a [ maxn ], b [ maxn ]; int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) std :: scanf ( \"%d\" , c [ i ] + j ); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = c [ i ][ 1 ]; int min = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) min = std :: min ( min , a [ i ]); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] -= min ; for ( int i = 1 ; i <= n ; ++ i ){ b [ i ] = c [ 1 ][ i ] - a [ 1 ]; if ( b [ i ] < 0 ){ std :: puts ( \"No\" ); return 0 ; } } for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) if ( c [ i ][ j ] != a [ i ] + b [ j ]){ std :: puts ( \"No\" ); return 0 ; } std :: puts ( \"Yes\" ); for ( int i = 1 ; i <= n ; ++ i ) std :: printf ( \"%d \" , a [ i ]); std :: puts ( \"\" ); for ( int i = 1 ; i <= n ; ++ i ) std :: printf ( \"%d \" , b [ i ]); std :: puts ( \"\" ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 115 B - Plus Matrix","title":"B - Plus Matrix"},{"location":"problem/atcoder/arc115/b/#b-plus-matrix","text":"","title":"B - Plus Matrix"},{"location":"problem/atcoder/arc115/b/#_1","text":"N N \u884c N N \u5217\u306e\u975e\u8ca0\u6574\u6570\u3092\u6210\u5206\u3068\u3059\u308b\u884c\u5217 C C \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u3059\u3079\u3066\u306e (i,j) (i,j) \u306b\u3064\u3044\u3066 C_{i,j}=A_i+B_j C_{i,j}=A_i+B_j \u3092\u6e80\u305f\u3059\u3088\u3046\u306a\u975e\u8ca0\u6574\u6570\u5217 A_1,A_2,\\ldots,A_N A_1,A_2,\\ldots,A_N \u3068 B_1,B_2,\\ldots,B_N B_1,B_2,\\ldots,B_N \u306e\u7d44\u304c\u5b58\u5728\u3059\u308b\u304b\u5224\u5b9a\u3057\u3001\u5b58\u5728\u3059\u308b\u306a\u3089\u4e00\u3064\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc115/b/#_2","text":"\u9996\u5148\uff0c A A \u7684\u5dee\u5206\u548c C C \u6bcf\u4e00\u884c\u7684\u5dee\u5206\u5fc5\u987b\u76f8\u7b49\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u52a0\u4e0a A A \u53ea\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684 A A (\u66f4\u5c0f\u7684 A A \u66f4\u5bb9\u6613\u8ba9 B B \u6ee1\u8db3\u975e\u8d1f\u7684\u9650\u5236)\u3002\u4e4b\u540e\u6839\u636e\u5b9a\u4e49\u6c42\u51fa B B \u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc115/b/#_3","text":"#include <bits/stdc++.h> const int maxn = 5e2 + 19 ; int n , c [ maxn ][ maxn ], a [ maxn ], b [ maxn ]; int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) std :: scanf ( \"%d\" , c [ i ] + j ); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = c [ i ][ 1 ]; int min = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) min = std :: min ( min , a [ i ]); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] -= min ; for ( int i = 1 ; i <= n ; ++ i ){ b [ i ] = c [ 1 ][ i ] - a [ 1 ]; if ( b [ i ] < 0 ){ std :: puts ( \"No\" ); return 0 ; } } for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) if ( c [ i ][ j ] != a [ i ] + b [ j ]){ std :: puts ( \"No\" ); return 0 ; } std :: puts ( \"Yes\" ); for ( int i = 1 ; i <= n ; ++ i ) std :: printf ( \"%d \" , a [ i ]); std :: puts ( \"\" ); for ( int i = 1 ; i <= n ; ++ i ) std :: printf ( \"%d \" , b [ i ]); std :: puts ( \"\" ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc115/b/#_4","text":"AtCoder Regular Contest 115 B - Plus Matrix","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc115/c/","text":"C - N Coloring \u00b6 \u9898\u610f \u00b6 \u6574\u6570 N N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u9577\u3055 N N \u306e\u6b63\u306e\u6574\u6570\u306e\u5217 A_1,A_2,\\ldots,A_N A_1,A_2,\\ldots,A_N \u3067\u3042\u3063\u3066\u3001\u6570\u5217\u306b\u73fe\u308c\u308b\u5024\u306e\u6700\u5927\u5024\u304c\u6700\u5c0f\u306b\u306a\u308b\u3082\u306e\u3092\u4e00\u3064\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 i i \u304c j j \u306e\u7d04\u6570\u306a\u3089\u3070\u3001 A_i\\neq A_j A_i\\neq A_j ( 1\\le i<j\\le N 1\\le i<j\\le N ) \u89e3\u6790 \u00b6 \u4ee4 f(n) f(n) \u8868\u793a n n \u7684\u6240\u6709\u7d20\u56e0\u6570\u7684\u6307\u6570\u548c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4efb\u4f55 i\\mid j\\land i\\neq j i\\mid j\\land i\\neq j \uff0c\u90fd\u6709 f(j)>f(i) f(j)>f(i) \uff0c\u5219 a_i=f(i)+1 a_i=f(i)+1 \u662f\u4e00\u7ec4\u5408\u6cd5\u7684\u6784\u9020\u3002\u5728\u8fd9\u6837\u7684\u6784\u9020\u4e2d\u51fa\u73b0\u7684\u6700\u5927\u6570\u4e3a \\lfloor\\log_2N\\rfloor+1 \\lfloor\\log_2N\\rfloor+1 \u3002\u7531\u4e8e 2,4,8,16\\ldots 2,4,8,16\\ldots \u7b49 2 2 \u7684\u6574\u6b21\u5e42\u90fd\u8981\u5206\u914d\u4e0d\u540c\u7684\u6570\uff0c\u5219\u4e5f\u4e0d\u5b58\u5728\u6bd4\u8be5\u6784\u9020\u66f4\u4f18\u7684\u89e3\u3002 \u7531\u4e8e f(i)=\\max\\limits_{d\\mid i}f(d)+1 f(i)=\\max\\limits_{d\\mid i}f(d)+1 \uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6bcf\u4e2a i i \u53bb\u66f4\u65b0 i i \u7684\u500d\u6570\u7684 f f \u7684\u503c\uff0c\u603b\u590d\u6742\u5ea6\u4e3a O(\\frac{N}{1}+\\frac{N}{2}+\\frac N3+\\ldots)=O(N\\log N) O(\\frac{N}{1}+\\frac{N}{2}+\\frac N3+\\ldots)=O(N\\log N) \u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> int main (){ int N ; std :: scanf ( \"%d\" , & N ); std :: vector < int > f ( N + 1 ); for ( int i = 1 ; i <= N ; ++ i ){ ++ f [ i ]; std :: printf ( \"%d \" , f [ i ]); for ( int j = i ; j <= N ; j += i ) f [ j ] = std :: max ( f [ j ], f [ i ]); } return 0 ; } \u6765\u6e90 \u00b6 AtCoder Regular Contest 115 C - N Coloring","title":"C - N Coloring"},{"location":"problem/atcoder/arc115/c/#c-n-coloring","text":"","title":"C - N Coloring"},{"location":"problem/atcoder/arc115/c/#_1","text":"\u6574\u6570 N N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u9577\u3055 N N \u306e\u6b63\u306e\u6574\u6570\u306e\u5217 A_1,A_2,\\ldots,A_N A_1,A_2,\\ldots,A_N \u3067\u3042\u3063\u3066\u3001\u6570\u5217\u306b\u73fe\u308c\u308b\u5024\u306e\u6700\u5927\u5024\u304c\u6700\u5c0f\u306b\u306a\u308b\u3082\u306e\u3092\u4e00\u3064\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 i i \u304c j j \u306e\u7d04\u6570\u306a\u3089\u3070\u3001 A_i\\neq A_j A_i\\neq A_j ( 1\\le i<j\\le N 1\\le i<j\\le N )","title":"\u9898\u610f"},{"location":"problem/atcoder/arc115/c/#_2","text":"\u4ee4 f(n) f(n) \u8868\u793a n n \u7684\u6240\u6709\u7d20\u56e0\u6570\u7684\u6307\u6570\u548c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4efb\u4f55 i\\mid j\\land i\\neq j i\\mid j\\land i\\neq j \uff0c\u90fd\u6709 f(j)>f(i) f(j)>f(i) \uff0c\u5219 a_i=f(i)+1 a_i=f(i)+1 \u662f\u4e00\u7ec4\u5408\u6cd5\u7684\u6784\u9020\u3002\u5728\u8fd9\u6837\u7684\u6784\u9020\u4e2d\u51fa\u73b0\u7684\u6700\u5927\u6570\u4e3a \\lfloor\\log_2N\\rfloor+1 \\lfloor\\log_2N\\rfloor+1 \u3002\u7531\u4e8e 2,4,8,16\\ldots 2,4,8,16\\ldots \u7b49 2 2 \u7684\u6574\u6b21\u5e42\u90fd\u8981\u5206\u914d\u4e0d\u540c\u7684\u6570\uff0c\u5219\u4e5f\u4e0d\u5b58\u5728\u6bd4\u8be5\u6784\u9020\u66f4\u4f18\u7684\u89e3\u3002 \u7531\u4e8e f(i)=\\max\\limits_{d\\mid i}f(d)+1 f(i)=\\max\\limits_{d\\mid i}f(d)+1 \uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6bcf\u4e2a i i \u53bb\u66f4\u65b0 i i \u7684\u500d\u6570\u7684 f f \u7684\u503c\uff0c\u603b\u590d\u6742\u5ea6\u4e3a O(\\frac{N}{1}+\\frac{N}{2}+\\frac N3+\\ldots)=O(N\\log N) O(\\frac{N}{1}+\\frac{N}{2}+\\frac N3+\\ldots)=O(N\\log N) \u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc115/c/#_3","text":"#include <bits/stdc++.h> int main (){ int N ; std :: scanf ( \"%d\" , & N ); std :: vector < int > f ( N + 1 ); for ( int i = 1 ; i <= N ; ++ i ){ ++ f [ i ]; std :: printf ( \"%d \" , f [ i ]); for ( int j = i ; j <= N ; j += i ) f [ j ] = std :: max ( f [ j ], f [ i ]); } return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc115/c/#_4","text":"AtCoder Regular Contest 115 C - N Coloring","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc115/d/","text":"D - Odd Degree \u00b6 \u9898\u610f \u00b6 N N \u9802\u70b9 M M \u8fba\u306e\u5358\u7d14\u7121\u5411\u30b0\u30e9\u30d5\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9802\u70b9\u306b\u306f 1,\\ldots,N 1,\\ldots,N \u306e\u756a\u53f7\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002 i i \u756a\u76ee\u306e\u8fba\u306f\u9802\u70b9 A_i A_i \u3068\u9802\u70b9 B_i B_i \u3092\u7d50\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u306e\u30b0\u30e9\u30d5\u306e\u5168\u57df\u90e8\u5206\u30b0\u30e9\u30d5(\u203b)\u3067\u3042\u3063\u3066\u3001\u6b21\u6570\u304c\u5947\u6570\u306e\u9802\u70b9\u304c\u3061\u3087\u3046\u3069 K K \u500b\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\u3092\u3059\u3079\u3066\u306e K K ( 0\u2264K\u2264N 0\u2264K\u2264N ) \u306b\u3064\u3044\u3066\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3060\u3057\u7b54\u3048\u306f\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 (\u203b) G G \u306e\u90e8\u5206\u30b0\u30e9\u30d5 H H \u304c G G \u306e\u5168\u57df\u90e8\u5206\u30b0\u30e9\u30d5\u3067\u3042\u308b\u3068\u306f\u3001 H H \u306e\u9802\u70b9\u96c6\u5408\u304c G G \u306e\u9802\u70b9\u96c6\u5408\u3068\u7b49\u3057\u304f\u3001 H H \u306e\u8fba\u96c6\u5408\u304c G G \u306e\u8fba\u96c6\u5408\u306e\u90e8\u5206\u96c6\u5408\u3067\u3042\u308b\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002 \u89e3\u6790 \u00b6 \u9996\u5148\uff0c\u7531\u4e8e\u6bcf\u4e00\u6761\u8fb9\u90fd\u5bf9\u5e94 2 2 \u5ea6\u6570\uff0c\u6240\u6709\u70b9\u7684\u5ea6\u6570\u548c\u4e00\u5b9a\u662f\u5076\u6570\uff0c\u5373\u4e0d\u5b58\u5728\u542b\u6709\u5947\u6570\u4e2a\u5ea6\u6570\u4e3a\u5947\u6570\u8282\u70b9\u7684\u56fe\u3002 \u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u82e5\u6307\u5b9a\u4e86\u54ea\u4e9b\u70b9\u7684\u5ea6\u6570\u4e3a\u5947\u6570 (\u8fd9\u4e9b\u70b9\u7684\u6570\u91cf\u4e3a\u5076\u6570)\uff0c\u800c\u5176\u4ed6\u7684\u70b9\u5ea6\u6570\u4e3a\u5076\u6570\uff0c\u90a3\u8be5\u6811\u603b\u662f\u5b58\u5728\u6070\u597d 1 1 \u4e2a\u6ee1\u8db3\u8fd9\u6837\u6761\u4ef6\u7684\u751f\u6210\u5b50\u56fe\u3002\u56e0\u4e3a\u90a3\u4e9b\u4e0e\u53f6\u5b50\u8282\u70b9\u76f8\u90bb\u7684\u8fb9\u662f\u5426\u4fdd\u7559\u662f\u786e\u5b9a\u7684\uff0c\u8ba1\u7b97\u5b8c\u5b83\u4eec\u5bf9\u975e\u53f6\u8282\u70b9\u7684\u5f71\u54cd\u540e\u5c06\u5176\u548c\u53f6\u5b50\u7ed3\u70b9\u5220\u53bb\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u95ee\u9898\u7684\u5b50\u95ee\u9898\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4fdd\u7559\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u5176\u4f59\u7684\u8fb9\u4efb\u610f\u9009\uff0c\u4e3a\u4e86\u5f97\u5230\u6307\u5b9a\u7684\u5947\u6570\u5ea6\u6570\u8282\u70b9\u96c6\uff0c\u751f\u6210\u6811\u7684\u9009\u6cd5\u662f\u552f\u4e00\u7684\u3002\u6545\u4e00\u4e2a\u5927\u5c0f\u4e3a N N \uff0c\u5305\u542b M M \u6761\u8fb9\u7684\u8fde\u901a\u5757\u7684\u5305\u542b\u6070\u597d K K ( 2\\mid K 2\\mid K ) \u4e2a\u5947\u5ea6\u6570\u8282\u70b9\u7684\u751f\u6210\u5b50\u56fe\u6570\u4e3a 2^{M-N+1}\\binom{N}{K} 2^{M-N+1}\\binom{N}{K} \u3002 \u5bf9\u4e8e\u542b\u591a\u4e2a\u8fde\u901a\u5757\u7684\u56fe\uff0c\u5c06\u5404\u4e2a\u8fde\u901a\u5757\u7684\u7b54\u6848\u5377\u79ef\u5373\u53ef\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e3 + 19 , mod = 998244353 ; std :: vector < int > operator * ( const std :: vector < int > & a , const std :: vector < int > & b ){ std :: vector < int > res ( a . size () + b . size () - 1 ); for ( int i = 0 ; i < ( int ) a . size (); ++ i ) for ( int j = 0 ; j < ( int ) b . size (); ++ j ) res [ i + j ] = ( res [ i + j ] + ( ll ) a [ i ] * b [ j ]) % mod ; return res ; } int n , m ; int fa [ maxn ], size [ maxn ], deg [ maxn ]; int find ( int node ){ return fa [ node ] == node ? node : fa [ node ] = find ( fa [ node ]); } void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } int fact [ maxn ], ifact [ maxn ], p2 [ maxn ]; void init ( void ){ p2 [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; ++ i ) p2 [ i ] = ( p2 [ i - 1 ] + p2 [ i - 1 ]) % mod ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ 0 ]), ifact [ n ] = ( ifact [ n ] % mod + mod ) % mod ; for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ std :: scanf ( \"%d%d\" , & n , & m ); std :: iota ( fa , fa + 1 + n , 0 ); std :: fill ( size + 1 , size + 1 + n , 1 ); init (); for ( int i = 1 , u , v ; i <= m ; ++ i ){ std :: scanf ( \"%d%d\" , & u , & v ); if ( find ( u ) == find ( v )) ++ deg [ find ( u )]; else { size [ find ( v )] += size [ find ( u )]; deg [ find ( v )] += deg [ find ( u )] + 1 ; fa [ find ( u )] = find ( v ); } } std :: vector < int > ans ( 1 , 1 ); for ( int i = 1 ; i <= n ; ++ i ) if ( find ( i ) == i ){ static std :: vector < int > tmp ; tmp . clear (); tmp . resize ( size [ i ] / 2 + 1 ); for ( int j = 0 ; j < ( int ) tmp . size (); ++ j ) tmp [ j ] = ( ll ) binom ( size [ i ], j * 2 ) * p2 [ deg [ i ] - size [ i ] + 1 ] % mod ; ans = ans * tmp ; } for ( int i = 0 ; i <= n ; ++ i ) if (( i & 1 ) || ( i >> 1 ) >= ( int ) ans . size ()) std :: puts ( \"0\" ); else std :: printf ( \"%d \\n \" , ans [ i >> 1 ]); return 0 ; } \u6765\u6e90 \u00b6 AtCoder Regular Contest 115 D - Odd Degree","title":"D - Odd Degree"},{"location":"problem/atcoder/arc115/d/#d-odd-degree","text":"","title":"D - Odd Degree"},{"location":"problem/atcoder/arc115/d/#_1","text":"N N \u9802\u70b9 M M \u8fba\u306e\u5358\u7d14\u7121\u5411\u30b0\u30e9\u30d5\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9802\u70b9\u306b\u306f 1,\\ldots,N 1,\\ldots,N \u306e\u756a\u53f7\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002 i i \u756a\u76ee\u306e\u8fba\u306f\u9802\u70b9 A_i A_i \u3068\u9802\u70b9 B_i B_i \u3092\u7d50\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u306e\u30b0\u30e9\u30d5\u306e\u5168\u57df\u90e8\u5206\u30b0\u30e9\u30d5(\u203b)\u3067\u3042\u3063\u3066\u3001\u6b21\u6570\u304c\u5947\u6570\u306e\u9802\u70b9\u304c\u3061\u3087\u3046\u3069 K K \u500b\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\u3092\u3059\u3079\u3066\u306e K K ( 0\u2264K\u2264N 0\u2264K\u2264N ) \u306b\u3064\u3044\u3066\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3060\u3057\u7b54\u3048\u306f\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 (\u203b) G G \u306e\u90e8\u5206\u30b0\u30e9\u30d5 H H \u304c G G \u306e\u5168\u57df\u90e8\u5206\u30b0\u30e9\u30d5\u3067\u3042\u308b\u3068\u306f\u3001 H H \u306e\u9802\u70b9\u96c6\u5408\u304c G G \u306e\u9802\u70b9\u96c6\u5408\u3068\u7b49\u3057\u304f\u3001 H H \u306e\u8fba\u96c6\u5408\u304c G G \u306e\u8fba\u96c6\u5408\u306e\u90e8\u5206\u96c6\u5408\u3067\u3042\u308b\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc115/d/#_2","text":"\u9996\u5148\uff0c\u7531\u4e8e\u6bcf\u4e00\u6761\u8fb9\u90fd\u5bf9\u5e94 2 2 \u5ea6\u6570\uff0c\u6240\u6709\u70b9\u7684\u5ea6\u6570\u548c\u4e00\u5b9a\u662f\u5076\u6570\uff0c\u5373\u4e0d\u5b58\u5728\u542b\u6709\u5947\u6570\u4e2a\u5ea6\u6570\u4e3a\u5947\u6570\u8282\u70b9\u7684\u56fe\u3002 \u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u82e5\u6307\u5b9a\u4e86\u54ea\u4e9b\u70b9\u7684\u5ea6\u6570\u4e3a\u5947\u6570 (\u8fd9\u4e9b\u70b9\u7684\u6570\u91cf\u4e3a\u5076\u6570)\uff0c\u800c\u5176\u4ed6\u7684\u70b9\u5ea6\u6570\u4e3a\u5076\u6570\uff0c\u90a3\u8be5\u6811\u603b\u662f\u5b58\u5728\u6070\u597d 1 1 \u4e2a\u6ee1\u8db3\u8fd9\u6837\u6761\u4ef6\u7684\u751f\u6210\u5b50\u56fe\u3002\u56e0\u4e3a\u90a3\u4e9b\u4e0e\u53f6\u5b50\u8282\u70b9\u76f8\u90bb\u7684\u8fb9\u662f\u5426\u4fdd\u7559\u662f\u786e\u5b9a\u7684\uff0c\u8ba1\u7b97\u5b8c\u5b83\u4eec\u5bf9\u975e\u53f6\u8282\u70b9\u7684\u5f71\u54cd\u540e\u5c06\u5176\u548c\u53f6\u5b50\u7ed3\u70b9\u5220\u53bb\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u95ee\u9898\u7684\u5b50\u95ee\u9898\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4fdd\u7559\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u5176\u4f59\u7684\u8fb9\u4efb\u610f\u9009\uff0c\u4e3a\u4e86\u5f97\u5230\u6307\u5b9a\u7684\u5947\u6570\u5ea6\u6570\u8282\u70b9\u96c6\uff0c\u751f\u6210\u6811\u7684\u9009\u6cd5\u662f\u552f\u4e00\u7684\u3002\u6545\u4e00\u4e2a\u5927\u5c0f\u4e3a N N \uff0c\u5305\u542b M M \u6761\u8fb9\u7684\u8fde\u901a\u5757\u7684\u5305\u542b\u6070\u597d K K ( 2\\mid K 2\\mid K ) \u4e2a\u5947\u5ea6\u6570\u8282\u70b9\u7684\u751f\u6210\u5b50\u56fe\u6570\u4e3a 2^{M-N+1}\\binom{N}{K} 2^{M-N+1}\\binom{N}{K} \u3002 \u5bf9\u4e8e\u542b\u591a\u4e2a\u8fde\u901a\u5757\u7684\u56fe\uff0c\u5c06\u5404\u4e2a\u8fde\u901a\u5757\u7684\u7b54\u6848\u5377\u79ef\u5373\u53ef\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc115/d/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e3 + 19 , mod = 998244353 ; std :: vector < int > operator * ( const std :: vector < int > & a , const std :: vector < int > & b ){ std :: vector < int > res ( a . size () + b . size () - 1 ); for ( int i = 0 ; i < ( int ) a . size (); ++ i ) for ( int j = 0 ; j < ( int ) b . size (); ++ j ) res [ i + j ] = ( res [ i + j ] + ( ll ) a [ i ] * b [ j ]) % mod ; return res ; } int n , m ; int fa [ maxn ], size [ maxn ], deg [ maxn ]; int find ( int node ){ return fa [ node ] == node ? node : fa [ node ] = find ( fa [ node ]); } void exgcd ( int a , int b , int & x , int & y ){ if ( ! b ) return ( void )( x = 1 , y = 0 ); exgcd ( b , a % b , y , x ), y -= a / b * x ; } int fact [ maxn ], ifact [ maxn ], p2 [ maxn ]; void init ( void ){ p2 [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; ++ i ) p2 [ i ] = ( p2 [ i - 1 ] + p2 [ i - 1 ]) % mod ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( ll ) fact [ i - 1 ] * i % mod ; exgcd ( fact [ n ], mod , ifact [ n ], ifact [ 0 ]), ifact [ n ] = ( ifact [ n ] % mod + mod ) % mod ; for ( int i = n - 1 ; i >= 0 ; -- i ) ifact [ i ] = ( ll ) ifact [ i + 1 ] * ( i + 1 ) % mod ; } inline int binom ( int n , int m ){ return ( ll ) fact [ n ] * ifact [ n - m ] % mod * ifact [ m ] % mod ; } int main (){ std :: scanf ( \"%d%d\" , & n , & m ); std :: iota ( fa , fa + 1 + n , 0 ); std :: fill ( size + 1 , size + 1 + n , 1 ); init (); for ( int i = 1 , u , v ; i <= m ; ++ i ){ std :: scanf ( \"%d%d\" , & u , & v ); if ( find ( u ) == find ( v )) ++ deg [ find ( u )]; else { size [ find ( v )] += size [ find ( u )]; deg [ find ( v )] += deg [ find ( u )] + 1 ; fa [ find ( u )] = find ( v ); } } std :: vector < int > ans ( 1 , 1 ); for ( int i = 1 ; i <= n ; ++ i ) if ( find ( i ) == i ){ static std :: vector < int > tmp ; tmp . clear (); tmp . resize ( size [ i ] / 2 + 1 ); for ( int j = 0 ; j < ( int ) tmp . size (); ++ j ) tmp [ j ] = ( ll ) binom ( size [ i ], j * 2 ) * p2 [ deg [ i ] - size [ i ] + 1 ] % mod ; ans = ans * tmp ; } for ( int i = 0 ; i <= n ; ++ i ) if (( i & 1 ) || ( i >> 1 ) >= ( int ) ans . size ()) std :: puts ( \"0\" ); else std :: printf ( \"%d \\n \" , ans [ i >> 1 ]); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc115/d/#_4","text":"AtCoder Regular Contest 115 D - Odd Degree","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc115/e/","text":"E - NEQ and LEQ \u00b6 \u9898\u610f \u00b6 \u9577\u3055 N N \u306e\u6574\u6570\u5217 A_1,A_2,\\ldots,A_N A_1,A_2,\\ldots,A_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9577\u3055 N N \u306e\u6574\u6570\u5217 X_1,X_2,\\ldots,X_N X_1,X_2,\\ldots,X_N \u3067\u3042\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u3059\u3079\u3066\u6e80\u305f\u3059\u3082\u306e\u306f\u3044\u304f\u3064\u3042\u308b\u304b\u6c42\u3081\u3001 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1\\le X_i\\le A_i 1\\le X_i\\le A_i X_i\\neq X_{i+1} X_i\\neq X_{i+1} ( 1\\le i\\le N-1 1\\le i\\le N-1 ) \u89e3\u6790 \u00b6 \u8bbe dp_i dp_i \u8868\u793a\u524d X_1,X_2,\\ldots,X_i X_1,X_2,\\ldots,X_i \u7684\u53ef\u884c\u65b9\u6848\u6570\u3002\u4e0d\u96be\u53d1\u73b0\uff0c dp_j\\min\\limits_{j<k\\le i}A_k dp_j\\min\\limits_{j<k\\le i}A_k \u8868\u793a X_{j+1}\\sim X_i X_{j+1}\\sim X_i \u5168\u90e8\u76f8\u7b49\uff0c\u5176\u4f59\u76f8\u90bb\u4e24\u9879\u5747\u4e0d\u76f8\u7b49\u7684\u65b9\u6848\u6570\u548c X_{j}\\sim X_i X_{j}\\sim X_i \u5168\u90e8\u76f8\u7b49\uff0c\u5176\u4f59\u76f8\u90bb\u4e24\u9879\u5747\u4e0d\u76f8\u7b49\u7684\u65b9\u6848\u6570\u7684\u548c\u3002 \u4e8e\u662f dp_i=\\sum (-1)^{i-j}dp_j\\min_{j<k\\le i} A_k dp_i=\\sum (-1)^{i-j}dp_j\\min_{j<k\\le i} A_k \u5176\u4e2d\u7684 \\min\\limits_{j<k\\le i} A_k \\min\\limits_{j<k\\le i} A_k \u53ef\u4ee5\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e5 + 19 , mod = 998244353 ; int n , a [ maxn ]; int st [ maxn ], top ; int dp [ maxn ], sum , s [ maxn ]; int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); dp [ 0 ] = 1 , s [ 1 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ){ while ( top && a [ st [ top ]] >= a [ i ]) sum = ( sum - ( ll ) a [ st [ top ]] * ( s [ st [ top ]] - s [ st [ top - 1 ]])) % mod , -- top ; st [ ++ top ] = i , sum = ( sum + ( ll ) a [ st [ top ]] * ( s [ st [ top ]] - s [ st [ top - 1 ]])) % mod ; dp [ i ] = - sum , s [ i + 1 ] = ( s [ i ] + dp [ i ]) % mod ; } if ( n & 1 ) dp [ n ] = - dp [ n ]; std :: printf ( \"%d \\n \" , ( dp [ n ] + mod ) % mod ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 115 E - LEQ and NEQ","title":"E - LEQ and NEQ"},{"location":"problem/atcoder/arc115/e/#e-neq-and-leq","text":"","title":"E - NEQ and LEQ"},{"location":"problem/atcoder/arc115/e/#_1","text":"\u9577\u3055 N N \u306e\u6574\u6570\u5217 A_1,A_2,\\ldots,A_N A_1,A_2,\\ldots,A_N \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9577\u3055 N N \u306e\u6574\u6570\u5217 X_1,X_2,\\ldots,X_N X_1,X_2,\\ldots,X_N \u3067\u3042\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u3059\u3079\u3066\u6e80\u305f\u3059\u3082\u306e\u306f\u3044\u304f\u3064\u3042\u308b\u304b\u6c42\u3081\u3001 998244353 998244353 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1\\le X_i\\le A_i 1\\le X_i\\le A_i X_i\\neq X_{i+1} X_i\\neq X_{i+1} ( 1\\le i\\le N-1 1\\le i\\le N-1 )","title":"\u9898\u610f"},{"location":"problem/atcoder/arc115/e/#_2","text":"\u8bbe dp_i dp_i \u8868\u793a\u524d X_1,X_2,\\ldots,X_i X_1,X_2,\\ldots,X_i \u7684\u53ef\u884c\u65b9\u6848\u6570\u3002\u4e0d\u96be\u53d1\u73b0\uff0c dp_j\\min\\limits_{j<k\\le i}A_k dp_j\\min\\limits_{j<k\\le i}A_k \u8868\u793a X_{j+1}\\sim X_i X_{j+1}\\sim X_i \u5168\u90e8\u76f8\u7b49\uff0c\u5176\u4f59\u76f8\u90bb\u4e24\u9879\u5747\u4e0d\u76f8\u7b49\u7684\u65b9\u6848\u6570\u548c X_{j}\\sim X_i X_{j}\\sim X_i \u5168\u90e8\u76f8\u7b49\uff0c\u5176\u4f59\u76f8\u90bb\u4e24\u9879\u5747\u4e0d\u76f8\u7b49\u7684\u65b9\u6848\u6570\u7684\u548c\u3002 \u4e8e\u662f dp_i=\\sum (-1)^{i-j}dp_j\\min_{j<k\\le i} A_k dp_i=\\sum (-1)^{i-j}dp_j\\min_{j<k\\le i} A_k \u5176\u4e2d\u7684 \\min\\limits_{j<k\\le i} A_k \\min\\limits_{j<k\\le i} A_k \u53ef\u4ee5\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc115/e/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 5e5 + 19 , mod = 998244353 ; int n , a [ maxn ]; int st [ maxn ], top ; int dp [ maxn ], sum , s [ maxn ]; int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); dp [ 0 ] = 1 , s [ 1 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ){ while ( top && a [ st [ top ]] >= a [ i ]) sum = ( sum - ( ll ) a [ st [ top ]] * ( s [ st [ top ]] - s [ st [ top - 1 ]])) % mod , -- top ; st [ ++ top ] = i , sum = ( sum + ( ll ) a [ st [ top ]] * ( s [ st [ top ]] - s [ st [ top - 1 ]])) % mod ; dp [ i ] = - sum , s [ i + 1 ] = ( s [ i ] + dp [ i ]) % mod ; } if ( n & 1 ) dp [ n ] = - dp [ n ]; std :: printf ( \"%d \\n \" , ( dp [ n ] + mod ) % mod ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc115/e/#_4","text":"AtCoder Regular Contest 115 E - LEQ and NEQ","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc115/f/","text":"F - Migration \u00b6 \u9898\u610f \u00b6 N N \u9802\u70b9\u306e\u6728\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9802\u70b9\u306b\u306f 1,\\ldots,N 1,\\ldots,N \u306e\u756a\u53f7\u304c\u3064\u3044\u3066\u304a\u308a\u3001 i i \u756a\u76ee\u306e\u8fba\u306f\u9802\u70b9 u_i u_i \u3068\u9802\u70b9 v_i v_i \u3092\u3064\u306a\u3044\u3067\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u9802\u70b9 i i \u306b\u306f\u6574\u6570 h_i h_i \u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002 \u99d2\u304c K K \u500b\u3042\u308a\u3001 i i \u756a\u76ee\u306e\u99d2\u306f\u306f\u3058\u3081\u9802\u70b9 s_i s_i \u306b\u7f6e\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3042\u306a\u305f\u306f\u3053\u308c\u304b\u3089\u300c\u4e00\u3064\u99d2\u3092\u9078\u3073\u3001\u305d\u308c\u304c\u73fe\u5728\u7f6e\u304b\u308c\u3066\u3044\u308b\u9802\u70b9\u306b\u96a3\u63a5\u3059\u308b\u3044\u305a\u308c\u304b\u306e\u9802\u70b9\u306b\u79fb\u52d5\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u5404\u99d2 i i \u304c\u9802\u70b9 t_i t_i \u306b\u7f6e\u304b\u308c\u3066\u3044\u308b\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u64cd\u4f5c\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\u5404\u99d2 i i \u3092\u9802\u70b9 s_i s_i \u304b\u3089\u9802\u70b9 t_i t_i \u3078\u6700\u77ed\u7d4c\u8def\u3067\u79fb\u52d5\u3055\u305b\u308b\u5fc5\u8981\u306f \u3042\u308a\u307e\u305b\u3093 \u3002 \u3042\u308b\u99d2\u306e\u914d\u7f6e\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u99d2\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u9802\u70b9\u306b\u66f8\u304b\u308c\u305f\u6574\u6570\u3092\u8db3\u3057\u5408\u308f\u305b\u305f\u5024\u3092 \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb \u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u540c\u3058\u9802\u70b9\u306b\u8907\u6570\u306e\u99d2\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u9802\u70b9\u306e\u6574\u6570\u306f\u305d\u306e\u99d2\u306e\u500b\u6570\u3060\u3051\u8db3\u3057\u5408\u308f\u305b\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002 \u64cd\u4f5c\u3092\u901a\u3057\u3066\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306e\u6700\u5927\u5024\u306f\u6700\u5c0f\u3067\u3044\u304f\u3064\u306b\u306a\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3060\u3057\u3001\u306f\u3058\u3081\u306e\u72b6\u614b\u3068\u7d42\u308f\u308a\u306e\u72b6\u614b\u3082\u8003\u3048\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002 \u89e3\u6790 \u00b6 \u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\u73b0\u5728\u6211\u4eec\u53ea\u9700\u5b9e\u73b0\u5224\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6700\u5927\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u662f\u5426\u53ef\u884c\u3002 \u8bbe S=\\{s_i\\},T=\\{t_i\\} S=\\{s_i\\},T=\\{t_i\\} \u5206\u522b\u8868\u793a\u6240\u6709\u99d2\u7684\u521d\u59cb\u72b6\u6001\u3002\u82e5 S S \u5728\u56fa\u5b9a\u7684\u6700\u5927\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u53ef\u4ee5\u5230\u8fbe T T \uff0c\u7531\u4e8e\u79fb\u52a8\u662f\u53cc\u5411\u7684\uff0c\u5219 T T \u4e5f\u53ef\u4ee5\u5230\u8fbe S S \uff0c\u5e76\u4e14 S S \u548c T T \u80fd\u5230\u8fbe\u7684\u72b6\u6001\u7684\u96c6\u5408\u662f\u76f8\u7b49\u7684\u3002\u6211\u4eec\u8981\u4ece\u8be5\u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u6709\u4ee3\u8868\u6027\u7684\u72b6\u6001\uff0c\u501f S S \u548c T T \u662f\u5426\u90fd\u80fd\u5230\u8fbe\u8be5\u72b6\u6001\u6765\u5224\u65ad S S \u548c T T \u662f\u5426\u80fd\u4e92\u76f8\u5230\u8fbe\u3002 \u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\uff0c\u6240\u6709\u99d2\u90fd\u5904\u4e8e\u53ef\u80fd\u5230\u8fbe\u7684 h_i h_i \u6700\u5c0f\u7684\u8282\u70b9\u7684\u72b6\u6001\u3002\u5c06 S S \u4e0d\u65ad\u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u76f4\u5230\u65e0\u6cd5\u64cd\u4f5c\u4e3a\u6b62\uff1a \u9009\u5b9a\u4e00\u4e2a\u99d2\u8fdb\u884c\u79fb\u52a8\uff0c\u6ee1\u8db3\u8be5\u99d2\u79fb\u52a8\u540e\u7684\u8282\u70b9\u7684 h_i h_i \u6bd4\u79fb\u52a8\u524d\u7684\u8282\u70b9\u7684 h_i h_i \u5c0f\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u4e0d\u8d85\u51fa\u9650\u5236 \u6700\u7ec8\u5f97\u5230\u7684\u72b6\u6001\u5c31\u662f S S \u4e2d\u6240\u6709\u99d2\u90fd\u5904\u4e8e\u53ef\u80fd\u5230\u8fbe\u7684 h_i h_i \u6700\u5c0f\u7684\u8282\u70b9\u7684\u72b6\u6001 (\u8fd9\u4e2a\u72b6\u6001\u662f\u826f\u5b9a\u4e49\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u99d2\u5904\u4e8e\u66f4\u5c0f\u7684 h_i h_i \u7684\u8282\u70b9\u65f6\uff0c\u5176\u4ed6\u7684\u99d2\u4e5f\u4f1a\u66f4\u5bb9\u6613\u5230\u8fbe\u66f4\u5c0f\u7684 h_i h_i \u7684\u8282\u70b9)\u3002\u56e0\u4e3a\u5728\u64cd\u4f5c\u4e2d\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u603b\u662f\u5728\u51cf\u5c0f\uff0c\u6bcf\u4e2a\u99d2\u80fd\u591f\u5230\u8fbe\u7684\u4f4d\u7f6e\u7684\u96c6\u5408\u603b\u662f\u5728\u53d8\u5927\uff1b\u5728\u6700\u7ec8\u72b6\u6001\u4e0b\uff0c\u6240\u6709\u99d2\u80fd\u591f\u5230\u8fbe\u7684\u4f4d\u7f6e\u7684\u96c6\u5408\u90fd\u88ab\u6700\u5927\u5316\uff0c\u4e14\u90fd\u5904\u4e8e\u5404\u81ea\u80fd\u5230\u8fbe\u7684 h_i h_i \u6700\u5c0f\u7684\u8282\u70b9\u3002 \u4e8e\u662f\u6211\u4eec\u5bf9 S S \u548c T T \u5206\u522b\u4e0d\u65ad\u64cd\u4f5c\uff0c\u5224\u65ad\u4ece\u5b83\u4eec\u5f97\u5230\u7684\u72b6\u6001\u662f\u5426\u76f8\u7b49\u3002\u5b9e\u73b0\u65f6\u53ef\u4ee5\u53bb\u6389\u4e8c\u5206\uff0c\u505a\u5230 O(N^2+NK\\log K) O(N^2+NK\\log K) \u7684\u590d\u6742\u5ea6\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e3 + 19 ; struct Edge { int to , next ; } edge [ maxn << 1 ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ]}; head [ from ] = head [ 0 ]; } int n , k , h [ maxn ], s [ 2 ][ maxn ], same ; ll ans , res [ 2 ]; bool vist [ maxn ]; inline bool cmp ( const int & a , const int & b ){ return h [ a ] < h [ b ] || ( h [ a ] == h [ b ] && a < b ); } int next [ maxn ], max [ maxn ]; void dfs ( int node , int f , int s ){ static int dist [ maxn ]; dist [ node ] = std :: max ( dist [ f ], h [ node ]); if ( cmp ( node , s )){ if ( ! next [ s ]) next [ s ] = node , max [ s ] = dist [ node ]; if ( dist [ node ] < dist [ next [ s ]] || ( dist [ node ] == dist [ next [ s ]] && cmp ( node , next [ s ]))) next [ s ] = node , max [ s ] = dist [ node ]; } for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( edge [ i ]. to != f ) dfs ( edge [ i ]. to , node , s ); } std :: priority_queue < std :: pair < ll , int > , std :: vector < std :: pair < ll , int > > , std :: greater < std :: pair < ll , int > > > q [ 2 ]; int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , h + i ); for ( int i = 2 , u , v ; i <= n ; ++ i ){ std :: scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) max [ i ] = 2e9 , dfs ( i , 0 , i ); std :: scanf ( \"%d\" , & k ); for ( int i = 1 ; i <= k ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ){ std :: scanf ( \"%d\" , & s [ j ][ i ]); res [ j ] += h [ s [ j ][ i ]]; } ans = std :: max ( res [ 0 ], res [ 1 ]); for ( int i = 1 ; i <= k ; ++ i ){ for ( int j = 0 ; j < 2 ; ++ j ) if ( next [ s [ j ][ i ]]) q [ j ]. emplace ( max [ s [ j ][ i ]] - h [ s [ j ][ i ]], i ); if ( ! vist [ i ] && s [ 0 ][ i ] == s [ 1 ][ i ]) vist [ i ] = true , ++ same ; } while ( ! q [ 0 ]. empty () || ! q [ 1 ]. empty ()){ if ( same == k ) break ; int j ; if ( q [ 1 ]. empty () || ( ! q [ 0 ]. empty () && res [ 0 ] + q [ 0 ]. top (). first <= res [ 1 ] + q [ 1 ]. top (). first )) j = 0 ; else j = 1 ; int i = q [ j ]. top (). second ; ll d = q [ j ]. top (). first ; q [ j ]. pop (); ans = std :: max ( ans , res [ j ] + d ); res [ j ] -= h [ s [ j ][ i ]]; s [ j ][ i ] = next [ s [ j ][ i ]]; res [ j ] += h [ s [ j ][ i ]]; if ( ! vist [ i ] && s [ 0 ][ i ] == s [ 1 ][ i ]) vist [ i ] = true , ++ same ; if ( next [ s [ j ][ i ]]) q [ j ]. emplace ( max [ s [ j ][ i ]] - h [ s [ j ][ i ]], i ); } std :: printf ( \"%lld \\n \" , ans ); } \u6765\u6e90 \u00b6 AtCoder Regular Contest 115 F - Migration","title":"F - Migration"},{"location":"problem/atcoder/arc115/f/#f-migration","text":"","title":"F - Migration"},{"location":"problem/atcoder/arc115/f/#_1","text":"N N \u9802\u70b9\u306e\u6728\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9802\u70b9\u306b\u306f 1,\\ldots,N 1,\\ldots,N \u306e\u756a\u53f7\u304c\u3064\u3044\u3066\u304a\u308a\u3001 i i \u756a\u76ee\u306e\u8fba\u306f\u9802\u70b9 u_i u_i \u3068\u9802\u70b9 v_i v_i \u3092\u3064\u306a\u3044\u3067\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u9802\u70b9 i i \u306b\u306f\u6574\u6570 h_i h_i \u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002 \u99d2\u304c K K \u500b\u3042\u308a\u3001 i i \u756a\u76ee\u306e\u99d2\u306f\u306f\u3058\u3081\u9802\u70b9 s_i s_i \u306b\u7f6e\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3042\u306a\u305f\u306f\u3053\u308c\u304b\u3089\u300c\u4e00\u3064\u99d2\u3092\u9078\u3073\u3001\u305d\u308c\u304c\u73fe\u5728\u7f6e\u304b\u308c\u3066\u3044\u308b\u9802\u70b9\u306b\u96a3\u63a5\u3059\u308b\u3044\u305a\u308c\u304b\u306e\u9802\u70b9\u306b\u79fb\u52d5\u3055\u305b\u308b\u300d\u3068\u3044\u3046\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u5404\u99d2 i i \u304c\u9802\u70b9 t_i t_i \u306b\u7f6e\u304b\u308c\u3066\u3044\u308b\u72b6\u614b\u306b\u306a\u3063\u305f\u3089\u64cd\u4f5c\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\u5404\u99d2 i i \u3092\u9802\u70b9 s_i s_i \u304b\u3089\u9802\u70b9 t_i t_i \u3078\u6700\u77ed\u7d4c\u8def\u3067\u79fb\u52d5\u3055\u305b\u308b\u5fc5\u8981\u306f \u3042\u308a\u307e\u305b\u3093 \u3002 \u3042\u308b\u99d2\u306e\u914d\u7f6e\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u99d2\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u9802\u70b9\u306b\u66f8\u304b\u308c\u305f\u6574\u6570\u3092\u8db3\u3057\u5408\u308f\u305b\u305f\u5024\u3092 \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb \u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u540c\u3058\u9802\u70b9\u306b\u8907\u6570\u306e\u99d2\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u9802\u70b9\u306e\u6574\u6570\u306f\u305d\u306e\u99d2\u306e\u500b\u6570\u3060\u3051\u8db3\u3057\u5408\u308f\u305b\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002 \u64cd\u4f5c\u3092\u901a\u3057\u3066\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306e\u6700\u5927\u5024\u306f\u6700\u5c0f\u3067\u3044\u304f\u3064\u306b\u306a\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3060\u3057\u3001\u306f\u3058\u3081\u306e\u72b6\u614b\u3068\u7d42\u308f\u308a\u306e\u72b6\u614b\u3082\u8003\u3048\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc115/f/#_2","text":"\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\u73b0\u5728\u6211\u4eec\u53ea\u9700\u5b9e\u73b0\u5224\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u6700\u5927\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u662f\u5426\u53ef\u884c\u3002 \u8bbe S=\\{s_i\\},T=\\{t_i\\} S=\\{s_i\\},T=\\{t_i\\} \u5206\u522b\u8868\u793a\u6240\u6709\u99d2\u7684\u521d\u59cb\u72b6\u6001\u3002\u82e5 S S \u5728\u56fa\u5b9a\u7684\u6700\u5927\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u53ef\u4ee5\u5230\u8fbe T T \uff0c\u7531\u4e8e\u79fb\u52a8\u662f\u53cc\u5411\u7684\uff0c\u5219 T T \u4e5f\u53ef\u4ee5\u5230\u8fbe S S \uff0c\u5e76\u4e14 S S \u548c T T \u80fd\u5230\u8fbe\u7684\u72b6\u6001\u7684\u96c6\u5408\u662f\u76f8\u7b49\u7684\u3002\u6211\u4eec\u8981\u4ece\u8be5\u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u6709\u4ee3\u8868\u6027\u7684\u72b6\u6001\uff0c\u501f S S \u548c T T \u662f\u5426\u90fd\u80fd\u5230\u8fbe\u8be5\u72b6\u6001\u6765\u5224\u65ad S S \u548c T T \u662f\u5426\u80fd\u4e92\u76f8\u5230\u8fbe\u3002 \u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\uff0c\u6240\u6709\u99d2\u90fd\u5904\u4e8e\u53ef\u80fd\u5230\u8fbe\u7684 h_i h_i \u6700\u5c0f\u7684\u8282\u70b9\u7684\u72b6\u6001\u3002\u5c06 S S \u4e0d\u65ad\u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u76f4\u5230\u65e0\u6cd5\u64cd\u4f5c\u4e3a\u6b62\uff1a \u9009\u5b9a\u4e00\u4e2a\u99d2\u8fdb\u884c\u79fb\u52a8\uff0c\u6ee1\u8db3\u8be5\u99d2\u79fb\u52a8\u540e\u7684\u8282\u70b9\u7684 h_i h_i \u6bd4\u79fb\u52a8\u524d\u7684\u8282\u70b9\u7684 h_i h_i \u5c0f\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u4e0d\u8d85\u51fa\u9650\u5236 \u6700\u7ec8\u5f97\u5230\u7684\u72b6\u6001\u5c31\u662f S S \u4e2d\u6240\u6709\u99d2\u90fd\u5904\u4e8e\u53ef\u80fd\u5230\u8fbe\u7684 h_i h_i \u6700\u5c0f\u7684\u8282\u70b9\u7684\u72b6\u6001 (\u8fd9\u4e2a\u72b6\u6001\u662f\u826f\u5b9a\u4e49\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u99d2\u5904\u4e8e\u66f4\u5c0f\u7684 h_i h_i \u7684\u8282\u70b9\u65f6\uff0c\u5176\u4ed6\u7684\u99d2\u4e5f\u4f1a\u66f4\u5bb9\u6613\u5230\u8fbe\u66f4\u5c0f\u7684 h_i h_i \u7684\u8282\u70b9)\u3002\u56e0\u4e3a\u5728\u64cd\u4f5c\u4e2d\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u603b\u662f\u5728\u51cf\u5c0f\uff0c\u6bcf\u4e2a\u99d2\u80fd\u591f\u5230\u8fbe\u7684\u4f4d\u7f6e\u7684\u96c6\u5408\u603b\u662f\u5728\u53d8\u5927\uff1b\u5728\u6700\u7ec8\u72b6\u6001\u4e0b\uff0c\u6240\u6709\u99d2\u80fd\u591f\u5230\u8fbe\u7684\u4f4d\u7f6e\u7684\u96c6\u5408\u90fd\u88ab\u6700\u5927\u5316\uff0c\u4e14\u90fd\u5904\u4e8e\u5404\u81ea\u80fd\u5230\u8fbe\u7684 h_i h_i \u6700\u5c0f\u7684\u8282\u70b9\u3002 \u4e8e\u662f\u6211\u4eec\u5bf9 S S \u548c T T \u5206\u522b\u4e0d\u65ad\u64cd\u4f5c\uff0c\u5224\u65ad\u4ece\u5b83\u4eec\u5f97\u5230\u7684\u72b6\u6001\u662f\u5426\u76f8\u7b49\u3002\u5b9e\u73b0\u65f6\u53ef\u4ee5\u53bb\u6389\u4e8c\u5206\uff0c\u505a\u5230 O(N^2+NK\\log K) O(N^2+NK\\log K) \u7684\u590d\u6742\u5ea6\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc115/f/#_3","text":"#include <bits/stdc++.h> typedef long long int ll ; const int maxn = 2e3 + 19 ; struct Edge { int to , next ; } edge [ maxn << 1 ]; int head [ maxn ]; inline void add ( int from , int to ){ edge [ ++ head [ 0 ]] = ( Edge ){ to , head [ from ]}; head [ from ] = head [ 0 ]; } int n , k , h [ maxn ], s [ 2 ][ maxn ], same ; ll ans , res [ 2 ]; bool vist [ maxn ]; inline bool cmp ( const int & a , const int & b ){ return h [ a ] < h [ b ] || ( h [ a ] == h [ b ] && a < b ); } int next [ maxn ], max [ maxn ]; void dfs ( int node , int f , int s ){ static int dist [ maxn ]; dist [ node ] = std :: max ( dist [ f ], h [ node ]); if ( cmp ( node , s )){ if ( ! next [ s ]) next [ s ] = node , max [ s ] = dist [ node ]; if ( dist [ node ] < dist [ next [ s ]] || ( dist [ node ] == dist [ next [ s ]] && cmp ( node , next [ s ]))) next [ s ] = node , max [ s ] = dist [ node ]; } for ( int i = head [ node ]; i ; i = edge [ i ]. next ) if ( edge [ i ]. to != f ) dfs ( edge [ i ]. to , node , s ); } std :: priority_queue < std :: pair < ll , int > , std :: vector < std :: pair < ll , int > > , std :: greater < std :: pair < ll , int > > > q [ 2 ]; int main (){ std :: scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , h + i ); for ( int i = 2 , u , v ; i <= n ; ++ i ){ std :: scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) max [ i ] = 2e9 , dfs ( i , 0 , i ); std :: scanf ( \"%d\" , & k ); for ( int i = 1 ; i <= k ; ++ i ) for ( int j = 0 ; j < 2 ; ++ j ){ std :: scanf ( \"%d\" , & s [ j ][ i ]); res [ j ] += h [ s [ j ][ i ]]; } ans = std :: max ( res [ 0 ], res [ 1 ]); for ( int i = 1 ; i <= k ; ++ i ){ for ( int j = 0 ; j < 2 ; ++ j ) if ( next [ s [ j ][ i ]]) q [ j ]. emplace ( max [ s [ j ][ i ]] - h [ s [ j ][ i ]], i ); if ( ! vist [ i ] && s [ 0 ][ i ] == s [ 1 ][ i ]) vist [ i ] = true , ++ same ; } while ( ! q [ 0 ]. empty () || ! q [ 1 ]. empty ()){ if ( same == k ) break ; int j ; if ( q [ 1 ]. empty () || ( ! q [ 0 ]. empty () && res [ 0 ] + q [ 0 ]. top (). first <= res [ 1 ] + q [ 1 ]. top (). first )) j = 0 ; else j = 1 ; int i = q [ j ]. top (). second ; ll d = q [ j ]. top (). first ; q [ j ]. pop (); ans = std :: max ( ans , res [ j ] + d ); res [ j ] -= h [ s [ j ][ i ]]; s [ j ][ i ] = next [ s [ j ][ i ]]; res [ j ] += h [ s [ j ][ i ]]; if ( ! vist [ i ] && s [ 0 ][ i ] == s [ 1 ][ i ]) vist [ i ] = true , ++ same ; if ( next [ s [ j ][ i ]]) q [ j ]. emplace ( max [ s [ j ][ i ]] - h [ s [ j ][ i ]], i ); } std :: printf ( \"%lld \\n \" , ans ); }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc115/f/#_4","text":"AtCoder Regular Contest 115 F - Migration","title":"\u6765\u6e90"},{"location":"problem/atcoder/arc116/f/","text":"F - Deque Game \u00b6 \u9898\u610f \u00b6 K K \u500b\u306e\u6570\u5217\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 i i \u500b\u76ee\u306e\u6570\u5217 A_i A_i \u306e\u9577\u3055\u306f N_i N_i \u3067\u3059\u3002 \u3053\u308c\u3089\u3092\u4f7f\u3063\u3066\u9ad8\u6a4b\u541b\u3068\u9752\u6728\u541b\u304c\u30b2\u30fc\u30e0\u3092\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u6570\u5217\u304c\u9577\u3055 1 1 \u306b\u306a\u308b\u307e\u3067\u3001\u9ad8\u6a4b\u541b\u3068\u9752\u6728\u541b\u304c\u4ea4\u4e92\u306b\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002 \u9577\u3055\u304c 2 2 \u4ee5\u4e0a\u306e\u6570\u5217\u3092 1 1 \u3064\u9078\u3073\u3001\u305d\u306e\u6700\u521d\u306e\u8981\u7d20\u6216\u3044\u306f\u6700\u5f8c\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3002 \u9ad8\u6a4b\u541b\u304c\u5148\u306b\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u6700\u5f8c\u306b\u6b8b\u308b K K \u500b\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u3001\u9ad8\u6a4b\u541b\u306f\u6700\u5927\u5316\u3057\u305f\u3044\u3068\u3001\u9752\u6728\u541b\u306f\u6700\u5c0f\u5316\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 \u4e21\u8005\u6700\u9069\u306b\u884c\u52d5\u3059\u308b\u3068\u304d\u3001\u6700\u5f8c\u306b\u6b8b\u308b K K \u500b\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u7b54\u3048\u3066\u304f\u3060\u3055\u3044\u3002 \u89e3\u6790 \u00b6 \u5728\u535a\u5f08\u6e38\u620f\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u8981\u7528\u5230\u62b5\u6d88\u7684\u601d\u60f3\u3002\u8fd9\u4e00\u70b9\u5728 Nim \u6e38\u620f\u4e2d\u7684\u4f53\u73b0\u5c31\u662f\uff0c\u5fc5\u80dc\u65b9\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u64cd\u4f5c\u62b5\u6d88\u5bf9\u65b9\u5bf9\u5f02\u6216\u548c\u7684\u5f71\u54cd\u3002\u800c\u5728\u672c\u9898\u7684 Deque \u6e38\u620f\u4e2d\uff0c\u5f53\u4e00\u65b9\u53d6\u8d70\u961f\u9996\u65f6\uff0c\u53e6\u4e00\u65b9\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u53d6\u8d70\u961f\u5c3e\u6765\u201c\u62b5\u6d88\u201d\uff0c\u4f7f\u961f\u5217\u4e2d\u95f4\u7684\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8\u3002 \u8003\u8651 K=1 K=1 \u7684\u60c5\u51b5\u3002\u6839\u636e\u62b5\u6d88\u7684\u601d\u60f3\uff0c\u82e5 N_1 N_1 \u4e3a\u5947\u6570\uff0c\u5219\u9ad8\u6a4b\u81f3\u5c11\u53ef\u4ee5\u4f7f \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \u5269\u4e0b\u3002 \u90a3\u9ad8\u6a4b\u541b\u662f\u5426\u80fd\u591f\u4f7f\u5269\u4e0b\u7684\u6570\u6bd4 \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \u8fd8\u8981\u5927\u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u9752\u6728\u4e5f\u53ef\u4ee5\u901a\u8fc7\u62b5\u6d88\u7684\u624b\u6bb5\uff0c\u4f7f\u5f53 N_1 N_1 \u4e3a\u5947\u6570\u65f6\uff0c\u6700\u7ec8\u5f97\u6570\u4e0d\u5927\u4e8e \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \u3002 \u6545\uff0c\u5f53 K=1,2\\nmid N_1 K=1,2\\nmid N_1 \u65f6\uff0c\u7b54\u6848\u4e3a f(A_1)=\\begin{cases} A_1&\\text{if }N_1=1\\\\ \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)&\\text{else} \\end{cases} f(A_1)=\\begin{cases} A_1&\\text{if }N_1=1\\\\ \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)&\\text{else} \\end{cases} \u5f53 K>1 K>1 \u4e14 N_i N_i \u90fd\u662f\u5947\u6570\u65f6\uff0c\u7b54\u6848\u6070\u597d\u4e3a \\sum\\limits_{i=1}^Kf(A_i) \\sum\\limits_{i=1}^Kf(A_i) \u3002\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\uff0c\u5f53 N_i N_i \u4e3a\u5947\u6570\u65f6\uff0c\u5bf9 A_i A_i \u540e\u624b\u53d6\u603b\u662f\u6bd4\u5148\u624b\u53d6\u66f4\u4f18\u3002\u5982\u679c\u9ad8\u6a4b\u53d6\u8d70\u4e86 A_i A_i \u7684\u9996\u4e2a\u5143\u7d20\uff0c\u5219\u9752\u6728\u5728\u63a5\u4e0b\u6765\uff0c\u6bcf\u6b21\u9ad8\u6a4b\u64cd\u4f5c A_i A_i \u65f6\u91cd\u590d\u81ea\u5df1\u7684\u7b56\u7565\uff0c\u5c1a\u4e14\u53ef\u4ee5\u4fdd\u8bc1 A_i A_i \u5269\u4e0b\u7684\u6570\u4ecd\u7136\u4e3a f(A_i) f(A_i) \uff1b\u800c\u82e5\u9752\u6728\u50bb\u4e4e\u4e4e\u5730\u62a2\u7740\u53d6\u4e86 A_i A_i \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u9ad8\u6a4b\u5c31\u6709\u624b\u6bb5\u4f7f\u5f97 A_i A_i \u5269\u4e0b\u7684\u6570\u81f3\u5c11\u4e3a \\max\\left(A_{(N_1+1)/2},\\min(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)\\ge f(A_i) \\max\\left(A_{(N_1+1)/2},\\min(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)\\ge f(A_i) \u4e86\u3002\u8fd9\u6837\uff0c\u9752\u6728\u5c31\u4f1a\u907f\u514d\u6210\u4e3a\u6bcf\u4e2a A_i A_i \u7684\u5148\u624b\u3002\u4e8e\u662f K>1 K>1 \u65f6\uff0c\u6bcf\u4e2a A_i A_i \u7684\u5148\u624b\u8005\u8fd8\u662f\u9ad8\u6a4b\u541b\uff0c\u6bcf\u4e2a A_i A_i \u5269\u4e0b\u7684\u6570\u8fd8\u662f f(A_i) f(A_i) \u3002 \u5982\u679c\u5b58\u5728\u4e3a\u5076\u6570\u7684 N_i N_i \uff0c\u5219\u4e24\u4eba\u4f1a\u8f6e\u6d41\u4ece\u957f\u5ea6\u4e3a\u5076\u6570\u7684 A_i A_i \u4e2d\u5220\u9664\u5408\u9002\u7684\u5143\u7d20\uff0c\u76f4\u5230\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u6570\u5217\uff0c\u8f6c\u5316\u4e3a\u4e4b\u524d\u8ba8\u8bba\u7684\u72b6\u6001\u3002\u8fd9\u4e00\u70b9\u7684\u8bc1\u660e\u6211\u5e76\u4e0d\u5f88\u6e05\u695a\uff0c\u5b98\u65b9\u9898\u89e3\u7684\u82f1\u6587\u7248\u4f3c\u4e4e\u4e5f\u8bc1\u660e\u5f97\u4e0d\u592a\u8be6\u7ec6\u3002 \u5b9e\u73b0 \u00b6 #include <bits/stdc++.h> const int maxn = 2e5 + 19 ; int k , cnt ; std :: vector < int > a [ maxn ], d ; long long int ans ; inline int f ( const std :: vector < int > & a , int l , int r ){ if ( l == r ) return a [ l ]; return std :: min ( a [( l + r ) / 2 ], std :: max ( a [( l + r ) / 2 - 1 ], a [( l + r ) / 2 + 1 ])); } inline int g ( const std :: vector < int > & a , int l , int r ){ if ( l == r ) return a [ l ]; return std :: max ( a [( l + r ) / 2 ], std :: min ( a [( l + r ) / 2 - 1 ], a [( l + r ) / 2 + 1 ])); } int main (){ std :: scanf ( \"%d\" , & k ); for ( int i = 1 , sz ; i <= k ; ++ i ){ std :: scanf ( \"%d\" , & sz ); a [ i ]. resize ( sz ); for ( int j = 0 ; j < sz ; ++ j ) std :: scanf ( \"%d\" , & a [ i ][ j ]); if ( ! ( sz & 1 )) ++ cnt ; } for ( int i = 1 ; i <= k ; ++ i ){ if ( a [ i ]. size () & 1 ){ if ( cnt & 1 ) ans += g ( a [ i ], 0 , a [ i ]. size () - 1 ); else ans += f ( a [ i ], 0 , a [ i ]. size () - 1 ); } else { int x , y ; if ( cnt & 1 ) x = g ( a [ i ], 1 , a [ i ]. size () - 1 ), y = g ( a [ i ], 0 , a [ i ]. size () - 2 ); else x = f ( a [ i ], 1 , a [ i ]. size () - 1 ), y = f ( a [ i ], 0 , a [ i ]. size () - 2 ); if ( x > y ) std :: swap ( x , y ); d . push_back ( y - x ), ans += x ; } } std :: sort ( d . begin (), d . end (), std :: greater < int > ()); for ( int i = 0 ; i < ( int ) d . size (); i += 2 ) ans += d [ i ]; std :: printf ( \"%lld \\n \" , ans ); return 0 ; } \u6765\u6e90 \u00b6 AtCoder Regular Contest 116 F - Deque Game","title":"F - Deque Game"},{"location":"problem/atcoder/arc116/f/#f-deque-game","text":"","title":"F - Deque Game"},{"location":"problem/atcoder/arc116/f/#_1","text":"K K \u500b\u306e\u6570\u5217\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 i i \u500b\u76ee\u306e\u6570\u5217 A_i A_i \u306e\u9577\u3055\u306f N_i N_i \u3067\u3059\u3002 \u3053\u308c\u3089\u3092\u4f7f\u3063\u3066\u9ad8\u6a4b\u541b\u3068\u9752\u6728\u541b\u304c\u30b2\u30fc\u30e0\u3092\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u6570\u5217\u304c\u9577\u3055 1 1 \u306b\u306a\u308b\u307e\u3067\u3001\u9ad8\u6a4b\u541b\u3068\u9752\u6728\u541b\u304c\u4ea4\u4e92\u306b\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002 \u9577\u3055\u304c 2 2 \u4ee5\u4e0a\u306e\u6570\u5217\u3092 1 1 \u3064\u9078\u3073\u3001\u305d\u306e\u6700\u521d\u306e\u8981\u7d20\u6216\u3044\u306f\u6700\u5f8c\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3002 \u9ad8\u6a4b\u541b\u304c\u5148\u306b\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u6700\u5f8c\u306b\u6b8b\u308b K K \u500b\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u3001\u9ad8\u6a4b\u541b\u306f\u6700\u5927\u5316\u3057\u305f\u3044\u3068\u3001\u9752\u6728\u541b\u306f\u6700\u5c0f\u5316\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 \u4e21\u8005\u6700\u9069\u306b\u884c\u52d5\u3059\u308b\u3068\u304d\u3001\u6700\u5f8c\u306b\u6b8b\u308b K K \u500b\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u7b54\u3048\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u9898\u610f"},{"location":"problem/atcoder/arc116/f/#_2","text":"\u5728\u535a\u5f08\u6e38\u620f\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u8981\u7528\u5230\u62b5\u6d88\u7684\u601d\u60f3\u3002\u8fd9\u4e00\u70b9\u5728 Nim \u6e38\u620f\u4e2d\u7684\u4f53\u73b0\u5c31\u662f\uff0c\u5fc5\u80dc\u65b9\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u64cd\u4f5c\u62b5\u6d88\u5bf9\u65b9\u5bf9\u5f02\u6216\u548c\u7684\u5f71\u54cd\u3002\u800c\u5728\u672c\u9898\u7684 Deque \u6e38\u620f\u4e2d\uff0c\u5f53\u4e00\u65b9\u53d6\u8d70\u961f\u9996\u65f6\uff0c\u53e6\u4e00\u65b9\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u53d6\u8d70\u961f\u5c3e\u6765\u201c\u62b5\u6d88\u201d\uff0c\u4f7f\u961f\u5217\u4e2d\u95f4\u7684\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8\u3002 \u8003\u8651 K=1 K=1 \u7684\u60c5\u51b5\u3002\u6839\u636e\u62b5\u6d88\u7684\u601d\u60f3\uff0c\u82e5 N_1 N_1 \u4e3a\u5947\u6570\uff0c\u5219\u9ad8\u6a4b\u81f3\u5c11\u53ef\u4ee5\u4f7f \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \u5269\u4e0b\u3002 \u90a3\u9ad8\u6a4b\u541b\u662f\u5426\u80fd\u591f\u4f7f\u5269\u4e0b\u7684\u6570\u6bd4 \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \u8fd8\u8981\u5927\u5462\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u9752\u6728\u4e5f\u53ef\u4ee5\u901a\u8fc7\u62b5\u6d88\u7684\u624b\u6bb5\uff0c\u4f7f\u5f53 N_1 N_1 \u4e3a\u5947\u6570\u65f6\uff0c\u6700\u7ec8\u5f97\u6570\u4e0d\u5927\u4e8e \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right) \u3002 \u6545\uff0c\u5f53 K=1,2\\nmid N_1 K=1,2\\nmid N_1 \u65f6\uff0c\u7b54\u6848\u4e3a f(A_1)=\\begin{cases} A_1&\\text{if }N_1=1\\\\ \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)&\\text{else} \\end{cases} f(A_1)=\\begin{cases} A_1&\\text{if }N_1=1\\\\ \\min\\left(A_{(N_1+1)/2},\\max(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)&\\text{else} \\end{cases} \u5f53 K>1 K>1 \u4e14 N_i N_i \u90fd\u662f\u5947\u6570\u65f6\uff0c\u7b54\u6848\u6070\u597d\u4e3a \\sum\\limits_{i=1}^Kf(A_i) \\sum\\limits_{i=1}^Kf(A_i) \u3002\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\uff0c\u5f53 N_i N_i \u4e3a\u5947\u6570\u65f6\uff0c\u5bf9 A_i A_i \u540e\u624b\u53d6\u603b\u662f\u6bd4\u5148\u624b\u53d6\u66f4\u4f18\u3002\u5982\u679c\u9ad8\u6a4b\u53d6\u8d70\u4e86 A_i A_i \u7684\u9996\u4e2a\u5143\u7d20\uff0c\u5219\u9752\u6728\u5728\u63a5\u4e0b\u6765\uff0c\u6bcf\u6b21\u9ad8\u6a4b\u64cd\u4f5c A_i A_i \u65f6\u91cd\u590d\u81ea\u5df1\u7684\u7b56\u7565\uff0c\u5c1a\u4e14\u53ef\u4ee5\u4fdd\u8bc1 A_i A_i \u5269\u4e0b\u7684\u6570\u4ecd\u7136\u4e3a f(A_i) f(A_i) \uff1b\u800c\u82e5\u9752\u6728\u50bb\u4e4e\u4e4e\u5730\u62a2\u7740\u53d6\u4e86 A_i A_i \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u9ad8\u6a4b\u5c31\u6709\u624b\u6bb5\u4f7f\u5f97 A_i A_i \u5269\u4e0b\u7684\u6570\u81f3\u5c11\u4e3a \\max\\left(A_{(N_1+1)/2},\\min(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)\\ge f(A_i) \\max\\left(A_{(N_1+1)/2},\\min(A_{(N_1+1)/2-1},A_{(N_1+1)/2+1})\\right)\\ge f(A_i) \u4e86\u3002\u8fd9\u6837\uff0c\u9752\u6728\u5c31\u4f1a\u907f\u514d\u6210\u4e3a\u6bcf\u4e2a A_i A_i \u7684\u5148\u624b\u3002\u4e8e\u662f K>1 K>1 \u65f6\uff0c\u6bcf\u4e2a A_i A_i \u7684\u5148\u624b\u8005\u8fd8\u662f\u9ad8\u6a4b\u541b\uff0c\u6bcf\u4e2a A_i A_i \u5269\u4e0b\u7684\u6570\u8fd8\u662f f(A_i) f(A_i) \u3002 \u5982\u679c\u5b58\u5728\u4e3a\u5076\u6570\u7684 N_i N_i \uff0c\u5219\u4e24\u4eba\u4f1a\u8f6e\u6d41\u4ece\u957f\u5ea6\u4e3a\u5076\u6570\u7684 A_i A_i \u4e2d\u5220\u9664\u5408\u9002\u7684\u5143\u7d20\uff0c\u76f4\u5230\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u6570\u5217\uff0c\u8f6c\u5316\u4e3a\u4e4b\u524d\u8ba8\u8bba\u7684\u72b6\u6001\u3002\u8fd9\u4e00\u70b9\u7684\u8bc1\u660e\u6211\u5e76\u4e0d\u5f88\u6e05\u695a\uff0c\u5b98\u65b9\u9898\u89e3\u7684\u82f1\u6587\u7248\u4f3c\u4e4e\u4e5f\u8bc1\u660e\u5f97\u4e0d\u592a\u8be6\u7ec6\u3002","title":"\u89e3\u6790"},{"location":"problem/atcoder/arc116/f/#_3","text":"#include <bits/stdc++.h> const int maxn = 2e5 + 19 ; int k , cnt ; std :: vector < int > a [ maxn ], d ; long long int ans ; inline int f ( const std :: vector < int > & a , int l , int r ){ if ( l == r ) return a [ l ]; return std :: min ( a [( l + r ) / 2 ], std :: max ( a [( l + r ) / 2 - 1 ], a [( l + r ) / 2 + 1 ])); } inline int g ( const std :: vector < int > & a , int l , int r ){ if ( l == r ) return a [ l ]; return std :: max ( a [( l + r ) / 2 ], std :: min ( a [( l + r ) / 2 - 1 ], a [( l + r ) / 2 + 1 ])); } int main (){ std :: scanf ( \"%d\" , & k ); for ( int i = 1 , sz ; i <= k ; ++ i ){ std :: scanf ( \"%d\" , & sz ); a [ i ]. resize ( sz ); for ( int j = 0 ; j < sz ; ++ j ) std :: scanf ( \"%d\" , & a [ i ][ j ]); if ( ! ( sz & 1 )) ++ cnt ; } for ( int i = 1 ; i <= k ; ++ i ){ if ( a [ i ]. size () & 1 ){ if ( cnt & 1 ) ans += g ( a [ i ], 0 , a [ i ]. size () - 1 ); else ans += f ( a [ i ], 0 , a [ i ]. size () - 1 ); } else { int x , y ; if ( cnt & 1 ) x = g ( a [ i ], 1 , a [ i ]. size () - 1 ), y = g ( a [ i ], 0 , a [ i ]. size () - 2 ); else x = f ( a [ i ], 1 , a [ i ]. size () - 1 ), y = f ( a [ i ], 0 , a [ i ]. size () - 2 ); if ( x > y ) std :: swap ( x , y ); d . push_back ( y - x ), ans += x ; } } std :: sort ( d . begin (), d . end (), std :: greater < int > ()); for ( int i = 0 ; i < ( int ) d . size (); i += 2 ) ans += d [ i ]; std :: printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u5b9e\u73b0"},{"location":"problem/atcoder/arc116/f/#_4","text":"AtCoder Regular Contest 116 F - Deque Game","title":"\u6765\u6e90"},{"location":"string/lyndon/","text":"Lyndon \u4e32\u548c Lyndon \u5206\u89e3 \u00b6 \u5b9a\u4e49 \u00b6 Lyndon \u4e32 (Lyndon Word) \u53c8\u79f0\u7b80\u5355\u4e32\uff0c\u5b83\u7684\u4e00\u79cd\u5b9a\u4e49\u662f\uff0c\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e\u81ea\u5df1\u7684\u6240\u6709\u771f\u540e\u7f00\u7684\u5b57\u5178\u5e8f\u7684\u5b57\u7b26\u4e32\u3002\u53e6\u4e00\u79cd\u5b9a\u4e49\u662f\uff0c\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e\u81ea\u5df1\u7684\u6240\u6709\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u7684\u5b57\u5178\u5e8f\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u4e24\u79cd\u5b9a\u4e49\u4e8b\u5b9e\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e0b\u9762\u4e24\u4e2a\u6d45\u663e\u7684\u547d\u9898\u8bf4\u660e\u3002 \u82e5 s s \u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u771f\u540e\u7f00\uff0c\u5219 s s \u4e5f\u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32 \u8bbe B B \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u771f\u540e\u7f00\uff0c\u5373 B \\le s B \\le s \uff1b\u4e14 s s \u80fd\u8868\u793a\u4e3a A A \u548c B B \u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u5f62\u5f0f\uff0c\u5373 s=AB s=AB \u3002 \u663e\u7136\uff0c BA BA \u662f s s \u7684\u4e00\u4e2a\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002\u8bbe C C \u4e3a s s \u7684\u957f\u5ea6\u4e3a |B| |B| \u7684\u524d\u7f00\uff0c\u8bbe D D \u4e3a\u4e00\u4e2a\u53ef\u4e0e C C \u62fc\u63a5\u6210 s s \u7684\u5b57\u7b26\u4e32 ( s=CD s=CD )\u3002 \u82e5 B < C B < C \uff0c\u5219 BA < CD = s BA < CD = s \u3002 BA BA \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002 \u82e5 B=C B=C \uff0c\u4e14 A \\le D A \\le D \uff0c\u5219 BA \\le CD = s BA \\le CD = s \u3002 BA BA \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002 \u82e5 B=C B=C \uff0c\u4e14 A > D A > D \uff0c\u5219 DC < AB = s DC < AB = s \u3002 DC DC \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002 \u82e5 s s \u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\uff0c\u5219 s s \u4e5f\u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u771f\u540e\u7f00 \u8bbe BA BA \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\uff0c\u5373 BA \\le s BA \\le s \uff1b\u4e14 s s \u80fd\u8868\u793a\u4e3a A A \u548c B B \u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u5f62\u5f0f\uff0c\u5373 s=AB s=AB \u5219 B \\le BA \\le s B \\le BA \\le s \u3002 B B \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u771f\u540e\u7f00\u3002 \u7b2c\u4e8c\u79cd\u5b9a\u4e49\u8bf4\u660e\uff0c\u4e00\u4e2a\u975e\u5faa\u73af\u5b57\u7b26\u4e32\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5faa\u73af\u540c\u6784\u4e32\u662f\u4e00\u4e2a Lyndon \u4e32\uff0c\u800c\u4e00\u4e2a\u5faa\u73af\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5faa\u73af\u540c\u6784\u4e32\u90fd\u4e0d\u662f Lyndon \u4e32\u3002 \u5982\u679c a,b a,b \u90fd\u662f Lyndon \u4e32\uff0c\u5219\u5f53\u4e14\u4ec5\u5f53 a<b a<b \u65f6 ab ab \u662f\u4e00\u4e2a Lyndon \u4e32\u3002 Lyndon \u4e32\u7684\u524d\u7f00\u4e0d\u4e00\u5b9a\u662f Lyndon \u4e32\u3002 \\texttt{aa} \\texttt{aa} \u662f \\texttt{aab} \\texttt{aab} \u7684\u524d\u7f00\uff0c\u4f46\u5b83\u4e0d\u662f Lyndon \u4e32\u3002 Lyndon \u5206\u89e3 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \uff0c\u5b58\u5728\u4e14\u4ec5\u5b58\u5728\u4e00\u79cd\u5bf9\u5b83\u7684\u5212\u5206 s = w_1w_2 \\ldots w_m s = w_1w_2 \\ldots w_m \uff0c\u6ee1\u8db3 w_1, w_2, \\ldots w_m w_1, w_2, \\ldots w_m \u90fd\u662f Lyndon \u4e32\u4e14 w_1 \\ge w_2 \\ge \\ldots \\ge w_m w_1 \\ge w_2 \\ge \\ldots \\ge w_m \u3002\u8fd9\u79cd\u5212\u5206\u88ab\u79f0\u4e3a Lyndon \u5206\u89e3 (Lyndon Decomposition)\u3002 \u8bc1\u660e \u5355\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u662f Lyndon \u4e32\u3002\u56e0\u6b64\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u5bf9 s s \u7684\u5212\u5206\uff0c\u6ee1\u8db3 w_1, w_2, \\ldots w_m w_1, w_2, \\ldots w_m \u90fd\u662f Lyndon \u4e32\u3002 \u82e5 w_{i} < w_{i+1} w_{i} < w_{i+1} \uff0c\u5219 w_{i}w_{i+1} w_{i}w_{i+1} \u4e5f\u662f\u4e00\u4e2a Lyndon \u4e32\u3002\u7528 w_{i}w_{i+1} w_{i}w_{i+1} \u66ff\u6362\u6240\u6709 w_{i} < w_{i+1} w_{i} < w_{i+1} \uff0c\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6ee1\u8db3 w_1 \\ge w_2 \\ge \\ldots \\ge w_m w_1 \\ge w_2 \\ge \\ldots \\ge w_m \u7684\u5212\u5206\u3002\u6545\u4efb\u4f55\u5b57\u7b26\u4e32\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u79cd Lyndon \u5206\u89e3\u3002 \u5047\u8bbe s s \u5b58\u5728\u4e24\u4e2a\u6216\u66f4\u591a\u4e0d\u540c\u7684 Lyndon \u5206\u89e3\uff0c\u8bbe\u5176\u4e2d\u4e24\u4e2a\u5206\u522b\u4e3a a_1, a_2, \\ldots, a_n a_1, a_2, \\ldots, a_n \u548c b_1, b_2, \\ldots, b_m b_1, b_2, \\ldots, b_m \u3002\u53d6\u5b83\u4eec\u7b2c\u4e00\u4e2a\u6ee1\u8db3 a_i \\neq b_i a_i \\neq b_i \u7684\u4f4d\u7f6e i i \u3002 \u5982\u56fe\uff0c\u4ee4 a_j a_j \u4e3a\u7a7f\u8fc7 b_i b_i \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u5b50\u4e32\u3002\u8bbe c c \u4e3a b_i b_i \u548c a_j a_j \u7684\u516c\u5171\u90e8\u5206\uff0c\u6211\u4eec\u6709 b_i > a_i \\ge a_j > c b_i > a_i \\ge a_j > c \uff0c\u800c c c \u662f b_i b_i \u7684\u4e00\u4e2a\u771f\u540e\u7f00\uff0c\u56e0\u6b64 b_i b_i \u4e0d\u662f\u4e00\u4e2a Lyndon \u4e32\uff0c\u8fd9\u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u5728 Lyndon \u5206\u89e3\u4e2d\uff0c w_1 w_1 \u4e00\u5b9a\u662f\u6700\u957f\u7684\u4e3a Lyndon \u4e32\u7684\u524d\u7f00\uff0c w_m w_m \u4e00\u5b9a\u662f\u6700\u957f\u7684\u4e3a Lyndon \u4e32\u7684\u540e\u7f00\u3002 \u7531\u4e8e w_1 \\ge w_2 \\ge \\ldots \\ge w_m w_1 \\ge w_2 \\ge \\ldots \\ge w_m \uff0c\u4e14 w_m w_m \u4e25\u683c\u5c0f\u4e8e\u5b83\u7684\u6240\u6709\u771f\u540e\u7f00\uff0c w_m w_m \u4e00\u5b9a\u662f s s \u7684\u6700\u5c0f\u540e\u7f00\u3002 \u6700\u5c0f\u8868\u793a\u6cd5 \u00b6 \u6c42 s s \u6240\u6709\u5faa\u73af\u540c\u6784\u4e32\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u663e\u7136\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u540e\u7f00\u6570\u7ec4\u6c42\uff0c\u4f46\u6211\u4eec\u8981\u8003\u8651\u5982\u4f55\u4f7f\u7528 Lyndon \u5206\u89e3\u505a\u3002 \u82e5\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0d\u662f\u5faa\u73af\u4e32\uff0c\u5219\u5b83\u6240\u6709\u5faa\u73af\u540c\u6784\u4e32\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u4e00\u5b9a\u662f\u4e00\u4e2a Lyndon \u4e32\u3002\u90a3\u4e48 ss ss \u7684 Lyndon \u5206\u89e3\u4e2d\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u5b50\u4e32\u5305\u542b\u8fd9\u4e2a\u6700\u5c0f\u8868\u793a\u3002\u7531\u4e8e\u5f80\u540e\u662f\u5b83\u7684\u524d\u7f00\uff0c\u5f80\u524d\u662f\u5b83\u7684\u540e\u7f00\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5b50\u4e32\u4e00\u5b9a\u4e0d\u4f1a\u548c\u4e24\u8fb9\u5408\u5e76\uff0c\u5c31\u662f\u8fd9\u4e2a\u6700\u5c0f\u8868\u793a\u3002 \u82e5\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u5faa\u73af\u4e32\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u628a\u5faa\u73af\u8282\u62bd\u51fa\u6765\u6c42\u6700\u5c0f\u8868\u793a\u3002 \u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u53ef\u4ee5\u5f52\u7eb3\u5230\u4e00\u8d77\u3002 for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); for ( int i = n + 1 ; i <= n + n ; ++ i ) a [ i ] = a [ i - n ]; ans = 1 ; for ( int i = 1 ; i <= n + n ; ){ int j = i , k = i ; while ( k + 1 <= n + n && a [ j ] <= a [ k + 1 ]){ if ( a [ j ] == a [ k + 1 ]) ++ j , ++ k ; else j = i , ++ k ; } while ( i <= j ){ i += k - j + 1 ; if ( i <= n ) ans = i ; } } for ( int i = ans ; i <= ans + n - 1 ; ++ i ) std :: printf ( \"%d \" , a [ i ]);","title":"Lyndon \u4e32\u548c Lyndon \u5206\u89e3"},{"location":"string/lyndon/#lyndon-lyndon","text":"","title":"Lyndon \u4e32\u548c Lyndon \u5206\u89e3"},{"location":"string/lyndon/#_1","text":"Lyndon \u4e32 (Lyndon Word) \u53c8\u79f0\u7b80\u5355\u4e32\uff0c\u5b83\u7684\u4e00\u79cd\u5b9a\u4e49\u662f\uff0c\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e\u81ea\u5df1\u7684\u6240\u6709\u771f\u540e\u7f00\u7684\u5b57\u5178\u5e8f\u7684\u5b57\u7b26\u4e32\u3002\u53e6\u4e00\u79cd\u5b9a\u4e49\u662f\uff0c\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e\u81ea\u5df1\u7684\u6240\u6709\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u7684\u5b57\u5178\u5e8f\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u4e24\u79cd\u5b9a\u4e49\u4e8b\u5b9e\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e0b\u9762\u4e24\u4e2a\u6d45\u663e\u7684\u547d\u9898\u8bf4\u660e\u3002 \u82e5 s s \u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u771f\u540e\u7f00\uff0c\u5219 s s \u4e5f\u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32 \u8bbe B B \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u771f\u540e\u7f00\uff0c\u5373 B \\le s B \\le s \uff1b\u4e14 s s \u80fd\u8868\u793a\u4e3a A A \u548c B B \u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u5f62\u5f0f\uff0c\u5373 s=AB s=AB \u3002 \u663e\u7136\uff0c BA BA \u662f s s \u7684\u4e00\u4e2a\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002\u8bbe C C \u4e3a s s \u7684\u957f\u5ea6\u4e3a |B| |B| \u7684\u524d\u7f00\uff0c\u8bbe D D \u4e3a\u4e00\u4e2a\u53ef\u4e0e C C \u62fc\u63a5\u6210 s s \u7684\u5b57\u7b26\u4e32 ( s=CD s=CD )\u3002 \u82e5 B < C B < C \uff0c\u5219 BA < CD = s BA < CD = s \u3002 BA BA \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002 \u82e5 B=C B=C \uff0c\u4e14 A \\le D A \\le D \uff0c\u5219 BA \\le CD = s BA \\le CD = s \u3002 BA BA \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002 \u82e5 B=C B=C \uff0c\u4e14 A > D A > D \uff0c\u5219 DC < AB = s DC < AB = s \u3002 DC DC \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\u3002 \u82e5 s s \u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\uff0c\u5219 s s \u4e5f\u5b58\u5728\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u771f\u540e\u7f00 \u8bbe BA BA \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u975e\u5e73\u51e1\u5faa\u73af\u540c\u6784\u4e32\uff0c\u5373 BA \\le s BA \\le s \uff1b\u4e14 s s \u80fd\u8868\u793a\u4e3a A A \u548c B B \u4e24\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u5f62\u5f0f\uff0c\u5373 s=AB s=AB \u5219 B \\le BA \\le s B \\le BA \\le s \u3002 B B \u662f\u4e00\u4e2a\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e s s \u7684\u771f\u540e\u7f00\u3002 \u7b2c\u4e8c\u79cd\u5b9a\u4e49\u8bf4\u660e\uff0c\u4e00\u4e2a\u975e\u5faa\u73af\u5b57\u7b26\u4e32\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5faa\u73af\u540c\u6784\u4e32\u662f\u4e00\u4e2a Lyndon \u4e32\uff0c\u800c\u4e00\u4e2a\u5faa\u73af\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5faa\u73af\u540c\u6784\u4e32\u90fd\u4e0d\u662f Lyndon \u4e32\u3002 \u5982\u679c a,b a,b \u90fd\u662f Lyndon \u4e32\uff0c\u5219\u5f53\u4e14\u4ec5\u5f53 a<b a<b \u65f6 ab ab \u662f\u4e00\u4e2a Lyndon \u4e32\u3002 Lyndon \u4e32\u7684\u524d\u7f00\u4e0d\u4e00\u5b9a\u662f Lyndon \u4e32\u3002 \\texttt{aa} \\texttt{aa} \u662f \\texttt{aab} \\texttt{aab} \u7684\u524d\u7f00\uff0c\u4f46\u5b83\u4e0d\u662f Lyndon \u4e32\u3002","title":"\u5b9a\u4e49"},{"location":"string/lyndon/#lyndon","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 s s \uff0c\u5b58\u5728\u4e14\u4ec5\u5b58\u5728\u4e00\u79cd\u5bf9\u5b83\u7684\u5212\u5206 s = w_1w_2 \\ldots w_m s = w_1w_2 \\ldots w_m \uff0c\u6ee1\u8db3 w_1, w_2, \\ldots w_m w_1, w_2, \\ldots w_m \u90fd\u662f Lyndon \u4e32\u4e14 w_1 \\ge w_2 \\ge \\ldots \\ge w_m w_1 \\ge w_2 \\ge \\ldots \\ge w_m \u3002\u8fd9\u79cd\u5212\u5206\u88ab\u79f0\u4e3a Lyndon \u5206\u89e3 (Lyndon Decomposition)\u3002 \u8bc1\u660e \u5355\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u662f Lyndon \u4e32\u3002\u56e0\u6b64\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u5bf9 s s \u7684\u5212\u5206\uff0c\u6ee1\u8db3 w_1, w_2, \\ldots w_m w_1, w_2, \\ldots w_m \u90fd\u662f Lyndon \u4e32\u3002 \u82e5 w_{i} < w_{i+1} w_{i} < w_{i+1} \uff0c\u5219 w_{i}w_{i+1} w_{i}w_{i+1} \u4e5f\u662f\u4e00\u4e2a Lyndon \u4e32\u3002\u7528 w_{i}w_{i+1} w_{i}w_{i+1} \u66ff\u6362\u6240\u6709 w_{i} < w_{i+1} w_{i} < w_{i+1} \uff0c\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6ee1\u8db3 w_1 \\ge w_2 \\ge \\ldots \\ge w_m w_1 \\ge w_2 \\ge \\ldots \\ge w_m \u7684\u5212\u5206\u3002\u6545\u4efb\u4f55\u5b57\u7b26\u4e32\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u79cd Lyndon \u5206\u89e3\u3002 \u5047\u8bbe s s \u5b58\u5728\u4e24\u4e2a\u6216\u66f4\u591a\u4e0d\u540c\u7684 Lyndon \u5206\u89e3\uff0c\u8bbe\u5176\u4e2d\u4e24\u4e2a\u5206\u522b\u4e3a a_1, a_2, \\ldots, a_n a_1, a_2, \\ldots, a_n \u548c b_1, b_2, \\ldots, b_m b_1, b_2, \\ldots, b_m \u3002\u53d6\u5b83\u4eec\u7b2c\u4e00\u4e2a\u6ee1\u8db3 a_i \\neq b_i a_i \\neq b_i \u7684\u4f4d\u7f6e i i \u3002 \u5982\u56fe\uff0c\u4ee4 a_j a_j \u4e3a\u7a7f\u8fc7 b_i b_i \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u5b50\u4e32\u3002\u8bbe c c \u4e3a b_i b_i \u548c a_j a_j \u7684\u516c\u5171\u90e8\u5206\uff0c\u6211\u4eec\u6709 b_i > a_i \\ge a_j > c b_i > a_i \\ge a_j > c \uff0c\u800c c c \u662f b_i b_i \u7684\u4e00\u4e2a\u771f\u540e\u7f00\uff0c\u56e0\u6b64 b_i b_i \u4e0d\u662f\u4e00\u4e2a Lyndon \u4e32\uff0c\u8fd9\u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u5728 Lyndon \u5206\u89e3\u4e2d\uff0c w_1 w_1 \u4e00\u5b9a\u662f\u6700\u957f\u7684\u4e3a Lyndon \u4e32\u7684\u524d\u7f00\uff0c w_m w_m \u4e00\u5b9a\u662f\u6700\u957f\u7684\u4e3a Lyndon \u4e32\u7684\u540e\u7f00\u3002 \u7531\u4e8e w_1 \\ge w_2 \\ge \\ldots \\ge w_m w_1 \\ge w_2 \\ge \\ldots \\ge w_m \uff0c\u4e14 w_m w_m \u4e25\u683c\u5c0f\u4e8e\u5b83\u7684\u6240\u6709\u771f\u540e\u7f00\uff0c w_m w_m \u4e00\u5b9a\u662f s s \u7684\u6700\u5c0f\u540e\u7f00\u3002","title":"Lyndon \u5206\u89e3"},{"location":"string/lyndon/#_2","text":"\u6c42 s s \u6240\u6709\u5faa\u73af\u540c\u6784\u4e32\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u663e\u7136\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u540e\u7f00\u6570\u7ec4\u6c42\uff0c\u4f46\u6211\u4eec\u8981\u8003\u8651\u5982\u4f55\u4f7f\u7528 Lyndon \u5206\u89e3\u505a\u3002 \u82e5\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0d\u662f\u5faa\u73af\u4e32\uff0c\u5219\u5b83\u6240\u6709\u5faa\u73af\u540c\u6784\u4e32\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u4e00\u5b9a\u662f\u4e00\u4e2a Lyndon \u4e32\u3002\u90a3\u4e48 ss ss \u7684 Lyndon \u5206\u89e3\u4e2d\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u5b50\u4e32\u5305\u542b\u8fd9\u4e2a\u6700\u5c0f\u8868\u793a\u3002\u7531\u4e8e\u5f80\u540e\u662f\u5b83\u7684\u524d\u7f00\uff0c\u5f80\u524d\u662f\u5b83\u7684\u540e\u7f00\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5b50\u4e32\u4e00\u5b9a\u4e0d\u4f1a\u548c\u4e24\u8fb9\u5408\u5e76\uff0c\u5c31\u662f\u8fd9\u4e2a\u6700\u5c0f\u8868\u793a\u3002 \u82e5\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u5faa\u73af\u4e32\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u628a\u5faa\u73af\u8282\u62bd\u51fa\u6765\u6c42\u6700\u5c0f\u8868\u793a\u3002 \u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u53ef\u4ee5\u5f52\u7eb3\u5230\u4e00\u8d77\u3002 for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); for ( int i = n + 1 ; i <= n + n ; ++ i ) a [ i ] = a [ i - n ]; ans = 1 ; for ( int i = 1 ; i <= n + n ; ){ int j = i , k = i ; while ( k + 1 <= n + n && a [ j ] <= a [ k + 1 ]){ if ( a [ j ] == a [ k + 1 ]) ++ j , ++ k ; else j = i , ++ k ; } while ( i <= j ){ i += k - j + 1 ; if ( i <= n ) ans = i ; } } for ( int i = ans ; i <= ans + n - 1 ; ++ i ) std :: printf ( \"%d \" , a [ i ]);","title":"\u6700\u5c0f\u8868\u793a\u6cd5"},{"location":"templateset/","text":"\u6a21\u677f\u5927\u5168 \u00b6 \u8bb0\u5f55\u5e38\u7528\u6a21\u677f\uff0c\u4fbf\u4e8e\u5728\u9057\u5fd8\u65f6\u67e5\u627e\u3002","title":"\u6a21\u677f\u5927\u5168"},{"location":"templateset/#_1","text":"\u8bb0\u5f55\u5e38\u7528\u6a21\u677f\uff0c\u4fbf\u4e8e\u5728\u9057\u5fd8\u65f6\u67e5\u627e\u3002","title":"\u6a21\u677f\u5927\u5168"},{"location":"templateset/string/","text":"\u5b57\u7b26\u4e32 \u00b6 KMP \u00b6 for ( int i = 2 , j = 0 ; i <= n ; ++ i ){ while ( s [ i ] != s [ j + 1 ]) j = next [ j ]; if ( s [ i ] == s [ j + 1 ]) ++ j ; next [ i ] = j ; } \u5b57\u7b26\u4e32\u54c8\u5e0c \u00b6 struct hash_engine { ull key [ maxn ], basep [ maxn ], base ; void init ( const char * s , int n ){ base = 319ull , basep [ 0 ] = 1ull ; for ( int i = 1 ; i <= n ; ++ i ){ key [ i ] = key [ i - 1 ] * base + s [ i ]; basep [ i ] = basep [ i - 1 ] * base ; } } ull operator ()( int l , int r ) const { if ( l > r ) return 0ull ; return key [ r ] - key [ l - 1 ] * basep [ r - l + 1 ]; } } mhash ; \u540e\u7f00\u6570\u7ec4 \u00b6 void build_suffix ( char * s , int * sa , int * rk , int n ){ static int m , cnt [ maxn ], oldsa [ maxn ], oldrk [ maxn << 1 ]; m = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ++ cnt [( int ) s [ i ]], m = std :: max < int > ( m , s [ i ]); for ( int i = 2 ; i <= m ; ++ i ) cnt [ i ] += cnt [ i - 1 ]; for ( int i = n ; i >= 1 ; -- i ) sa [ cnt [( int ) s [ i ]] -- ] = i ; for ( int i = 1 + ( m = 0 ); i <= n ; ++ i ) rk [ sa [ i ]] = s [ sa [ i ]] == s [ sa [ i - 1 ]] ? m : ++ m ; for ( int w = 1 ; m < n ; w <<= 1 ){ std :: fill ( cnt , cnt + m + 1 , 0 ), std :: copy ( rk + 1 , rk + n + 1 , oldrk + 1 ); for ( int i = n - w + 1 ; i <= n ; ++ i ) oldsa [ ++ cnt [ 0 ]] = i ; for ( int i = 1 ; i <= n ; ++ i ) if ( sa [ i ] > w ) oldsa [ ++ cnt [ 0 ]] = sa [ i ] - w ; for ( int i = 1 ; i <= n ; ++ i ) ++ cnt [ rk [ i ]]; for ( int i = 2 ; i <= m ; ++ i ) cnt [ i ] += cnt [ i - 1 ]; for ( int i = n ; i >= 1 ; -- i ) sa [ cnt [ rk [ oldsa [ i ]]] -- ] = oldsa [ i ]; for ( int i = 1 + ( m = 0 ); i <= n ; ++ i ) rk [ sa [ i ]] = oldrk [ sa [ i ]] == oldrk [ sa [ i - 1 ]] && oldrk [ sa [ i ] + w ] == oldrk [ sa [ i - 1 ] + w ] ? m : ++ m ; } } Lyndon \u5206\u89e3 \u00b6 for ( int i = 1 ; i <= n ; ){ int j = i , k = i ; while ( k + 1 <= n && s [ j ] <= s [ k + 1 ]) if ( s [ j ] == s [ k + 1 ]) ++ j , ++ k ; else j = i , ++ k ; while ( i <= j ) i += k - j + 1 ; } AC \u81ea\u52a8\u673a \u00b6 Run \u00b6 int find_prev ( int a , int b ){ int l = 0 , r = std :: min ( a , b ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a - mid + 1 , a ) == mhash ( b - mid + 1 , b )) l = mid ; else r = mid - 1 ; } return l ; } int find_next ( int a , int b ){ int l = 0 , r = std :: min ( n - a + 1 , n - b + 1 ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a , a + mid - 1 ) == mhash ( b , b + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } void lyndon ( int opt , int * Lyn ){ if ( opt ) s [ n + 1 ] = 'a' - 1 ; else s [ n + 1 ] = 'z' + 1 ; static int st [ maxn ], top ; st [ 0 ] = n + 1 , top = 0 ; for ( int i = n ; i >= 1 ; -- i ){ while ( top ){ int x = find_next ( i , st [ top ]); if ( opt ? s [ i + x ] < s [ st [ top ] + x ] : s [ i + x ] > s [ st [ top ] + x ]) -- top ; else break ; } Lyn [ i ] = st [ top ] - 1 , st [ ++ top ] = i ; } } std :: vector < std :: pair < std :: pair < int , int > , int > > runs ( const char * s ){ std :: vector < std :: pair < std :: pair < int , int > , int > > ans ; static int int lyn [ maxn ]; n = std :: strlen ( s + 1 ), mhash . init ( s , n ); for ( int opt = 0 ; opt < 2 ; ++ opt ){ lyndon ( opt , lyn ); for ( int i = 1 ; i <= n ; ++ i ){ int l = i , r = lyn [ i ], p = r - l + 1 ; std :: pair < int , int > mr ( l - find_prev ( l - 1 , r ), r + find_next ( l , r + 1 )); if ( p * 2 <= mr . second - mr . first + 1 ) ans . push_back ( std :: make_pair ( mr , p )); } } std :: sort ( ans . begin (), ans . end ()); ans . resize ( std :: unique ( ans . begin (), ans . end ()) - ans . begin ()); return ans ; }","title":"\u5b57\u7b26\u4e32"},{"location":"templateset/string/#_1","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"templateset/string/#kmp","text":"for ( int i = 2 , j = 0 ; i <= n ; ++ i ){ while ( s [ i ] != s [ j + 1 ]) j = next [ j ]; if ( s [ i ] == s [ j + 1 ]) ++ j ; next [ i ] = j ; }","title":"KMP"},{"location":"templateset/string/#_2","text":"struct hash_engine { ull key [ maxn ], basep [ maxn ], base ; void init ( const char * s , int n ){ base = 319ull , basep [ 0 ] = 1ull ; for ( int i = 1 ; i <= n ; ++ i ){ key [ i ] = key [ i - 1 ] * base + s [ i ]; basep [ i ] = basep [ i - 1 ] * base ; } } ull operator ()( int l , int r ) const { if ( l > r ) return 0ull ; return key [ r ] - key [ l - 1 ] * basep [ r - l + 1 ]; } } mhash ;","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c"},{"location":"templateset/string/#_3","text":"void build_suffix ( char * s , int * sa , int * rk , int n ){ static int m , cnt [ maxn ], oldsa [ maxn ], oldrk [ maxn << 1 ]; m = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ++ cnt [( int ) s [ i ]], m = std :: max < int > ( m , s [ i ]); for ( int i = 2 ; i <= m ; ++ i ) cnt [ i ] += cnt [ i - 1 ]; for ( int i = n ; i >= 1 ; -- i ) sa [ cnt [( int ) s [ i ]] -- ] = i ; for ( int i = 1 + ( m = 0 ); i <= n ; ++ i ) rk [ sa [ i ]] = s [ sa [ i ]] == s [ sa [ i - 1 ]] ? m : ++ m ; for ( int w = 1 ; m < n ; w <<= 1 ){ std :: fill ( cnt , cnt + m + 1 , 0 ), std :: copy ( rk + 1 , rk + n + 1 , oldrk + 1 ); for ( int i = n - w + 1 ; i <= n ; ++ i ) oldsa [ ++ cnt [ 0 ]] = i ; for ( int i = 1 ; i <= n ; ++ i ) if ( sa [ i ] > w ) oldsa [ ++ cnt [ 0 ]] = sa [ i ] - w ; for ( int i = 1 ; i <= n ; ++ i ) ++ cnt [ rk [ i ]]; for ( int i = 2 ; i <= m ; ++ i ) cnt [ i ] += cnt [ i - 1 ]; for ( int i = n ; i >= 1 ; -- i ) sa [ cnt [ rk [ oldsa [ i ]]] -- ] = oldsa [ i ]; for ( int i = 1 + ( m = 0 ); i <= n ; ++ i ) rk [ sa [ i ]] = oldrk [ sa [ i ]] == oldrk [ sa [ i - 1 ]] && oldrk [ sa [ i ] + w ] == oldrk [ sa [ i - 1 ] + w ] ? m : ++ m ; } }","title":"\u540e\u7f00\u6570\u7ec4"},{"location":"templateset/string/#lyndon","text":"for ( int i = 1 ; i <= n ; ){ int j = i , k = i ; while ( k + 1 <= n && s [ j ] <= s [ k + 1 ]) if ( s [ j ] == s [ k + 1 ]) ++ j , ++ k ; else j = i , ++ k ; while ( i <= j ) i += k - j + 1 ; }","title":"Lyndon \u5206\u89e3"},{"location":"templateset/string/#ac","text":"","title":"AC \u81ea\u52a8\u673a"},{"location":"templateset/string/#run","text":"int find_prev ( int a , int b ){ int l = 0 , r = std :: min ( a , b ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a - mid + 1 , a ) == mhash ( b - mid + 1 , b )) l = mid ; else r = mid - 1 ; } return l ; } int find_next ( int a , int b ){ int l = 0 , r = std :: min ( n - a + 1 , n - b + 1 ); while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( mhash ( a , a + mid - 1 ) == mhash ( b , b + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } void lyndon ( int opt , int * Lyn ){ if ( opt ) s [ n + 1 ] = 'a' - 1 ; else s [ n + 1 ] = 'z' + 1 ; static int st [ maxn ], top ; st [ 0 ] = n + 1 , top = 0 ; for ( int i = n ; i >= 1 ; -- i ){ while ( top ){ int x = find_next ( i , st [ top ]); if ( opt ? s [ i + x ] < s [ st [ top ] + x ] : s [ i + x ] > s [ st [ top ] + x ]) -- top ; else break ; } Lyn [ i ] = st [ top ] - 1 , st [ ++ top ] = i ; } } std :: vector < std :: pair < std :: pair < int , int > , int > > runs ( const char * s ){ std :: vector < std :: pair < std :: pair < int , int > , int > > ans ; static int int lyn [ maxn ]; n = std :: strlen ( s + 1 ), mhash . init ( s , n ); for ( int opt = 0 ; opt < 2 ; ++ opt ){ lyndon ( opt , lyn ); for ( int i = 1 ; i <= n ; ++ i ){ int l = i , r = lyn [ i ], p = r - l + 1 ; std :: pair < int , int > mr ( l - find_prev ( l - 1 , r ), r + find_next ( l , r + 1 )); if ( p * 2 <= mr . second - mr . first + 1 ) ans . push_back ( std :: make_pair ( mr , p )); } } std :: sort ( ans . begin (), ans . end ()); ans . resize ( std :: unique ( ans . begin (), ans . end ()) - ans . begin ()); return ans ; }","title":"Run"},{"location":"thought/dogma/","text":"\u6211\u7684 C++ \u4ee3\u7801\u89c4\u8303 \u00b6 \u4ee5 UOJ22 \u5916\u661f\u4eba\u4e00\u9898\u7684\u4ee3\u7801\u4e3a\u4f8b #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 1e3 + 19 , maxv = 5e3 + 19 , mod = 998244353 ; int n , x , a [ maxn ], dp [ maxn ][ maxv ]; bool ok [ maxv ], tmp [ maxv ]; int solve ( int y ){ dp [ 0 ][ y ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j <= x ; ++ j ) dp [ i ][ j ] = ( dp [ i - 1 ][ j % a [ i ]] + ( ll ) dp [ i - 1 ][ j ] * ( i - 1 )) % mod ; return dp [ n ][ x ]; } int main (){ std :: scanf ( \"%d%d\" , & n , & x ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); std :: sort ( a + 1 , a + 1 + n ); ok [ x ] = true ; for ( int i = n ; i >= 1 ; -- i ){ for ( int j = 0 ; j <= x ; ++ j ) if ( ok [ j ]) tmp [ j % a [ i ]] = true , tmp [ j ] = true ; std :: copy ( tmp , tmp + x + 1 , ok ); std :: fill ( tmp , tmp + x + 1 , false ); } for ( int i = a [ 1 ] - 1 ; i >= 0 ; -- i ) if ( ok [ i ]){ std :: printf ( \"%d \\n %d \\n \" , i , solve ( i )); return 0 ; } return 0 ; } \u4e3a\u4e86\u65b9\u4fbf\uff0c\u4f7f\u7528 bits/stdc++.h \u4f5c\u4e3a\u5934\u6587\u4ef6\u3002 \u5982\u679c\u9700\u8981\u4f7f\u7528 64 \u4f4d\u6574\u6570\u6216 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5219\u4f7f\u7528 typedef \u5b9a\u4e49\u522b\u540d\u4e3a ll \u548c ull \u3002 \u4e3a\u4e86\u7f8e\u89c2\uff0c\u4f7f\u7528\u5236\u8868\u7b26\u7f29\u8fdb\u3002 \u6570\u7ec4\u5927\u5c0f\u7528\u5e38\u91cf\u5b9a\u4e49\uff0c\u6a21\u6570\u4e5f\u4e3a\u5e38\u91cf\u3002 \u4e3a\u4e86\u9632\u6b62\u4ece 1 1 \u5f00\u59cb\u6807\u53f7\u5bfc\u81f4\u7684\u8d8a\u754c\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a\u5176\u6700\u5927\u503c\u52a0\u4e0a 19 19 \u3002 19 19 \u662f\u4e00\u4e2a\u5e78\u8fd0\u6570\u5b57\u3002 \u53ef\u4ee5\u7528\u524d\u7f00\u81ea\u52a0\u66ff\u6362\u65f6\uff0c\u4e0d\u4f7f\u7528\u540e\u7f00\u81ea\u52a0\u3002 \u7edd\u5bf9\u4e0d\u4f7f\u7528 using namespace std \u3002 \u5927\u62ec\u53f7\u7d27\u8ddf\u51fd\u6570\u58f0\u660e\uff0c\u4e0d\u7528\u7a7a\u683c\u6216\u662f\u6362\u884c\u5206\u9694\u3002 \u5373\u4f7f\u662f\u6765\u81ea\u4e8e C \u5e93\u7684\u51fd\u6570\uff0c\u4e5f\u8981\u4f7f\u7528 std:: \u89e3\u6790\u4f5c\u7528\u57df\u3002 \u9664\u975e\u7279\u6b8a\u60c5\u51b5\uff0c\u4e0d\u4f7f\u7528\u6d41\u8f93\u5165\u8f93\u51fa\u3002 \u9664\u4e86 ( \u3001 ) \u3001 ! \u548c\u524d\u540e\u7f00\u81ea\u52a0\u7b49\u8fd0\u7b97\u7b26\uff0c\u6240\u6709\u53d8\u91cf\u548c\u8fd0\u7b97\u7b26\u4e4b\u95f4\u90fd\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u7528 true \u548c false \u6765\u76f4\u63a5\u5411 bool \u7c7b\u578b\u8d4b\u503c\uff0c\u800c\u975e 1 \u548c 0 \u3002 \u4e0d\u4f7f\u7528 std::memset \u6216 std::memcpy \uff0c\u800c\u4f7f\u7528 std::fill \u548c std::copy \u3002 \u4e3a\u4e86\u953b\u70bc\u5bf9\u590d\u6742\u4ee3\u7801\u7684\u9002\u5e94\u80fd\u529b\uff0c\u5c3d\u91cf\u4e0d\u4f7f\u7528 C++ 11 \u7684\u5185\u5bb9\u3002 \u5404\u4e2a\u6a21\u5757\u5c3d\u91cf\u5206\u4e3a\u4e00\u4e2a\u4e2a\u51fd\u6570\u3002\u8f83\u7b80\u5355\u7684\u6a21\u5757\u53ef\u4ee5\u4e0d\u5199\u4e3a\u51fd\u6570\uff0c\u4f46\u8981\u7528\u4e00\u4e2a\u7a7a\u884c\u4e0e\u5176\u4ed6\u6a21\u5757\u5206\u9694\u3002 \u4e3a\u4e86\u4ee3\u7801\u7f8e\u89c2\uff0c\u4e0d\u4f7f\u7528\u5b8f\u5b9a\u4e49\u3002\u552f\u4e00\u53ef\u4ee5\u4f7f\u7528\u5b8f\u5b9a\u4e49\u7684\u5730\u65b9\u662f\u7ebf\u6bb5\u6811 #define ls (node << 1) \u548c #define rs (node << 1 | 1) \u3002(\u5728\u6781\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e5f\u5141\u8bb8 #define int long long ) \u4e0d\u4f7f\u7528 class \u3002 \u5404\u4e2a\u6570\u636e\u7ed3\u6784\u548c\u53ef\u4ee5\u81ea\u7136\u5730\u89c6\u4f5c\u5355\u4e2a\u5bf9\u8c61\u7684\u7ed3\u6784\uff0c\u5728\u4e0d\u5f71\u54cd\u6548\u7387\u7684\u60c5\u51b5\u4e0b\u7528 struct \u8fdb\u884c\u9002\u5ea6\u7684\u5c01\u88c5\u3002 \u5f53\u51fd\u6570\u53c2\u6570\u4e3a\u7a7a\u65f6\uff0c\u53c2\u6570\u58f0\u660e\u5e94\u4e3a void \uff1b\u4e3b\u51fd\u6570\u53ef\u4ee5\u4e0d\u52a0 void \u58f0\u660e\u3002 \u6709\u7b26\u53f7\u6574\u6570\u4e0d\u4e0e\u65e0\u7b26\u53f7\u6574\u6570\u76f4\u63a5\u6bd4\u8f83\u3002\u8981\u89c6\u60c5\u51b5\u5bf9\u5176\u4e2d\u4e00\u4e2a\u5f3a\u5236\u8f6c\u6362\u540e\u6bd4\u8f83\u3002 \u5373\u4f7f\u53ef\u4ee5\u63d0\u524d\u5f97\u51fa\u7b54\u6848\uff0c\u4e5f\u8981\u5c06\u6570\u636e\u5168\u90e8\u8bfb\u5165\u3002","title":"\u6211\u7684\u4ee3\u7801\u89c4\u8303"},{"location":"thought/dogma/#c","text":"\u4ee5 UOJ22 \u5916\u661f\u4eba\u4e00\u9898\u7684\u4ee3\u7801\u4e3a\u4f8b #include <bits/stdc++.h> typedef long long int ll ; const int maxn = 1e3 + 19 , maxv = 5e3 + 19 , mod = 998244353 ; int n , x , a [ maxn ], dp [ maxn ][ maxv ]; bool ok [ maxv ], tmp [ maxv ]; int solve ( int y ){ dp [ 0 ][ y ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j <= x ; ++ j ) dp [ i ][ j ] = ( dp [ i - 1 ][ j % a [ i ]] + ( ll ) dp [ i - 1 ][ j ] * ( i - 1 )) % mod ; return dp [ n ][ x ]; } int main (){ std :: scanf ( \"%d%d\" , & n , & x ); for ( int i = 1 ; i <= n ; ++ i ) std :: scanf ( \"%d\" , a + i ); std :: sort ( a + 1 , a + 1 + n ); ok [ x ] = true ; for ( int i = n ; i >= 1 ; -- i ){ for ( int j = 0 ; j <= x ; ++ j ) if ( ok [ j ]) tmp [ j % a [ i ]] = true , tmp [ j ] = true ; std :: copy ( tmp , tmp + x + 1 , ok ); std :: fill ( tmp , tmp + x + 1 , false ); } for ( int i = a [ 1 ] - 1 ; i >= 0 ; -- i ) if ( ok [ i ]){ std :: printf ( \"%d \\n %d \\n \" , i , solve ( i )); return 0 ; } return 0 ; } \u4e3a\u4e86\u65b9\u4fbf\uff0c\u4f7f\u7528 bits/stdc++.h \u4f5c\u4e3a\u5934\u6587\u4ef6\u3002 \u5982\u679c\u9700\u8981\u4f7f\u7528 64 \u4f4d\u6574\u6570\u6216 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5219\u4f7f\u7528 typedef \u5b9a\u4e49\u522b\u540d\u4e3a ll \u548c ull \u3002 \u4e3a\u4e86\u7f8e\u89c2\uff0c\u4f7f\u7528\u5236\u8868\u7b26\u7f29\u8fdb\u3002 \u6570\u7ec4\u5927\u5c0f\u7528\u5e38\u91cf\u5b9a\u4e49\uff0c\u6a21\u6570\u4e5f\u4e3a\u5e38\u91cf\u3002 \u4e3a\u4e86\u9632\u6b62\u4ece 1 1 \u5f00\u59cb\u6807\u53f7\u5bfc\u81f4\u7684\u8d8a\u754c\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a\u5176\u6700\u5927\u503c\u52a0\u4e0a 19 19 \u3002 19 19 \u662f\u4e00\u4e2a\u5e78\u8fd0\u6570\u5b57\u3002 \u53ef\u4ee5\u7528\u524d\u7f00\u81ea\u52a0\u66ff\u6362\u65f6\uff0c\u4e0d\u4f7f\u7528\u540e\u7f00\u81ea\u52a0\u3002 \u7edd\u5bf9\u4e0d\u4f7f\u7528 using namespace std \u3002 \u5927\u62ec\u53f7\u7d27\u8ddf\u51fd\u6570\u58f0\u660e\uff0c\u4e0d\u7528\u7a7a\u683c\u6216\u662f\u6362\u884c\u5206\u9694\u3002 \u5373\u4f7f\u662f\u6765\u81ea\u4e8e C \u5e93\u7684\u51fd\u6570\uff0c\u4e5f\u8981\u4f7f\u7528 std:: \u89e3\u6790\u4f5c\u7528\u57df\u3002 \u9664\u975e\u7279\u6b8a\u60c5\u51b5\uff0c\u4e0d\u4f7f\u7528\u6d41\u8f93\u5165\u8f93\u51fa\u3002 \u9664\u4e86 ( \u3001 ) \u3001 ! \u548c\u524d\u540e\u7f00\u81ea\u52a0\u7b49\u8fd0\u7b97\u7b26\uff0c\u6240\u6709\u53d8\u91cf\u548c\u8fd0\u7b97\u7b26\u4e4b\u95f4\u90fd\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u7528 true \u548c false \u6765\u76f4\u63a5\u5411 bool \u7c7b\u578b\u8d4b\u503c\uff0c\u800c\u975e 1 \u548c 0 \u3002 \u4e0d\u4f7f\u7528 std::memset \u6216 std::memcpy \uff0c\u800c\u4f7f\u7528 std::fill \u548c std::copy \u3002 \u4e3a\u4e86\u953b\u70bc\u5bf9\u590d\u6742\u4ee3\u7801\u7684\u9002\u5e94\u80fd\u529b\uff0c\u5c3d\u91cf\u4e0d\u4f7f\u7528 C++ 11 \u7684\u5185\u5bb9\u3002 \u5404\u4e2a\u6a21\u5757\u5c3d\u91cf\u5206\u4e3a\u4e00\u4e2a\u4e2a\u51fd\u6570\u3002\u8f83\u7b80\u5355\u7684\u6a21\u5757\u53ef\u4ee5\u4e0d\u5199\u4e3a\u51fd\u6570\uff0c\u4f46\u8981\u7528\u4e00\u4e2a\u7a7a\u884c\u4e0e\u5176\u4ed6\u6a21\u5757\u5206\u9694\u3002 \u4e3a\u4e86\u4ee3\u7801\u7f8e\u89c2\uff0c\u4e0d\u4f7f\u7528\u5b8f\u5b9a\u4e49\u3002\u552f\u4e00\u53ef\u4ee5\u4f7f\u7528\u5b8f\u5b9a\u4e49\u7684\u5730\u65b9\u662f\u7ebf\u6bb5\u6811 #define ls (node << 1) \u548c #define rs (node << 1 | 1) \u3002(\u5728\u6781\u7279\u6b8a\u60c5\u51b5\u4e0b\u4e5f\u5141\u8bb8 #define int long long ) \u4e0d\u4f7f\u7528 class \u3002 \u5404\u4e2a\u6570\u636e\u7ed3\u6784\u548c\u53ef\u4ee5\u81ea\u7136\u5730\u89c6\u4f5c\u5355\u4e2a\u5bf9\u8c61\u7684\u7ed3\u6784\uff0c\u5728\u4e0d\u5f71\u54cd\u6548\u7387\u7684\u60c5\u51b5\u4e0b\u7528 struct \u8fdb\u884c\u9002\u5ea6\u7684\u5c01\u88c5\u3002 \u5f53\u51fd\u6570\u53c2\u6570\u4e3a\u7a7a\u65f6\uff0c\u53c2\u6570\u58f0\u660e\u5e94\u4e3a void \uff1b\u4e3b\u51fd\u6570\u53ef\u4ee5\u4e0d\u52a0 void \u58f0\u660e\u3002 \u6709\u7b26\u53f7\u6574\u6570\u4e0d\u4e0e\u65e0\u7b26\u53f7\u6574\u6570\u76f4\u63a5\u6bd4\u8f83\u3002\u8981\u89c6\u60c5\u51b5\u5bf9\u5176\u4e2d\u4e00\u4e2a\u5f3a\u5236\u8f6c\u6362\u540e\u6bd4\u8f83\u3002 \u5373\u4f7f\u53ef\u4ee5\u63d0\u524d\u5f97\u51fa\u7b54\u6848\uff0c\u4e5f\u8981\u5c06\u6570\u636e\u5168\u90e8\u8bfb\u5165\u3002","title":"\u6211\u7684 C++ \u4ee3\u7801\u89c4\u8303"},{"location":"thought/trit/","text":"\u4e09\u5206\u6cd5\u7684\u9002\u7528\u8303\u56f4 \u00b6 \u4e09\u5206\u6cd5\u662f\u4e00\u79cd\u5e38\u7528\u7684\u6c42\u51f8\u51fd\u6570\u6700\u503c\u7684\u65b9\u6cd5\u3002\u5b83\u7684\u5b9e\u73b0\u548c\u4e8c\u5206\u6cd5\u6ca1\u4ec0\u4e48\u533a\u522b\u3002 while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( check ( mid ) < check ( mid + 1 )) r = mid ; else l = mid + 1 ; } \u6709\u7684\u4eba\u628a\u4e0a\u9762\u7684\u8fc7\u7a0b\u79f0\u505a\u662f\u5728\u4e8c\u5206\u659c\u7387\u3002\u8fd9\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u4e0d\u8fc7\u5b83\u4e0d\u662f\u5728\u4e8c\u5206\u659c\u7387\u7684\u5927\u5c0f\uff0c\u800c\u662f\u5728\u4e8c\u5206\u659c\u7387\u7684\u6b63\u8d1f\u6027\u3002 \u5982\u679c\u4e0d\u8003\u8651\u659c\u7387\u4e3a 0 0 \u7684\u60c5\u51b5\uff0c\u5355\u5cf0\u51fd\u6570\u659c\u7387\u7684\u6b63\u8d1f\u6027\u4e5f\u662f\u5355\u8c03\u7684\u3002\u56e0\u6b64\u7eb5\u4f7f\u4e00\u4e2a\u5355\u5cf0\u51fd\u6570\u4e0d\u5177\u6709\u51f8\u6027\uff0c\u53ea\u8981\u5176\u4e0d\u5b58\u5728\u659c\u7387\u4e3a 0 0 \u7684\u7ebf\u6bb5 ( f(i)\\neq f(i+1) f(i)\\neq f(i+1) )\uff0c\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u4e09\u5206\u6cd5\u6c42\u6700\u503c\u3002\u51f8\u51fd\u6570\u5b58\u5728\u659c\u7387\u4e3a 0 0 \u7684\u7ebf\u6bb5\u662f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\u7684\uff0c\u56e0\u4e3a\u51f8\u51fd\u6570\u53ea\u6709\u6700\u503c\u70b9\u7684\u659c\u7387\u53ef\u80fd\u4e3a 0 0 \u3002 \u5982\u679c\u5355\u5cf0\u51fd\u6570\u5b58\u5728\u659c\u7387\u4e3a 0 0 \u7684\u6bb5\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u4ee5\u4e0b\u7684\u7384\u5b66\u4ee3\u7801\u9a97\u5206\uff1a while ( r - l > 10 ){ int m1 = l + ( r - l + 1 ) / 3 , m2 = r - ( r - l + 1 ) / 3 ; if ( check ( m1 ) < check ( m2 )) r = m2 - 1 ; else l = m1 ; } \u5176\u201c\u539f\u7406\u201d\u662f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u957f\u957f\u7684\u4e00\u6bb5\u7684\u659c\u7387\u66f4\u4e0d\u5bb9\u6613\u4e3a 0 0 \u3002","title":"\u4e09\u5206\u6cd5\u7684\u9002\u7528\u8303\u56f4"},{"location":"thought/trit/#_1","text":"\u4e09\u5206\u6cd5\u662f\u4e00\u79cd\u5e38\u7528\u7684\u6c42\u51f8\u51fd\u6570\u6700\u503c\u7684\u65b9\u6cd5\u3002\u5b83\u7684\u5b9e\u73b0\u548c\u4e8c\u5206\u6cd5\u6ca1\u4ec0\u4e48\u533a\u522b\u3002 while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( check ( mid ) < check ( mid + 1 )) r = mid ; else l = mid + 1 ; } \u6709\u7684\u4eba\u628a\u4e0a\u9762\u7684\u8fc7\u7a0b\u79f0\u505a\u662f\u5728\u4e8c\u5206\u659c\u7387\u3002\u8fd9\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u4e0d\u8fc7\u5b83\u4e0d\u662f\u5728\u4e8c\u5206\u659c\u7387\u7684\u5927\u5c0f\uff0c\u800c\u662f\u5728\u4e8c\u5206\u659c\u7387\u7684\u6b63\u8d1f\u6027\u3002 \u5982\u679c\u4e0d\u8003\u8651\u659c\u7387\u4e3a 0 0 \u7684\u60c5\u51b5\uff0c\u5355\u5cf0\u51fd\u6570\u659c\u7387\u7684\u6b63\u8d1f\u6027\u4e5f\u662f\u5355\u8c03\u7684\u3002\u56e0\u6b64\u7eb5\u4f7f\u4e00\u4e2a\u5355\u5cf0\u51fd\u6570\u4e0d\u5177\u6709\u51f8\u6027\uff0c\u53ea\u8981\u5176\u4e0d\u5b58\u5728\u659c\u7387\u4e3a 0 0 \u7684\u7ebf\u6bb5 ( f(i)\\neq f(i+1) f(i)\\neq f(i+1) )\uff0c\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u4e09\u5206\u6cd5\u6c42\u6700\u503c\u3002\u51f8\u51fd\u6570\u5b58\u5728\u659c\u7387\u4e3a 0 0 \u7684\u7ebf\u6bb5\u662f\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\u7684\uff0c\u56e0\u4e3a\u51f8\u51fd\u6570\u53ea\u6709\u6700\u503c\u70b9\u7684\u659c\u7387\u53ef\u80fd\u4e3a 0 0 \u3002 \u5982\u679c\u5355\u5cf0\u51fd\u6570\u5b58\u5728\u659c\u7387\u4e3a 0 0 \u7684\u6bb5\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u4ee5\u4e0b\u7684\u7384\u5b66\u4ee3\u7801\u9a97\u5206\uff1a while ( r - l > 10 ){ int m1 = l + ( r - l + 1 ) / 3 , m2 = r - ( r - l + 1 ) / 3 ; if ( check ( m1 ) < check ( m2 )) r = m2 - 1 ; else l = m1 ; } \u5176\u201c\u539f\u7406\u201d\u662f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u957f\u957f\u7684\u4e00\u6bb5\u7684\u659c\u7387\u66f4\u4e0d\u5bb9\u6613\u4e3a 0 0 \u3002","title":"\u4e09\u5206\u6cd5\u7684\u9002\u7528\u8303\u56f4"},{"location":"travel/csp2020/","text":"CSP2020 \u7206\u96f6\u8bb0 \u00b6 \u8fdb\u4e86\u8003\u573a\uff0c\u8003\u524d 3 3 min \u624d\u8ba9\u52a8\u952e\u76d8\uff0c\u7ed3\u679c\u53d1\u73b0\u81ea\u5df1\u7684\u952e\u76d8\u7684\u7a7a\u683c\u952e\u6709\u4e9b\u95ee\u9898\uff0c\u8981\u7528\u7279\u522b\u5927\u7684\u529b\u6309\u5230\u6b63\u4e2d\u592e\u624d\u80fd\u6309\u52a8\u3002 \u5148\u904d\u5386\u4e00\u4e0b\u6240\u6709\u9898\u3002T1 \u662f\u4e00\u9053\u65e0\u8111\u6a21\u62df\uff0c\u4f46\u611f\u89c9\u5904\u7406\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53ef\u80fd\u8981\u82b1\u534a\u5c0f\u65f6\u4ee5\u4e0a\uff1bT2 \u4e00\u773c\u6ca1\u770b\u51fa\u505a\u6cd5\uff0c\u4f46\u597d\u50cf\u4e0d\u592a\u96be\uff1bT3 \u4e0d\u4f1a\uff1bT4 \u4e0d\u4f1a\u3002 \u4e8e\u662f\u786c\u521a T1\u3002\u76f4\u5230\u6211\u5f00\u5199\u624d\u53d1\u73b0\u8fd9\u9898\u662f\u591a\u4e48\u6076\u5fc3\uff0c\u4e8e\u662f\u5927\u7ea6 17:30 17:30 \u5de6\u53f3\u624d\u8fc7\u6389\u5927\u6837\u4f8b\u3002 \u7136\u540e\u5f00 T2\uff0c\u53d1\u73b0\u5c31\u662f\u9053\u6c34\u9898\uff0c 10 10 min \u5207\u6389\u3002 \u53bb\u5199 T3\uff0c\u60f3\u4e86 30 30 min \u60f3\u51fa\u4e86 O(n^2) O(n^2) \u540e\u7f00\u79ef\uff0c\u53c8\u7801\u4e86 30 30 min\uff0c\u4e00\u6b21\u8fc7\u6389\u6240\u6709\u6837\u4f8b\uff08\u5927\u6837\u4f8b\u592a\u6c34\uff09\u3002\u51e0\u4e4e\u5728\u7801\u5b8c\u7684\u4e00\u523b\uff0c\u53c8\u60f3\u51fa\u4e86\u4f18\u5316\u505a\u6cd5 O(n) O(n) \u6b63\u89e3\uff0c\u4e8e\u662f\u6211\u8bd5\u56fe\u5728\u5f53\u524d\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u6539\u51fa\u6b63\u89e3\u3002\u7531\u4e8e\u5934\u8111\u6df7\u4e71\uff08T1 = 120 120 min, T2 = 10 10 min)\uff0c\u5199\u4e86 50 50 min \u90fd\u6ca1\u8c03\u8fc7\uff0c\u53ea\u80fd\u4f5c\u7f62\u3002 T4 \u6ca1\u52a8\u3002 \u8ddf\u540c\u5b66\u8ba8\u8bba\uff0c\u624d\u53d1\u73b0 T2 \u4fdd\u8bc1 q q \u4e92\u4e0d\u76f8\u540c\uff0c\u5b8c\u5168\u6ca1\u5fc5\u8981\u5f00 std::map \uff0c\u53ef\u4ee5 O(n) O(n) \u8fc7\uff0c\u4e0d\u8fc7\u76f8\u4fe1\u5c31\u7b97\u662f map \u4e5f\u80fd\u5728 8700k \u4e0a\u8fc7 10^6 10^6 \u3002\u56de\u6765\u6d4b\u624d\u53d1\u73b0 map \u7684 log \u662f\u8fc7\u4e0d\u4e86 10^6 10^6 \u7684\uff0cT2 \u53ef\u80fd\u53ea\u6709 60 60 \u5206\uff1bT1 \u6302\u6210 40 40 \u5206\uff0cT3 \u5728\u4e0d\u540c\u5e73\u53f0\u5206\u522b\u6c34\u5230 60 \\sim 80 60 \\sim 80 \u4e0d\u7b49\u7684\u6210\u7ee9\u3002Clouder \u8868\u793a T4 \u662f\u6c34\u9898\uff0c\u6211\u5374\u78b0\u90fd\u6ca1\u78b0\u3002 \u4eba\u5df2\u7ecf\u6ca1\u4e86\uff0c\u5e0c\u671b CSP \u548c NOIP \u65e0\u5173\u3002 \u6700\u7ec8\u56e0\u4e3a CCF \u6570\u636e\u6c34\uff0c\u62ff\u4e86 220 220 \u3002\u800c\u5f3a\u5927\u7684 Clouder \u66b4\u780d 325 325 \u5206 orz","title":"CSP2020 \u7206\u96f6\u8bb0"},{"location":"travel/csp2020/#csp2020","text":"\u8fdb\u4e86\u8003\u573a\uff0c\u8003\u524d 3 3 min \u624d\u8ba9\u52a8\u952e\u76d8\uff0c\u7ed3\u679c\u53d1\u73b0\u81ea\u5df1\u7684\u952e\u76d8\u7684\u7a7a\u683c\u952e\u6709\u4e9b\u95ee\u9898\uff0c\u8981\u7528\u7279\u522b\u5927\u7684\u529b\u6309\u5230\u6b63\u4e2d\u592e\u624d\u80fd\u6309\u52a8\u3002 \u5148\u904d\u5386\u4e00\u4e0b\u6240\u6709\u9898\u3002T1 \u662f\u4e00\u9053\u65e0\u8111\u6a21\u62df\uff0c\u4f46\u611f\u89c9\u5904\u7406\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u53ef\u80fd\u8981\u82b1\u534a\u5c0f\u65f6\u4ee5\u4e0a\uff1bT2 \u4e00\u773c\u6ca1\u770b\u51fa\u505a\u6cd5\uff0c\u4f46\u597d\u50cf\u4e0d\u592a\u96be\uff1bT3 \u4e0d\u4f1a\uff1bT4 \u4e0d\u4f1a\u3002 \u4e8e\u662f\u786c\u521a T1\u3002\u76f4\u5230\u6211\u5f00\u5199\u624d\u53d1\u73b0\u8fd9\u9898\u662f\u591a\u4e48\u6076\u5fc3\uff0c\u4e8e\u662f\u5927\u7ea6 17:30 17:30 \u5de6\u53f3\u624d\u8fc7\u6389\u5927\u6837\u4f8b\u3002 \u7136\u540e\u5f00 T2\uff0c\u53d1\u73b0\u5c31\u662f\u9053\u6c34\u9898\uff0c 10 10 min \u5207\u6389\u3002 \u53bb\u5199 T3\uff0c\u60f3\u4e86 30 30 min \u60f3\u51fa\u4e86 O(n^2) O(n^2) \u540e\u7f00\u79ef\uff0c\u53c8\u7801\u4e86 30 30 min\uff0c\u4e00\u6b21\u8fc7\u6389\u6240\u6709\u6837\u4f8b\uff08\u5927\u6837\u4f8b\u592a\u6c34\uff09\u3002\u51e0\u4e4e\u5728\u7801\u5b8c\u7684\u4e00\u523b\uff0c\u53c8\u60f3\u51fa\u4e86\u4f18\u5316\u505a\u6cd5 O(n) O(n) \u6b63\u89e3\uff0c\u4e8e\u662f\u6211\u8bd5\u56fe\u5728\u5f53\u524d\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u6539\u51fa\u6b63\u89e3\u3002\u7531\u4e8e\u5934\u8111\u6df7\u4e71\uff08T1 = 120 120 min, T2 = 10 10 min)\uff0c\u5199\u4e86 50 50 min \u90fd\u6ca1\u8c03\u8fc7\uff0c\u53ea\u80fd\u4f5c\u7f62\u3002 T4 \u6ca1\u52a8\u3002 \u8ddf\u540c\u5b66\u8ba8\u8bba\uff0c\u624d\u53d1\u73b0 T2 \u4fdd\u8bc1 q q \u4e92\u4e0d\u76f8\u540c\uff0c\u5b8c\u5168\u6ca1\u5fc5\u8981\u5f00 std::map \uff0c\u53ef\u4ee5 O(n) O(n) \u8fc7\uff0c\u4e0d\u8fc7\u76f8\u4fe1\u5c31\u7b97\u662f map \u4e5f\u80fd\u5728 8700k \u4e0a\u8fc7 10^6 10^6 \u3002\u56de\u6765\u6d4b\u624d\u53d1\u73b0 map \u7684 log \u662f\u8fc7\u4e0d\u4e86 10^6 10^6 \u7684\uff0cT2 \u53ef\u80fd\u53ea\u6709 60 60 \u5206\uff1bT1 \u6302\u6210 40 40 \u5206\uff0cT3 \u5728\u4e0d\u540c\u5e73\u53f0\u5206\u522b\u6c34\u5230 60 \\sim 80 60 \\sim 80 \u4e0d\u7b49\u7684\u6210\u7ee9\u3002Clouder \u8868\u793a T4 \u662f\u6c34\u9898\uff0c\u6211\u5374\u78b0\u90fd\u6ca1\u78b0\u3002 \u4eba\u5df2\u7ecf\u6ca1\u4e86\uff0c\u5e0c\u671b CSP \u548c NOIP \u65e0\u5173\u3002 \u6700\u7ec8\u56e0\u4e3a CCF \u6570\u636e\u6c34\uff0c\u62ff\u4e86 220 220 \u3002\u800c\u5f3a\u5927\u7684 Clouder \u66b4\u780d 325 325 \u5206 orz","title":"CSP2020 \u7206\u96f6\u8bb0"},{"location":"travel/noip2020/","text":"NOIP2020 \u7206\u70b8\u8bb0 \u00b6 \u5f00\u8003\u770b T1\uff0c\u53d1\u73b0\u662f\u4e00\u9053\u6c34\u9898\uff0c\u534a\u5c0f\u65f6\u5de6\u53f3\u5207\u6389\u3002 \u518d\u770b T2\uff0c\u7a0d\u52a0\u601d\u8003\uff0c\u5199\u4e86\u54c8\u5e0c+\u8c03\u548c\u7ea7\u6570\u3002\u7136\u800c\u7528\u4e86\u795e\u5947\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u590d\u6742\u5ea6\u70b8\u6210 O(n\\log n\\log 26) O(n\\log n\\log 26) \uff0c\u5927\u6982\u53ea\u6709 80 80 \u5206\u3002\u6b64\u65f6\u624d 9:36 9:36 \u3002 \u5f00 T3\u3002\u82b1 1 1 h \u6253\u4e86\u4e00\u4e2a\u5047\u505a\u6cd5\uff0c\u53c8\u82b1\u4e0d\u5230 1h \u6253\u4e86\u4e00\u4e2a O(nm^2) O(nm^2) \u7b97\u6cd5\uff0c\u53c8\u82b1\u4e0d\u5230 30 30 min \u7a0d\u7a0d\u4f18\u5316\u3002\u671f\u671b 40 40 \u5206\u3002 T4 \u611f\u89c9\u6b63\u89e3\u4e0d\u592a\u96be\uff0c\u4f46\u662f\u60f3\u4e0d\u51fa\u5177\u4f53\u600e\u4e48\u505a\u3002\u4e8e\u662f\u7528\u5269\u4e0b\u4e0d\u5230 1h \u7684\u65f6\u95f4\u6253\u4e86 40 40 \u5206\u66b4\u529b\u3002 \u6700\u540e\u5f97\u5206 60+84+40+35=219 60+84+40+35=219 \uff0c\u52c9\u5f3a\u6df7\u4e86\u4e2a\u7701\u4e00\u3002","title":"NOIP2020 \u7206\u70b8\u8bb0"},{"location":"travel/noip2020/#noip2020","text":"\u5f00\u8003\u770b T1\uff0c\u53d1\u73b0\u662f\u4e00\u9053\u6c34\u9898\uff0c\u534a\u5c0f\u65f6\u5de6\u53f3\u5207\u6389\u3002 \u518d\u770b T2\uff0c\u7a0d\u52a0\u601d\u8003\uff0c\u5199\u4e86\u54c8\u5e0c+\u8c03\u548c\u7ea7\u6570\u3002\u7136\u800c\u7528\u4e86\u795e\u5947\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u590d\u6742\u5ea6\u70b8\u6210 O(n\\log n\\log 26) O(n\\log n\\log 26) \uff0c\u5927\u6982\u53ea\u6709 80 80 \u5206\u3002\u6b64\u65f6\u624d 9:36 9:36 \u3002 \u5f00 T3\u3002\u82b1 1 1 h \u6253\u4e86\u4e00\u4e2a\u5047\u505a\u6cd5\uff0c\u53c8\u82b1\u4e0d\u5230 1h \u6253\u4e86\u4e00\u4e2a O(nm^2) O(nm^2) \u7b97\u6cd5\uff0c\u53c8\u82b1\u4e0d\u5230 30 30 min \u7a0d\u7a0d\u4f18\u5316\u3002\u671f\u671b 40 40 \u5206\u3002 T4 \u611f\u89c9\u6b63\u89e3\u4e0d\u592a\u96be\uff0c\u4f46\u662f\u60f3\u4e0d\u51fa\u5177\u4f53\u600e\u4e48\u505a\u3002\u4e8e\u662f\u7528\u5269\u4e0b\u4e0d\u5230 1h \u7684\u65f6\u95f4\u6253\u4e86 40 40 \u5206\u66b4\u529b\u3002 \u6700\u540e\u5f97\u5206 60+84+40+35=219 60+84+40+35=219 \uff0c\u52c9\u5f3a\u6df7\u4e86\u4e2a\u7701\u4e00\u3002","title":"NOIP2020 \u7206\u70b8\u8bb0"},{"location":"travel/wc2021/","text":"WC2021 \u6e38\u8bb0 \u00b6 \u5148\u82b1 20 \\text{min} 20 \\text{min} \u628a\u6240\u6709\u9898\u770b\u4e86\u4e00\u904d\uff0c\u4f46\u662f\u4ec0\u4e48\u60f3\u6cd5\u90fd\u6ca1\u6709\u3002 30 \\text{min} 30 \\text{min} \u65f6\u5f00\u59cb\u786c\u521a T1\uff0c\u60f3\u5230 1\\text{h} 1\\text{h} \u65f6\u60f3\u51fa\u4e86\u4e00\u4e2a\u7ed3\u8bba\uff0c\u7136\u540e\u6253\u4e86\u4e00\u4e2a\u5047\u505a\u6cd5\u3002\u7a0d\u5fae\u6539\u8fdb\u4e86\u4e00\u4e0b\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a\uff08\u5e94\u8be5\uff09\u6ca1\u4ec0\u4e48\u95ee\u9898\u7684 O(n^2\\log n) O(n^2\\log n) \u5047\u505a\u6cd5\uff0c\u8fc7\u6389 n=3000 n=3000 \u7684\u6837\u4f8b\u3002 \u6b64\u65f6\u5df2\u662f 10:30 10:30 \u5de6\u53f3\u3002\u7531\u4e8e\u4e0d\u786e\u5b9a T1 \u7684\u505a\u6cd5\u662f\u5426\u662f\u5bf9\u7684\uff0c\u53cd\u590d\u6821\u9a8c\u4e86\u4e00\u4f1a\u624d\u5f00\u59cb\u505a T2\u3002 \u53d1\u73b0 T2 O(nm|E|) O(nm|E|) \u505a\u6cd5\u5f88\u663e\u7136\uff0c\u7531\u4e8e\u5934\u6655\u8111\u80c0\uff0c\u82b1\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\u5de6\u53f3\u6253\u4e86\u51fa\u6765\u3002\u53d1\u73b0 n=5000 n=5000 \u7684\u6837\u4f8b\u8981\u8dd1\u63a5\u8fd1 3s 3s \uff0c\u7531\u4e8e\u5934\u6655\u8111\u80c0\u6ca1\u6709\u53d1\u73b0 n=5000 n=5000 \u7684\u90e8\u5206\u5206\u6ca1\u6709\u95ee\u53f7\u53ef\u4ee5\u76f4\u63a5 O(nm) O(nm) \uff0c\u4e8e\u662f\u82b1\u4e86\u4e00\u4f1a\u5361\u5e38\uff0c\u53d1\u73b0\u5361\u4e0d\u8fdb 2.5s 2.5s \uff0c\u4f5c\u7f62\u3002\u53ea\u80fd\u9009\u62e9\u76f8\u4fe1 8700k \u6bd4 2.2\\text{Ghz} 2.2\\text{Ghz} \u7684\u8001\u7237\u673a\u7684\u4e09\u500d\u8fd8\u5feb\u3002 \u6b64\u65f6\u53ea\u5269 1\\text{h} 1\\text{h} \u4e86\u3002\u731c\u6590\u6ce2\u90a3\u5951\u6a21 m m \u6709\u5faa\u73af\u8282\uff0c\u4e3a\u4e86\u4fdd\u9669\u8ba1\u7b97 10m 10m \u9879\u3002 \u9884\u8ba1 (0\\sim 64)+(55\\sim 70)+20=75\\sim 154 (0\\sim 64)+(55\\sim 70)+20=75\\sim 154 \u3002\u8fd9\u4e2a\u5371\u9669\u7684\u5206\u6570\u53ef\u80fd\u4f1a\u76f4\u63a5\u628a\u6211\u9001\u9000\u5f79\u3002 \u51fa\u6210\u7ee9\u540e\u53d1\u73b0 T1 \u6709 80 80 \u5206\uff0c\u5f88\u4e0d\u9519\u3002T2 \u53ea\u6709 55 55 \uff0c\u672c\u6765\u8ba4\u4e3a\u8fd9\u662f\u5f88\u5408\u7406\u7684\u4e8b\uff0c\u4f46\u5728 LOJ\uff0c\u6d1b\u8c37\u548c\u672c\u5730\u90fd\u53ef\u4ee5\u5361\u8fdb 70 70 \u5206\uff0c\u4e8e\u662f\u7533\u8bc9\u3002T3 \u5982\u9884\u671f\uff0c 20 20 \u5206\u3002 \u5206\u6ca1\u8981\u5230\u3002\u6700\u7ec8\u5f97\u5206 155 155 \uff0c\u88ab\u5361 au \u7ebf\u4e86\u3002","title":"WC2021 \u6253\u94c1\u8bb0"},{"location":"travel/wc2021/#wc2021","text":"\u5148\u82b1 20 \\text{min} 20 \\text{min} \u628a\u6240\u6709\u9898\u770b\u4e86\u4e00\u904d\uff0c\u4f46\u662f\u4ec0\u4e48\u60f3\u6cd5\u90fd\u6ca1\u6709\u3002 30 \\text{min} 30 \\text{min} \u65f6\u5f00\u59cb\u786c\u521a T1\uff0c\u60f3\u5230 1\\text{h} 1\\text{h} \u65f6\u60f3\u51fa\u4e86\u4e00\u4e2a\u7ed3\u8bba\uff0c\u7136\u540e\u6253\u4e86\u4e00\u4e2a\u5047\u505a\u6cd5\u3002\u7a0d\u5fae\u6539\u8fdb\u4e86\u4e00\u4e0b\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a\uff08\u5e94\u8be5\uff09\u6ca1\u4ec0\u4e48\u95ee\u9898\u7684 O(n^2\\log n) O(n^2\\log n) \u5047\u505a\u6cd5\uff0c\u8fc7\u6389 n=3000 n=3000 \u7684\u6837\u4f8b\u3002 \u6b64\u65f6\u5df2\u662f 10:30 10:30 \u5de6\u53f3\u3002\u7531\u4e8e\u4e0d\u786e\u5b9a T1 \u7684\u505a\u6cd5\u662f\u5426\u662f\u5bf9\u7684\uff0c\u53cd\u590d\u6821\u9a8c\u4e86\u4e00\u4f1a\u624d\u5f00\u59cb\u505a T2\u3002 \u53d1\u73b0 T2 O(nm|E|) O(nm|E|) \u505a\u6cd5\u5f88\u663e\u7136\uff0c\u7531\u4e8e\u5934\u6655\u8111\u80c0\uff0c\u82b1\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\u5de6\u53f3\u6253\u4e86\u51fa\u6765\u3002\u53d1\u73b0 n=5000 n=5000 \u7684\u6837\u4f8b\u8981\u8dd1\u63a5\u8fd1 3s 3s \uff0c\u7531\u4e8e\u5934\u6655\u8111\u80c0\u6ca1\u6709\u53d1\u73b0 n=5000 n=5000 \u7684\u90e8\u5206\u5206\u6ca1\u6709\u95ee\u53f7\u53ef\u4ee5\u76f4\u63a5 O(nm) O(nm) \uff0c\u4e8e\u662f\u82b1\u4e86\u4e00\u4f1a\u5361\u5e38\uff0c\u53d1\u73b0\u5361\u4e0d\u8fdb 2.5s 2.5s \uff0c\u4f5c\u7f62\u3002\u53ea\u80fd\u9009\u62e9\u76f8\u4fe1 8700k \u6bd4 2.2\\text{Ghz} 2.2\\text{Ghz} \u7684\u8001\u7237\u673a\u7684\u4e09\u500d\u8fd8\u5feb\u3002 \u6b64\u65f6\u53ea\u5269 1\\text{h} 1\\text{h} \u4e86\u3002\u731c\u6590\u6ce2\u90a3\u5951\u6a21 m m \u6709\u5faa\u73af\u8282\uff0c\u4e3a\u4e86\u4fdd\u9669\u8ba1\u7b97 10m 10m \u9879\u3002 \u9884\u8ba1 (0\\sim 64)+(55\\sim 70)+20=75\\sim 154 (0\\sim 64)+(55\\sim 70)+20=75\\sim 154 \u3002\u8fd9\u4e2a\u5371\u9669\u7684\u5206\u6570\u53ef\u80fd\u4f1a\u76f4\u63a5\u628a\u6211\u9001\u9000\u5f79\u3002 \u51fa\u6210\u7ee9\u540e\u53d1\u73b0 T1 \u6709 80 80 \u5206\uff0c\u5f88\u4e0d\u9519\u3002T2 \u53ea\u6709 55 55 \uff0c\u672c\u6765\u8ba4\u4e3a\u8fd9\u662f\u5f88\u5408\u7406\u7684\u4e8b\uff0c\u4f46\u5728 LOJ\uff0c\u6d1b\u8c37\u548c\u672c\u5730\u90fd\u53ef\u4ee5\u5361\u8fdb 70 70 \u5206\uff0c\u4e8e\u662f\u7533\u8bc9\u3002T3 \u5982\u9884\u671f\uff0c 20 20 \u5206\u3002 \u5206\u6ca1\u8981\u5230\u3002\u6700\u7ec8\u5f97\u5206 155 155 \uff0c\u88ab\u5361 au \u7ebf\u4e86\u3002","title":"WC2021 \u6e38\u8bb0"}]}